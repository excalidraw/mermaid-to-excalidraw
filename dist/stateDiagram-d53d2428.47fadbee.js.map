{"version":3,"sources":["../src/diagrams/state/id-cache.js","../src/diagrams/state/shapes.js","../src/diagrams/state/stateRenderer.js","../src/diagrams/state/stateDiagram.ts"],"names":["isFirst","line","idCache","stateDb","diagram","keys","dagreLayout"],"mappings":"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","file":"stateDiagram-d53d2428.47fadbee.js","sourceRoot":"..","sourcesContent":["const idCache = {};\n\nexport const set = (key, val) => {\n  idCache[key] = val;\n};\n\nexport const get = (k) => idCache[k];\nexport const keys = () => Object.keys(idCache);\nexport const size = () => keys().length;\n\nexport default {\n  get,\n  set,\n  keys,\n  size,\n};\n","import { line, curveBasis } from 'd3';\nimport idCache from './id-cache.js';\nimport stateDb from './stateDb';\nimport utils from '../../utils';\nimport common from '../common/common';\nimport { getConfig } from '../../config';\nimport { log } from '../../logger';\n\n/**\n * Draws a start state as a black circle\n *\n * @param {any} g\n */\nexport const drawStartState = (g) =>\n  g\n    .append('circle')\n    // .style('stroke', 'black')\n    // .style('fill', 'black')\n    .attr('class', 'start-state')\n    .attr('r', getConfig().state.sizeUnit)\n    .attr('cx', getConfig().state.padding + getConfig().state.sizeUnit)\n    .attr('cy', getConfig().state.padding + getConfig().state.sizeUnit);\n\n/**\n * Draws a start state as a black circle\n *\n * @param {any} g\n */\nexport const drawDivider = (g) =>\n  g\n    .append('line')\n    .style('stroke', 'grey')\n    .style('stroke-dasharray', '3')\n    .attr('x1', getConfig().state.textHeight)\n    .attr('class', 'divider')\n    .attr('x2', getConfig().state.textHeight * 2)\n    .attr('y1', 0)\n    .attr('y2', 0);\n\n/**\n * Draws a an end state as a black circle\n *\n * @param {any} g\n * @param {any} stateDef\n */\nexport const drawSimpleState = (g, stateDef) => {\n  const state = g\n    .append('text')\n    .attr('x', 2 * getConfig().state.padding)\n    .attr('y', getConfig().state.textHeight + 2 * getConfig().state.padding)\n    .attr('font-size', getConfig().state.fontSize)\n    .attr('class', 'state-title')\n    .text(stateDef.id);\n\n  const classBox = state.node().getBBox();\n  g.insert('rect', ':first-child')\n    .attr('x', getConfig().state.padding)\n    .attr('y', getConfig().state.padding)\n    .attr('width', classBox.width + 2 * getConfig().state.padding)\n    .attr('height', classBox.height + 2 * getConfig().state.padding)\n    .attr('rx', getConfig().state.radius);\n\n  return state;\n};\n\n/**\n * Draws a state with descriptions\n *\n * @param {any} g The d3 svg object to add the state to\n * @param {any} stateDef\n * @returns {any} The d3 svg state\n */\nexport const drawDescrState = (g, stateDef) => {\n  const addTspan = function (textEl, txt, isFirst) {\n    const tSpan = textEl\n      .append('tspan')\n      .attr('x', 2 * getConfig().state.padding)\n      .text(txt);\n    if (!isFirst) {\n      tSpan.attr('dy', getConfig().state.textHeight);\n    }\n  };\n  const title = g\n    .append('text')\n    .attr('x', 2 * getConfig().state.padding)\n    .attr('y', getConfig().state.textHeight + 1.3 * getConfig().state.padding)\n    .attr('font-size', getConfig().state.fontSize)\n    .attr('class', 'state-title')\n    .text(stateDef.descriptions[0]);\n\n  const titleBox = title.node().getBBox();\n  const titleHeight = titleBox.height;\n\n  const description = g\n    .append('text') // text label for the x axis\n    .attr('x', getConfig().state.padding)\n    .attr(\n      'y',\n      titleHeight +\n        getConfig().state.padding * 0.4 +\n        getConfig().state.dividerMargin +\n        getConfig().state.textHeight\n    )\n    .attr('class', 'state-description');\n\n  let isFirst = true;\n  let isSecond = true;\n  stateDef.descriptions.forEach(function (descr) {\n    if (!isFirst) {\n      addTspan(description, descr, isSecond);\n      isSecond = false;\n    }\n    isFirst = false;\n  });\n\n  const descrLine = g\n    .append('line') // text label for the x axis\n    .attr('x1', getConfig().state.padding)\n    .attr('y1', getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2)\n    .attr('y2', getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2)\n    .attr('class', 'descr-divider');\n  const descrBox = description.node().getBBox();\n  const width = Math.max(descrBox.width, titleBox.width);\n\n  descrLine.attr('x2', width + 3 * getConfig().state.padding);\n  // const classBox = title.node().getBBox();\n\n  g.insert('rect', ':first-child')\n    .attr('x', getConfig().state.padding)\n    .attr('y', getConfig().state.padding)\n    .attr('width', width + 2 * getConfig().state.padding)\n    .attr('height', descrBox.height + titleHeight + 2 * getConfig().state.padding)\n    .attr('rx', getConfig().state.radius);\n\n  return g;\n};\n\n/** Adds the creates a box around the existing content and adds a panel for the id on top of the content. */\n/**\n * Function that creates an title row and a frame around a substate for a composite state diagram.\n * The function returns a new d3 svg object with updated width and height properties;\n *\n * @param {any} g The d3 svg object for the substate to framed\n * @param {any} stateDef The info about the\n * @param {any} altBkg\n */\nexport const addTitleAndBox = (g, stateDef, altBkg) => {\n  const pad = getConfig().state.padding;\n  const dblPad = 2 * getConfig().state.padding;\n  const orgBox = g.node().getBBox();\n  const orgWidth = orgBox.width;\n  const orgX = orgBox.x;\n\n  const title = g\n    .append('text')\n    .attr('x', 0)\n    .attr('y', getConfig().state.titleShift)\n    .attr('font-size', getConfig().state.fontSize)\n    .attr('class', 'state-title')\n    .text(stateDef.id);\n\n  const titleBox = title.node().getBBox();\n  const titleWidth = titleBox.width + dblPad;\n  let width = Math.max(titleWidth, orgWidth); // + dblPad;\n  if (width === orgWidth) {\n    width = width + dblPad;\n  }\n  let startX;\n  // const lineY = 1 - getConfig().state.textHeight;\n  // const descrLine = g\n  //   .append('line') // text label for the x axis\n  //   .attr('x1', 0)\n  //   .attr('y1', lineY)\n  //   .attr('y2', lineY)\n  //   .attr('class', 'descr-divider');\n\n  const graphBox = g.node().getBBox();\n  // descrLine.attr('x2', graphBox.width + getConfig().state.padding);\n\n  if (stateDef.doc) {\n    // console.warn(\n    //   stateDef.id,\n    //   'orgX: ',\n    //   orgX,\n    //   'width: ',\n    //   width,\n    //   'titleWidth: ',\n    //   titleWidth,\n    //   'orgWidth: ',\n    //   orgWidth,\n    //   'width',\n    //   width\n    // );\n  }\n\n  startX = orgX - pad;\n  if (titleWidth > orgWidth) {\n    startX = (orgWidth - width) / 2 + pad;\n  }\n  if (Math.abs(orgX - graphBox.x) < pad && titleWidth > orgWidth) {\n    startX = orgX - (titleWidth - orgWidth) / 2;\n  }\n\n  const lineY = 1 - getConfig().state.textHeight;\n  // White color\n  g.insert('rect', ':first-child')\n    .attr('x', startX)\n    .attr('y', lineY)\n    .attr('class', altBkg ? 'alt-composit' : 'composit')\n    .attr('width', width)\n    .attr(\n      'height',\n      graphBox.height + getConfig().state.textHeight + getConfig().state.titleShift + 1\n    )\n    .attr('rx', '0');\n\n  title.attr('x', startX + pad);\n  if (titleWidth <= orgWidth) {\n    title.attr('x', orgX + (width - dblPad) / 2 - titleWidth / 2 + pad);\n  }\n\n  // Title background\n  g.insert('rect', ':first-child')\n    .attr('x', startX)\n    .attr(\n      'y',\n      getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n    )\n    .attr('width', width)\n    // Just needs to be higher then the descr line, will be clipped by the white color box\n    .attr('height', getConfig().state.textHeight * 3)\n    .attr('rx', getConfig().state.radius);\n\n  // Full background\n  g.insert('rect', ':first-child')\n    .attr('x', startX)\n    .attr(\n      'y',\n      getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n    )\n    .attr('width', width)\n    .attr('height', graphBox.height + 3 + 2 * getConfig().state.textHeight)\n    .attr('rx', getConfig().state.radius);\n\n  return g;\n};\n\nconst drawEndState = (g) => {\n  g.append('circle')\n    // .style('stroke', 'black')\n    // .style('fill', 'white')\n    .attr('class', 'end-state-outer')\n    .attr('r', getConfig().state.sizeUnit + getConfig().state.miniPadding)\n    .attr(\n      'cx',\n      getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n    )\n    .attr(\n      'cy',\n      getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n    );\n\n  return (\n    g\n      .append('circle')\n      // .style('stroke', 'black')\n      // .style('fill', 'black')\n      .attr('class', 'end-state-inner')\n      .attr('r', getConfig().state.sizeUnit)\n      .attr('cx', getConfig().state.padding + getConfig().state.sizeUnit + 2)\n      .attr('cy', getConfig().state.padding + getConfig().state.sizeUnit + 2)\n  );\n};\nconst drawForkJoinState = (g, stateDef) => {\n  let width = getConfig().state.forkWidth;\n  let height = getConfig().state.forkHeight;\n\n  if (stateDef.parentId) {\n    let tmp = width;\n    width = height;\n    height = tmp;\n  }\n  return g\n    .append('rect')\n    .style('stroke', 'black')\n    .style('fill', 'black')\n    .attr('width', width)\n    .attr('height', height)\n    .attr('x', getConfig().state.padding)\n    .attr('y', getConfig().state.padding);\n};\n\nexport const drawText = function (elem, textData) {\n  // Remove and ignore br:s\n  const nText = textData.text.replace(common.lineBreakRegex, ' ');\n\n  const textElem = elem.append('text');\n  textElem.attr('x', textData.x);\n  textElem.attr('y', textData.y);\n  textElem.style('text-anchor', textData.anchor);\n  textElem.attr('fill', textData.fill);\n  if (textData.class !== undefined) {\n    textElem.attr('class', textData.class);\n  }\n\n  const span = textElem.append('tspan');\n  span.attr('x', textData.x + textData.textMargin * 2);\n  span.attr('fill', textData.fill);\n  span.text(nText);\n\n  return textElem;\n};\n\nconst _drawLongText = (_text, x, y, g) => {\n  let textHeight = 0;\n\n  const textElem = g.append('text');\n  textElem.style('text-anchor', 'start');\n  textElem.attr('class', 'noteText');\n\n  let text = _text.replace(/\\r\\n/g, '<br/>');\n  text = text.replace(/\\n/g, '<br/>');\n  const lines = text.split(common.lineBreakRegex);\n\n  let tHeight = 1.25 * getConfig().state.noteMargin;\n  for (const line of lines) {\n    const txt = line.trim();\n\n    if (txt.length > 0) {\n      const span = textElem.append('tspan');\n      span.text(txt);\n      if (tHeight === 0) {\n        const textBounds = span.node().getBBox();\n        tHeight += textBounds.height;\n      }\n      textHeight += tHeight;\n      span.attr('x', x + getConfig().state.noteMargin);\n      span.attr('y', y + textHeight + 1.25 * getConfig().state.noteMargin);\n    }\n  }\n  return { textWidth: textElem.node().getBBox().width, textHeight };\n};\n\n/**\n * Draws a note to the diagram\n *\n * @param text - The text of the given note.\n * @param g - The element the note is attached to.\n */\n\nexport const drawNote = (text, g) => {\n  g.attr('class', 'state-note');\n  const note = g.append('rect').attr('x', 0).attr('y', getConfig().state.padding);\n  const rectElem = g.append('g');\n\n  const { textWidth, textHeight } = _drawLongText(text, 0, 0, rectElem);\n  note.attr('height', textHeight + 2 * getConfig().state.noteMargin);\n  note.attr('width', textWidth + getConfig().state.noteMargin * 2);\n\n  return note;\n};\n\n/**\n * Starting point for drawing a state. The function finds out the specifics about the state and\n * renders with appropriate function.\n *\n * @param {any} elem\n * @param {any} stateDef\n */\n\nexport const drawState = function (elem, stateDef) {\n  const id = stateDef.id;\n  const stateInfo = {\n    id: id,\n    label: stateDef.id,\n    width: 0,\n    height: 0,\n  };\n\n  const g = elem.append('g').attr('id', id).attr('class', 'stateGroup');\n\n  if (stateDef.type === 'start') {\n    drawStartState(g);\n  }\n  if (stateDef.type === 'end') {\n    drawEndState(g);\n  }\n  if (stateDef.type === 'fork' || stateDef.type === 'join') {\n    drawForkJoinState(g, stateDef);\n  }\n  if (stateDef.type === 'note') {\n    drawNote(stateDef.note.text, g);\n  }\n  if (stateDef.type === 'divider') {\n    drawDivider(g);\n  }\n  if (stateDef.type === 'default' && stateDef.descriptions.length === 0) {\n    drawSimpleState(g, stateDef);\n  }\n  if (stateDef.type === 'default' && stateDef.descriptions.length > 0) {\n    drawDescrState(g, stateDef);\n  }\n\n  const stateBox = g.node().getBBox();\n  stateInfo.width = stateBox.width + 2 * getConfig().state.padding;\n  stateInfo.height = stateBox.height + 2 * getConfig().state.padding;\n\n  idCache.set(id, stateInfo);\n  // stateCnt++;\n  return stateInfo;\n};\n\nlet edgeCount = 0;\nexport const drawEdge = function (elem, path, relation) {\n  const getRelationType = function (type) {\n    switch (type) {\n      case stateDb.relationType.AGGREGATION:\n        return 'aggregation';\n      case stateDb.relationType.EXTENSION:\n        return 'extension';\n      case stateDb.relationType.COMPOSITION:\n        return 'composition';\n      case stateDb.relationType.DEPENDENCY:\n        return 'dependency';\n    }\n  };\n\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n\n  // The data for our line\n  const lineData = path.points;\n\n  // This is the accessor function we talked about above\n  const lineFunction = line()\n    .x(function (d) {\n      return d.x;\n    })\n    .y(function (d) {\n      return d.y;\n    })\n    .curve(curveBasis);\n\n  const svgPath = elem\n    .append('path')\n    .attr('d', lineFunction(lineData))\n    .attr('id', 'edge' + edgeCount)\n    .attr('class', 'transition');\n  let url = '';\n  if (getConfig().state.arrowMarkerAbsolute) {\n    url =\n      window.location.protocol +\n      '//' +\n      window.location.host +\n      window.location.pathname +\n      window.location.search;\n    url = url.replace(/\\(/g, '\\\\(');\n    url = url.replace(/\\)/g, '\\\\)');\n  }\n\n  svgPath.attr(\n    'marker-end',\n    'url(' + url + '#' + getRelationType(stateDb.relationType.DEPENDENCY) + 'End' + ')'\n  );\n\n  if (relation.title !== undefined) {\n    const label = elem.append('g').attr('class', 'stateLabel');\n\n    const { x, y } = utils.calcLabelPosition(path.points);\n\n    const rows = common.getRows(relation.title);\n\n    let titleHeight = 0;\n    const titleRows = [];\n    let maxWidth = 0;\n    let minX = 0;\n\n    for (let i = 0; i <= rows.length; i++) {\n      const title = label\n        .append('text')\n        .attr('text-anchor', 'middle')\n        .text(rows[i])\n        .attr('x', x)\n        .attr('y', y + titleHeight);\n\n      const boundstmp = title.node().getBBox();\n      maxWidth = Math.max(maxWidth, boundstmp.width);\n      minX = Math.min(minX, boundstmp.x);\n\n      log.info(boundstmp.x, x, y + titleHeight);\n\n      if (titleHeight === 0) {\n        const titleBox = title.node().getBBox();\n        titleHeight = titleBox.height;\n        log.info('Title height', titleHeight, y);\n      }\n      titleRows.push(title);\n    }\n\n    let boxHeight = titleHeight * rows.length;\n    if (rows.length > 1) {\n      const heightAdj = (rows.length - 1) * titleHeight * 0.5;\n\n      titleRows.forEach((title, i) => title.attr('y', y + i * titleHeight - heightAdj));\n      boxHeight = titleHeight * rows.length;\n    }\n\n    const bounds = label.node().getBBox();\n\n    label\n      .insert('rect', ':first-child')\n      .attr('class', 'box')\n      .attr('x', x - maxWidth / 2 - getConfig().state.padding / 2)\n      .attr('y', y - boxHeight / 2 - getConfig().state.padding / 2 - 3.5)\n      .attr('width', maxWidth + getConfig().state.padding)\n      .attr('height', boxHeight + getConfig().state.padding);\n\n    log.info(bounds);\n\n    //label.attr('transform', '0 -' + (bounds.y / 2));\n\n    // Debug points\n    // path.points.forEach(point => {\n    //   g.append('circle')\n    //     .style('stroke', 'red')\n    //     .style('fill', 'red')\n    //     .attr('r', 1)\n    //     .attr('cx', point.x)\n    //     .attr('cy', point.y);\n    // });\n    // g.append('circle')\n    //   .style('stroke', 'blue')\n    //   .style('fill', 'blue')\n    //   .attr('r', 1)\n    //   .attr('cx', x)\n    //   .attr('cy', y);\n  }\n\n  edgeCount++;\n};\n","import { select } from 'd3';\nimport { layout as dagreLayout } from 'dagre-d3-es/src/dagre/index.js';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport common from '../common/common';\nimport { drawState, addTitleAndBox, drawEdge } from './shapes';\nimport { getConfig } from '../../config';\nimport { configureSvgSize } from '../../setupGraphViewbox';\n\n// TODO Move conf object to main conf in mermaidAPI\nlet conf;\n\nconst transformationLog = {};\n\nexport const setConf = function () {\n  //no-op\n};\n\n/**\n * Setup arrow head and define the marker. The result is appended to the svg.\n *\n * @param {any} elem\n */\nconst insertMarkers = function (elem) {\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'dependencyEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 19,7 L9,13 L14,7 L9,1 Z');\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param {any} text\n * @param {any} id\n * @param _version\n * @param diagObj\n */\nexport const draw = function (text, id, _version, diagObj) {\n  conf = getConfig().state;\n  const securityLevel = getConfig().securityLevel;\n  // Handle root and Document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n\n  // diagObj.db.clear();\n  // parser.parse(text);\n  log.debug('Rendering diagram ' + text);\n\n  // Fetch the default direction, use TD if none was found\n  const diagram = root.select(`[id='${id}']`);\n  insertMarkers(diagram);\n\n  // Layout graph, Create a new directed graph\n  const graph = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n    // acyclicer: 'greedy',\n    rankdir: 'RL',\n    // ranksep: '20'\n  });\n\n  // Default to assigning a new object as a label for each new edge.\n  graph.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  const rootDoc = diagObj.db.getRootDoc();\n  renderDoc(rootDoc, diagram, undefined, false, root, doc, diagObj);\n\n  const padding = conf.padding;\n  const bounds = diagram.node().getBBox();\n\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n\n  // zoom in a bit\n  const svgWidth = width * 1.75;\n  configureSvgSize(diagram, height, svgWidth, conf.useMaxWidth);\n\n  diagram.attr(\n    'viewBox',\n    `${bounds.x - conf.padding}  ${bounds.y - conf.padding} ` + width + ' ' + height\n  );\n};\nconst getLabelWidth = (text) => {\n  return text ? text.length * conf.fontSizeFactor : 1;\n};\n\nconst renderDoc = (doc, diagram, parentId, altBkg, root, domDocument, diagObj) => {\n  // Layout graph, Create a new directed graph\n  const graph = new graphlib.Graph({\n    compound: true,\n    multigraph: true,\n  });\n\n  let i;\n  let edgeFreeDoc = true;\n  for (i = 0; i < doc.length; i++) {\n    if (doc[i].stmt === 'relation') {\n      edgeFreeDoc = false;\n      break;\n    }\n  }\n\n  // Set an object for the graph label\n  if (parentId) {\n    graph.setGraph({\n      rankdir: 'LR',\n      multigraph: true,\n      compound: true,\n      // acyclicer: 'greedy',\n      ranker: 'tight-tree',\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      isMultiGraph: true,\n      // ranksep: 5,\n      // nodesep: 1\n    });\n  } else {\n    graph.setGraph({\n      rankdir: 'TB',\n      multigraph: true,\n      compound: true,\n      // isCompound: true,\n      // acyclicer: 'greedy',\n      // ranker: 'longest-path'\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      ranker: 'tight-tree',\n      // ranker: 'network-simplex'\n      isMultiGraph: true,\n    });\n  }\n\n  // Default to assigning a new object as a label for each new edge.\n  graph.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  diagObj.db.extract(doc);\n  const states = diagObj.db.getStates();\n  const relations = diagObj.db.getRelations();\n\n  const keys = Object.keys(states);\n\n  let first = true;\n\n  for (const key of keys) {\n    const stateDef = states[key];\n\n    if (parentId) {\n      stateDef.parentId = parentId;\n    }\n\n    let node;\n    if (stateDef.doc) {\n      let sub = diagram.append('g').attr('id', stateDef.id).attr('class', 'stateGroup');\n      node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg, root, domDocument, diagObj);\n\n      if (first) {\n        // first = false;\n        sub = addTitleAndBox(sub, stateDef, altBkg);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height + conf.padding / 2;\n        transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      } else {\n        // sub = addIdAndBox(sub, stateDef);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height;\n        // transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      }\n    } else {\n      node = drawState(diagram, stateDef, graph);\n    }\n\n    if (stateDef.note) {\n      // Draw note note\n      const noteDef = {\n        descriptions: [],\n        id: stateDef.id + '-note',\n        note: stateDef.note,\n        type: 'note',\n      };\n      const note = drawState(diagram, noteDef, graph);\n\n      // graph.setNode(node.id, node);\n      if (stateDef.note.position === 'left of') {\n        graph.setNode(node.id + '-note', note);\n        graph.setNode(node.id, node);\n      } else {\n        graph.setNode(node.id, node);\n        graph.setNode(node.id + '-note', note);\n      }\n      // graph.setNode(node.id);\n      graph.setParent(node.id, node.id + '-group');\n      graph.setParent(node.id + '-note', node.id + '-group');\n    } else {\n      // Add nodes to the graph. The first argument is the node id. The second is\n      // metadata about the node. In this case we're going to add labels to each of\n      // our nodes.\n      graph.setNode(node.id, node);\n    }\n  }\n\n  log.debug('Count=', graph.nodeCount(), graph);\n  let cnt = 0;\n  relations.forEach(function (relation) {\n    cnt++;\n    log.debug('Setting edge', relation);\n    graph.setEdge(\n      relation.id1,\n      relation.id2,\n      {\n        relation: relation,\n        width: getLabelWidth(relation.title),\n        height: conf.labelHeight * common.getRows(relation.title).length,\n        labelpos: 'c',\n      },\n      'id' + cnt\n    );\n  });\n\n  dagreLayout(graph);\n\n  log.debug('Graph after layout', graph.nodes());\n  const svgElem = diagram.node();\n\n  graph.nodes().forEach(function (v) {\n    if (v !== undefined && graph.node(v) !== undefined) {\n      log.warn('Node ' + v + ': ' + JSON.stringify(graph.node(v)));\n      root\n        .select('#' + svgElem.id + ' #' + v)\n        .attr(\n          'transform',\n          'translate(' +\n            (graph.node(v).x - graph.node(v).width / 2) +\n            ',' +\n            (graph.node(v).y +\n              (transformationLog[v] ? transformationLog[v].y : 0) -\n              graph.node(v).height / 2) +\n            ' )'\n        );\n      root\n        .select('#' + svgElem.id + ' #' + v)\n        .attr('data-x-shift', graph.node(v).x - graph.node(v).width / 2);\n      const dividers = domDocument.querySelectorAll('#' + svgElem.id + ' #' + v + ' .divider');\n      dividers.forEach((divider) => {\n        const parent = divider.parentElement;\n        let pWidth = 0;\n        let pShift = 0;\n        if (parent) {\n          if (parent.parentElement) {\n            pWidth = parent.parentElement.getBBox().width;\n          }\n          pShift = parseInt(parent.getAttribute('data-x-shift'), 10);\n          if (Number.isNaN(pShift)) {\n            pShift = 0;\n          }\n        }\n        divider.setAttribute('x1', 0 - pShift + 8);\n        divider.setAttribute('x2', pWidth - pShift - 8);\n      });\n    } else {\n      log.debug('No Node ' + v + ': ' + JSON.stringify(graph.node(v)));\n    }\n  });\n\n  let stateBox = svgElem.getBBox();\n\n  graph.edges().forEach(function (e) {\n    if (e !== undefined && graph.edge(e) !== undefined) {\n      log.debug('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(graph.edge(e)));\n      drawEdge(diagram, graph.edge(e), graph.edge(e).relation);\n    }\n  });\n\n  stateBox = svgElem.getBBox();\n\n  const stateInfo = {\n    id: parentId ? parentId : 'root',\n    label: parentId ? parentId : 'root',\n    width: 0,\n    height: 0,\n  };\n\n  stateInfo.width = stateBox.width + 2 * conf.padding;\n  stateInfo.height = stateBox.height + 2 * conf.padding;\n\n  log.debug('Doc rendered', stateInfo, graph);\n  return stateInfo;\n};\n\nexport default {\n  setConf,\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/stateDiagram';\nimport db from './stateDb';\nimport styles from './styles';\nimport renderer from './stateRenderer';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"]}