{"version":3,"sources":["../src/diagrams/state/stateRenderer-v2.js","../src/diagrams/state/stateDiagram-v2.ts"],"names":[],"mappings":"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","file":"stateDiagram-v2-9765461d.461649af.js","sourceRoot":"..","sourcesContent":["import * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { select } from 'd3';\nimport { getConfig } from '../../config';\nimport { render } from '../../dagre-wrapper/index.js';\nimport { log } from '../../logger';\nimport { configureSvgSize } from '../../setupGraphViewbox';\nimport common from '../common/common';\nimport utils from '../../utils';\n\nimport {\n  DEFAULT_DIAGRAM_DIRECTION,\n  DEFAULT_NESTED_DOC_DIR,\n  STMT_STATE,\n  STMT_RELATION,\n  DEFAULT_STATE_TYPE,\n  DIVIDER_TYPE,\n} from './stateCommon';\n\n// --------------------------------------\n// Shapes\nconst SHAPE_STATE = 'rect';\nconst SHAPE_STATE_WITH_DESC = 'rectWithTitle';\nconst SHAPE_START = 'start';\nconst SHAPE_END = 'end';\nconst SHAPE_DIVIDER = 'divider';\nconst SHAPE_GROUP = 'roundedWithTitle';\nconst SHAPE_NOTE = 'note';\nconst SHAPE_NOTEGROUP = 'noteGroup';\n\n// --------------------------------------\n// CSS classes\nconst CSS_DIAGRAM = 'statediagram';\nconst CSS_STATE = 'state';\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = 'transition';\nconst CSS_NOTE = 'note';\nconst CSS_NOTE_EDGE = 'note-edge';\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = 'cluster';\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = 'cluster-alt';\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\n\n// --------------------------------------\n// DOM and element IDs\nconst PARENT = 'parent';\nconst NOTE = 'note';\nconst DOMID_STATE = 'state';\nconst DOMID_TYPE_SPACER = '----';\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\n// --------------------------------------\n// Graph edge settings\nconst G_EDGE_STYLE = 'fill:none';\nconst G_EDGE_ARROWHEADSTYLE = 'fill: #333';\nconst G_EDGE_LABELPOS = 'c';\nconst G_EDGE_LABELTYPE = 'text';\nconst G_EDGE_THICKNESS = 'normal';\n\n// --------------------------------------\n// List of nodes created from the parsed diagram statement items\nlet nodeDb = {};\n\nlet graphItemCount = 0; // used to construct ids, etc.\n\n// Configuration\nconst conf = {};\n\n// -----------------------------------------------------------------------\n\nexport const setConf = function (cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    conf[key] = cnf[key];\n  }\n};\n\n/**\n * Returns the all the classdef styles (a.k.a. classes) from classDef statements in the graph definition.\n *\n * @param {string} text - the diagram text to be parsed\n * @param diagramObj\n * @returns {object} ClassDef styles (a Map with keys = strings, values = )\n */\nexport const getClasses = function (text, diagramObj) {\n  log.trace('Extracting classes');\n  diagramObj.db.clear();\n  try {\n    // Parse the graph definition\n    diagramObj.parser.parse(text);\n    // must run extract() to turn the parsed statements into states, relationships, classes, etc.\n    diagramObj.db.extract(diagramObj.db.getRootDocV2());\n    return diagramObj.db.getClasses();\n  } catch (e) {\n    return e;\n  }\n};\n\n/**\n * Get classes from the db for the info item.\n * If there aren't any or if dbInfoItem isn't defined, return an empty string.\n * Else create 1 string from the list of classes found\n *\n * @param {undefined | null | object} dbInfoItem\n * @returns {string}\n */\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === undefined || dbInfoItem === null) {\n    return '';\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(' ');\n    } else {\n      return '';\n    }\n  }\n}\n\n/**\n * Create a standard string for the dom ID of an item.\n * If a type is given, insert that before the counter, preceded by the type spacer\n *\n * @param itemId\n * @param counter\n * @param {string | null} type\n * @param typeSpacer\n * @returns {string}\n */\nexport function stateDomId(itemId = '', counter = 0, type = '', typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : '';\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\n\n/**\n * Create a graph node based on the statement information\n *\n * @param g - graph\n * @param {object} parent\n * @param {object} parsedItem - parsed statement item\n * @param {object[]} diagramStates - the list of all known  states for the diagram\n * @param {object} diagramDb\n * @param {boolean} altFlag - for clusters, add the \"statediagram-cluster-alt\" CSS class\n */\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n\n  if (itemId !== 'root') {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n\n    // Add the node to our list (nodeDb)\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`,\n      };\n    }\n\n    const newNode = nodeDb[itemId];\n\n    // Save data for description and group so that for instance a statement without description overwrites\n    // one with description  @todo TODO What does this mean? If important, add a test for it\n\n    // Build of the array of description strings\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        // There already is an array of strings,add to it\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          // if there is a description already transform it to an array\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            // If the previous description was this, remove it\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n\n    // If there's only 1 description entry, just use a regular state shape\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n\n    // group\n    if (!newNode.type && parsedItem.doc) {\n      log.info('Setting cluster for ', itemId, getDir(parsedItem));\n      newNode.type = 'group';\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes =\n        newNode.classes +\n        ' ' +\n        CSS_DIAGRAM_CLUSTER +\n        ' ' +\n        (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : '');\n    }\n\n    // This is what will be added to the graph\n    const nodeData = {\n      labelStyle: '',\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: '', //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15, //getConfig().flowchart.padding\n    };\n    // if (useHtmlLabels) {\n    nodeData.centerLabel = true;\n    // }\n\n    if (parsedItem.note) {\n      // Todo: set random id\n      const noteData = {\n        labelStyle: '',\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: '', // styles.style,\n        id: itemId + NOTE_ID + '-' + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15, //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: '',\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: '', // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: 'group',\n        padding: 0, //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n\n      let from = itemId;\n      let to = noteData.id;\n\n      if (parsedItem.note.position === 'left of') {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: 'none',\n        arrowType: '',\n        style: G_EDGE_STYLE,\n        labelStyle: '',\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS,\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n\n  if (parent && parent.id !== 'root') {\n    log.trace('Setting node ', itemId, ' to be child of its parent ', parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace('Adding nodes children ');\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\n\n/**\n * Turn parsed statements (item.stmt) into nodes, relationships, etc. for a document.\n * (A document may be nested within others.)\n *\n * @param g\n * @param parentParsedItem - parsed Item that is the parent of this document (doc)\n * @param doc - the document to set up; it is a list of parsed statements\n * @param {object[]} diagramStates - the list of all known states for the diagram\n * @param diagramDb\n * @param {boolean} altFlag\n * @todo This duplicates some of what is done in stateDb.js extract method\n */\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  // graphItemCount = 0;\n  log.trace('items', doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: 'edge' + graphItemCount,\n            arrowhead: 'normal',\n            arrowTypeEnd: 'arrow_barb',\n            style: G_EDGE_STYLE,\n            labelStyle: '',\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE,\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\n\n/**\n * Get the direction from the statement items.\n * Look through all of the documents (docs) in the parsedItems\n * Because is a _document_ direction, the default direction is not necessarily the same as the overall default _diagram_ direction.\n * @param {object[]} parsedItem - the parsed statement item to look through\n * @param [defaultDir=DEFAULT_NESTED_DOC_DIR] - the direction to use if none is found\n * @returns {string}\n */\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === 'dir') {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\n\n/**\n * Draws a state diagram in the tag with id: id based on the graph definition in text.\n *\n * @param {any} text\n * @param {any} id\n * @param _version\n * @param diag\n */\nexport const draw = function (text, id, _version, diag) {\n  log.info('Drawing state diagram (v2)', id);\n  // diag.sb.clear();\n  nodeDb = {};\n  // Fetch the default direction, use TD if none was found\n  let dir = diag.db.getDirection();\n  if (dir === undefined) {\n    dir = DEFAULT_DIAGRAM_DIRECTION;\n  }\n\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n\n  log.info(diag.db.getRootDocV2());\n\n  // This parses the diagram text and sets the classes, relations, styles, classDefs, etc.\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n\n  const diagramStates = diag.db.getStates();\n\n  // Create the input mermaid.graph\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: getDir(diag.db.getRootDocV2()),\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 8,\n      marginy: 8,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  setupNode(g, undefined, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n\n  // Set up an SVG group so that we can translate the final graph.\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n\n  const element = root.select('#' + id + ' g');\n  render(element, g, ['barb'], CSS_DIAGRAM, id);\n\n  const padding = 8;\n\n  utils.insertTitle(svg, 'statediagramTitleText', conf.titleTopMargin, diag.db.getDiagramTitle());\n\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n\n  // Zoom in a bit\n  svg.attr('class', CSS_DIAGRAM);\n\n  const svgBounds = svg.node().getBBox();\n\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n\n  // Ensure the viewBox includes the whole svgBounds area with extra space for padding\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr('viewBox', vBox);\n\n  // Add label rects for non html labels\n  // if (!evaluate(conf.htmlLabels) || true) {\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    // Get dimensions of label\n    const dim = label.getBBox();\n\n    const rect = document.createElementNS('http://www.w3.org/2000/svg', SHAPE_STATE);\n    rect.setAttribute('rx', 0);\n    rect.setAttribute('ry', 0);\n    rect.setAttribute('width', dim.width);\n    rect.setAttribute('height', dim.height);\n\n    label.insertBefore(rect, label.firstChild);\n    // }\n  }\n};\n\nexport default {\n  setConf,\n  getClasses,\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/stateDiagram';\nimport db from './stateDb';\nimport styles from './styles';\nimport renderer from './stateRenderer-v2';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"]}