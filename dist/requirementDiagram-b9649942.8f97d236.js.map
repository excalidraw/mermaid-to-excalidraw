{"version":3,"sources":["../src/diagrams/requirement/parser/requirementDiagram.jison","../src/diagrams/requirement/requirementDb.js","../src/diagrams/requirement/styles.js","../src/diagrams/requirement/requirementMarkers.js","../src/diagrams/requirement/requirementRenderer.js","../src/diagrams/requirement/requirementDiagram.ts"],"names":["o","parser","lexer","commonClear","configApi.getConfig","conf","requirements","elements","dagreLayout"],"mappings":"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","file":"requirementDiagram-b9649942.8f97d236.js","sourceRoot":"..","sourcesContent":["/** mermaid\n *  https://knsv.github.io/mermaid\n *  (c) 2015 Knut Sveidqvist\n *  MIT license.\n */\n%lex\n%options case-insensitive\n\n%x string\n%x token\n%x unqString\n%x open_directive\n%x type_directive\n%x arg_directive\n%x close_directive\n%x acc_title\n%x acc_descr\n%x acc_descr_multiline\n%%\n\\%\\%\\{                                                          { this.begin('open_directive'); return 'open_directive'; }\n<open_directive>((?:(?!\\}\\%\\%)[^:.])*)                          { this.begin('type_directive'); return 'type_directive'; }\n<type_directive>\":\"                                             { this.popState(); this.begin('arg_directive'); return ':'; }\n<type_directive,arg_directive>\\}\\%\\%                            { this.popState(); this.popState(); return 'close_directive'; }\n<arg_directive>((?:(?!\\}\\%\\%).|\\n)*)                            return 'arg_directive';\n\n\"title\"\\s[^#\\n;]+       return 'title';\naccTitle\\s*\":\"\\s*                                               { this.begin(\"acc_title\");return 'acc_title'; }\n<acc_title>(?!\\n|;|#)*[^\\n]*                                    { this.popState(); return \"acc_title_value\"; }\naccDescr\\s*\":\"\\s*                                               { this.begin(\"acc_descr\");return 'acc_descr'; }\n<acc_descr>(?!\\n|;|#)*[^\\n]*                                    { this.popState(); return \"acc_descr_value\"; }\naccDescr\\s*\"{\"\\s*                                { this.begin(\"acc_descr_multiline\");}\n<acc_descr_multiline>[\\}]                       { this.popState(); }\n<acc_descr_multiline>[^\\}]*                     return \"acc_descr_multiline_value\";\n(\\r?\\n)+                               return 'NEWLINE';\n\\s+                                    /* skip all whitespace */\n\\#[^\\n]*                               /* skip comments */\n\\%%[^\\n]*                              /* skip comments */\n<<EOF>>                               return 'EOF';\n\n\"requirementDiagram\"        return 'RD';\n\n\"{\"                         return 'STRUCT_START';\n\"}\"                         return 'STRUCT_STOP';\n\":\"                         return 'COLONSEP';\n\n\"id\"                        return 'ID';\n\"text\"                      return 'TEXT';\n\"risk\"                      return 'RISK';\n\"verifyMethod\"              return 'VERIFYMTHD';\n\n\"requirement\"               return 'REQUIREMENT';\n\"functionalRequirement\"     return 'FUNCTIONAL_REQUIREMENT';\n\"interfaceRequirement\"      return 'INTERFACE_REQUIREMENT';\n\"performanceRequirement\"    return 'PERFORMANCE_REQUIREMENT';\n\"physicalRequirement\"       return 'PHYSICAL_REQUIREMENT';\n\"designConstraint\"          return 'DESIGN_CONSTRAINT';\n\n\"low\"                       return 'LOW_RISK';\n\"medium\"                    return 'MED_RISK';\n\"high\"                      return 'HIGH_RISK';\n\n\"analysis\"                  return 'VERIFY_ANALYSIS';\n\"demonstration\"             return 'VERIFY_DEMONSTRATION';\n\"inspection\"                return 'VERIFY_INSPECTION';\n\"test\"                      return 'VERIFY_TEST';\n\n\"element\"       return 'ELEMENT';\n\n\"contains\"      return 'CONTAINS';\n\"copies\"        return 'COPIES';\n\"derives\"       return 'DERIVES';\n\"satisfies\"     return 'SATISFIES';\n\"verifies\"      return 'VERIFIES';\n\"refines\"       return 'REFINES';\n\"traces\"        return 'TRACES';\n\n\"type\"          return 'TYPE';\n\"docref\"        return 'DOCREF';\n\n\"<-\"        return 'END_ARROW_L';\n\"->\"        {return 'END_ARROW_R';}\n\"-\"         {return 'LINE';}\n\n[\"]                 { this.begin(\"string\"); }\n<string>[\"]         { this.popState(); }\n<string>[^\"]*       { return \"qString\"; }\n\n[\\w][^\\r\\n\\{\\<\\>\\-\\=]*                { yytext = yytext.trim(); return 'unqString';}\n\n/lex\n\n%start start\n\n%% /* language grammar */\n\nstart\n  : directive NEWLINE start\n  | directive start\n  | RD NEWLINE diagram EOF;\n\ndirective\n  : openDirective typeDirective closeDirective\n  | openDirective typeDirective ':' argDirective closeDirective\n  | acc_title acc_title_value  { $$=$2.trim();yy.setAccTitle($$); }\n  | acc_descr acc_descr_value  { $$=$2.trim();yy.setAccDescription($$); }\n  | acc_descr_multiline_value { $$=$1.trim();yy.setAccDescription($$); }\n  ;\nopenDirective\n  : open_directive { yy.parseDirective('%%{', 'open_directive'); };\n\ntypeDirective\n  : type_directive { yy.parseDirective($1, 'type_directive'); };\n\nargDirective\n  : arg_directive { $1 = $1.trim().replace(/'/g, '\"'); yy.parseDirective($1, 'arg_directive'); };\n\ncloseDirective\n  : close_directive { yy.parseDirective('}%%', 'close_directive', 'pie'); };\n\ndiagram\n  : /* empty */ { $$ = [] }\n  | requirementDef diagram\n  | elementDef diagram\n  | relationshipDef diagram\n  | directive diagram\n  | NEWLINE diagram;\n\nrequirementDef\n  : requirementType requirementName STRUCT_START NEWLINE requirementBody\n    { yy.addRequirement($2, $1) };\n\nrequirementBody\n  : ID COLONSEP id NEWLINE requirementBody\n    { yy.setNewReqId($3); }\n  | TEXT COLONSEP text NEWLINE requirementBody\n    { yy.setNewReqText($3); }\n  | RISK COLONSEP riskLevel NEWLINE requirementBody\n    { yy.setNewReqRisk($3); }\n  | VERIFYMTHD COLONSEP verifyType NEWLINE requirementBody\n    { yy.setNewReqVerifyMethod($3); }\n  | NEWLINE requirementBody\n  | STRUCT_STOP;\n\nrequirementType\n  : REQUIREMENT\n    { $$=yy.RequirementType.REQUIREMENT;}\n  | FUNCTIONAL_REQUIREMENT\n    { $$=yy.RequirementType.FUNCTIONAL_REQUIREMENT;}\n  | INTERFACE_REQUIREMENT\n    { $$=yy.RequirementType.INTERFACE_REQUIREMENT;}\n  | PERFORMANCE_REQUIREMENT\n    { $$=yy.RequirementType.PERFORMANCE_REQUIREMENT;}\n  | PHYSICAL_REQUIREMENT\n    { $$=yy.RequirementType.PHYSICAL_REQUIREMENT;}\n  | DESIGN_CONSTRAINT\n    { $$=yy.RequirementType.DESIGN_CONSTRAINT;};\n\nriskLevel\n  : LOW_RISK { $$=yy.RiskLevel.LOW_RISK;}\n  | MED_RISK { $$=yy.RiskLevel.MED_RISK;}\n  | HIGH_RISK { $$=yy.RiskLevel.HIGH_RISK;};\n\nverifyType\n  : VERIFY_ANALYSIS\n    { $$=yy.VerifyType.VERIFY_ANALYSIS;}\n  | VERIFY_DEMONSTRATION\n    { $$=yy.VerifyType.VERIFY_DEMONSTRATION;}\n  | VERIFY_INSPECTION\n    { $$=yy.VerifyType.VERIFY_INSPECTION;}\n  | VERIFY_TEST\n    { $$=yy.VerifyType.VERIFY_TEST;};\n\nelementDef\n  : ELEMENT elementName STRUCT_START NEWLINE elementBody\n    { yy.addElement($2) };\n\nelementBody\n  : TYPE COLONSEP type NEWLINE elementBody\n    { yy.setNewElementType($3); }\n  | DOCREF COLONSEP ref NEWLINE elementBody\n    { yy.setNewElementDocRef($3); }\n  | NEWLINE elementBody\n  | STRUCT_STOP;\n\nrelationshipDef\n  : id END_ARROW_L relationship LINE id\n    {  yy.addRelationship($3, $5, $1) }\n  | id LINE relationship END_ARROW_R id\n     { yy.addRelationship($3, $1, $5) };\n\nrelationship\n  : CONTAINS\n      { $$=yy.Relationships.CONTAINS;}\n  | COPIES\n      { $$=yy.Relationships.COPIES;}\n  | DERIVES\n      { $$=yy.Relationships.DERIVES;}\n  | SATISFIES\n      { $$=yy.Relationships.SATISFIES;}\n  | VERIFIES\n      { $$=yy.Relationships.VERIFIES;}\n  | REFINES\n      { $$=yy.Relationships.REFINES;}\n  | TRACES\n      { $$=yy.Relationships.TRACES;};\n\n\nrequirementName: unqString | qString;\nid : unqString | qString;\ntext : unqString | qString;\nelementName : unqString | qString;\ntype : unqString | qString;\nref : unqString | qString;\n\n%%\n","import * as configApi from '../../config';\nimport { log } from '../../logger';\nimport mermaidAPI from '../../mermaidAPI';\n\nimport {\n  setAccTitle,\n  getAccTitle,\n  getAccDescription,\n  setAccDescription,\n  clear as commonClear,\n} from '../../commonDb';\n\nlet relations = [];\nlet latestRequirement = {};\nlet requirements = {};\nlet latestElement = {};\nlet elements = {};\n\nconst RequirementType = {\n  REQUIREMENT: 'Requirement',\n  FUNCTIONAL_REQUIREMENT: 'Functional Requirement',\n  INTERFACE_REQUIREMENT: 'Interface Requirement',\n  PERFORMANCE_REQUIREMENT: 'Performance Requirement',\n  PHYSICAL_REQUIREMENT: 'Physical Requirement',\n  DESIGN_CONSTRAINT: 'Design Constraint',\n};\n\nconst RiskLevel = {\n  LOW_RISK: 'Low',\n  MED_RISK: 'Medium',\n  HIGH_RISK: 'High',\n};\n\nconst VerifyType = {\n  VERIFY_ANALYSIS: 'Analysis',\n  VERIFY_DEMONSTRATION: 'Demonstration',\n  VERIFY_INSPECTION: 'Inspection',\n  VERIFY_TEST: 'Test',\n};\n\nconst Relationships = {\n  CONTAINS: 'contains',\n  COPIES: 'copies',\n  DERIVES: 'derives',\n  SATISFIES: 'satisfies',\n  VERIFIES: 'verifies',\n  REFINES: 'refines',\n  TRACES: 'traces',\n};\n\nexport const parseDirective = function (statement, context, type) {\n  mermaidAPI.parseDirective(this, statement, context, type);\n};\n\nconst addRequirement = (name, type) => {\n  if (requirements[name] === undefined) {\n    requirements[name] = {\n      name,\n      type,\n\n      id: latestRequirement.id,\n      text: latestRequirement.text,\n      risk: latestRequirement.risk,\n      verifyMethod: latestRequirement.verifyMethod,\n    };\n  }\n  latestRequirement = {};\n\n  return requirements[name];\n};\n\nconst getRequirements = () => requirements;\n\nconst setNewReqId = (id) => {\n  if (latestRequirement !== undefined) {\n    latestRequirement.id = id;\n  }\n};\n\nconst setNewReqText = (text) => {\n  if (latestRequirement !== undefined) {\n    latestRequirement.text = text;\n  }\n};\n\nconst setNewReqRisk = (risk) => {\n  if (latestRequirement !== undefined) {\n    latestRequirement.risk = risk;\n  }\n};\n\nconst setNewReqVerifyMethod = (verifyMethod) => {\n  if (latestRequirement !== undefined) {\n    latestRequirement.verifyMethod = verifyMethod;\n  }\n};\n\nconst addElement = (name) => {\n  if (elements[name] === undefined) {\n    elements[name] = {\n      name,\n\n      type: latestElement.type,\n      docRef: latestElement.docRef,\n    };\n    log.info('Added new requirement: ', name);\n  }\n  latestElement = {};\n\n  return elements[name];\n};\n\nconst getElements = () => elements;\n\nconst setNewElementType = (type) => {\n  if (latestElement !== undefined) {\n    latestElement.type = type;\n  }\n};\n\nconst setNewElementDocRef = (docRef) => {\n  if (latestElement !== undefined) {\n    latestElement.docRef = docRef;\n  }\n};\n\nconst addRelationship = (type, src, dst) => {\n  relations.push({\n    type,\n    src,\n    dst,\n  });\n};\n\nconst getRelationships = () => relations;\n\nconst clear = () => {\n  relations = [];\n  latestRequirement = {};\n  requirements = {};\n  latestElement = {};\n  elements = {};\n  commonClear();\n};\n\nexport default {\n  RequirementType,\n  RiskLevel,\n  VerifyType,\n  Relationships,\n\n  parseDirective,\n  getConfig: () => configApi.getConfig().req,\n\n  addRequirement,\n  getRequirements,\n  setNewReqId,\n  setNewReqText,\n  setNewReqRisk,\n  setNewReqVerifyMethod,\n  setAccTitle,\n  getAccTitle,\n  setAccDescription,\n  getAccDescription,\n\n  addElement,\n  getElements,\n  setNewElementType,\n  setNewElementDocRef,\n\n  addRelationship,\n  getRelationships,\n\n  clear,\n};\n","const getStyles = (options) => `\n\n  marker {\n    fill: ${options.relationColor};\n    stroke: ${options.relationColor};\n  }\n\n  marker.cross {\n    stroke: ${options.lineColor};\n  }\n\n  svg {\n    font-family: ${options.fontFamily};\n    font-size: ${options.fontSize};\n  }\n\n  .reqBox {\n    fill: ${options.requirementBackground};\n    fill-opacity: 100%;\n    stroke: ${options.requirementBorderColor};\n    stroke-width: ${options.requirementBorderSize};\n  }\n  \n  .reqTitle, .reqLabel{\n    fill:  ${options.requirementTextColor};\n  }\n  .reqLabelBox {\n    fill: ${options.relationLabelBackground};\n    fill-opacity: 100%;\n  }\n\n  .req-title-line {\n    stroke: ${options.requirementBorderColor};\n    stroke-width: ${options.requirementBorderSize};\n  }\n  .relationshipLine {\n    stroke: ${options.relationColor};\n    stroke-width: 1;\n  }\n  .relationshipLabel {\n    fill: ${options.relationLabelColor};\n  }\n\n`;\n// fill', conf.rect_fill)\nexport default getStyles;\n","const ReqMarkers = {\n  CONTAINS: 'contains',\n  ARROW: 'arrow',\n};\n\nconst insertLineEndings = (parentNode, conf) => {\n  let containsNode = parentNode\n    .append('defs')\n    .append('marker')\n    .attr('id', ReqMarkers.CONTAINS + '_line_ending')\n    .attr('refX', 0)\n    .attr('refY', conf.line_height / 2)\n    .attr('markerWidth', conf.line_height)\n    .attr('markerHeight', conf.line_height)\n    .attr('orient', 'auto')\n    .append('g');\n\n  containsNode\n    .append('circle')\n    .attr('cx', conf.line_height / 2)\n    .attr('cy', conf.line_height / 2)\n    .attr('r', conf.line_height / 2)\n    // .attr('stroke', conf.rect_border_color)\n    // .attr('stroke-width', 1)\n    .attr('fill', 'none');\n\n  containsNode\n    .append('line')\n    .attr('x1', 0)\n    .attr('x2', conf.line_height)\n    .attr('y1', conf.line_height / 2)\n    .attr('y2', conf.line_height / 2)\n    // .attr('stroke', conf.rect_border_color)\n    .attr('stroke-width', 1);\n\n  containsNode\n    .append('line')\n    .attr('y1', 0)\n    .attr('y2', conf.line_height)\n    .attr('x1', conf.line_height / 2)\n    .attr('x2', conf.line_height / 2)\n    // .attr('stroke', conf.rect_border_color)\n    .attr('stroke-width', 1);\n\n  parentNode\n    .append('defs')\n    .append('marker')\n    .attr('id', ReqMarkers.ARROW + '_line_ending')\n    .attr('refX', conf.line_height)\n    .attr('refY', 0.5 * conf.line_height)\n    .attr('markerWidth', conf.line_height)\n    .attr('markerHeight', conf.line_height)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr(\n      'd',\n      `M0,0\n      L${conf.line_height},${conf.line_height / 2}\n      M${conf.line_height},${conf.line_height / 2}\n      L0,${conf.line_height}`\n    )\n    .attr('stroke-width', 1);\n  // .attr('stroke', conf.rect_border_color);\n};\n\nexport default {\n  ReqMarkers,\n  insertLineEndings,\n};\n","import { line, select } from 'd3';\nimport { layout as dagreLayout } from 'dagre-d3-es/src/dagre/index.js';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport { configureSvgSize } from '../../setupGraphViewbox';\nimport common from '../common/common';\nimport markers from './requirementMarkers';\nimport { getConfig } from '../../config';\n\nlet conf = {};\nlet relCnt = 0;\n\nconst newRectNode = (parentNode, id) => {\n  return parentNode\n    .insert('rect', '#' + id)\n    .attr('class', 'req reqBox')\n    .attr('x', 0)\n    .attr('y', 0)\n    .attr('width', conf.rect_min_width + 'px')\n    .attr('height', conf.rect_min_height + 'px');\n};\n\nconst newTitleNode = (parentNode, id, txts) => {\n  let x = conf.rect_min_width / 2;\n\n  let title = parentNode\n    .append('text')\n    .attr('class', 'req reqLabel reqTitle')\n    .attr('id', id)\n    .attr('x', x)\n    .attr('y', conf.rect_padding)\n    .attr('dominant-baseline', 'hanging');\n  // .attr(\n  //   'style',\n  //   'font-family: ' + configApi.getConfig().fontFamily + '; font-size: ' + conf.fontSize + 'px'\n  // )\n  let i = 0;\n  txts.forEach((textStr) => {\n    if (i == 0) {\n      title\n        .append('tspan')\n        .attr('text-anchor', 'middle')\n        .attr('x', conf.rect_min_width / 2)\n        .attr('dy', 0)\n        .text(textStr);\n    } else {\n      title\n        .append('tspan')\n        .attr('text-anchor', 'middle')\n        .attr('x', conf.rect_min_width / 2)\n        .attr('dy', conf.line_height * 0.75)\n        .text(textStr);\n    }\n    i++;\n  });\n\n  let yPadding = 1.5 * conf.rect_padding;\n  let linePadding = i * conf.line_height * 0.75;\n  let totalY = yPadding + linePadding;\n\n  parentNode\n    .append('line')\n    .attr('class', 'req-title-line')\n    .attr('x1', '0')\n    .attr('x2', conf.rect_min_width)\n    .attr('y1', totalY)\n    .attr('y2', totalY);\n\n  return {\n    titleNode: title,\n    y: totalY,\n  };\n};\n\nconst newBodyNode = (parentNode, id, txts, yStart) => {\n  let body = parentNode\n    .append('text')\n    .attr('class', 'req reqLabel')\n    .attr('id', id)\n    .attr('x', conf.rect_padding)\n    .attr('y', yStart)\n    .attr('dominant-baseline', 'hanging');\n  // .attr(\n  //   'style',\n  //   'font-family: ' + configApi.getConfig().fontFamily + '; font-size: ' + conf.fontSize + 'px'\n  // );\n\n  let currentRow = 0;\n  const charLimit = 30;\n  let wrappedTxts = [];\n  txts.forEach((textStr) => {\n    let currentTextLen = textStr.length;\n    while (currentTextLen > charLimit && currentRow < 3) {\n      let firstPart = textStr.substring(0, charLimit);\n      textStr = textStr.substring(charLimit, textStr.length);\n      currentTextLen = textStr.length;\n      wrappedTxts[wrappedTxts.length] = firstPart;\n      currentRow++;\n    }\n    if (currentRow == 3) {\n      let lastStr = wrappedTxts[wrappedTxts.length - 1];\n      wrappedTxts[wrappedTxts.length - 1] = lastStr.substring(0, lastStr.length - 4) + '...';\n    } else {\n      wrappedTxts[wrappedTxts.length] = textStr;\n    }\n    currentRow = 0;\n  });\n\n  wrappedTxts.forEach((textStr) => {\n    body.append('tspan').attr('x', conf.rect_padding).attr('dy', conf.line_height).text(textStr);\n  });\n\n  return body;\n};\n\nconst addEdgeLabel = (parentNode, svgPath, conf, txt) => {\n  // Find the half-way point\n  const len = svgPath.node().getTotalLength();\n  const labelPoint = svgPath.node().getPointAtLength(len * 0.5);\n\n  // Append a text node containing the label\n  const labelId = 'rel' + relCnt;\n  relCnt++;\n\n  const labelNode = parentNode\n    .append('text')\n    .attr('class', 'req relationshipLabel')\n    .attr('id', labelId)\n    .attr('x', labelPoint.x)\n    .attr('y', labelPoint.y)\n    .attr('text-anchor', 'middle')\n    .attr('dominant-baseline', 'middle')\n    // .attr('style', 'font-family: ' + conf.fontFamily + '; font-size: ' + conf.fontSize + 'px')\n    .text(txt);\n\n  // Figure out how big the opaque 'container' rectangle needs to be\n  const labelBBox = labelNode.node().getBBox();\n\n  // Insert the opaque rectangle before the text label\n  parentNode\n    .insert('rect', '#' + labelId)\n    .attr('class', 'req reqLabelBox')\n    .attr('x', labelPoint.x - labelBBox.width / 2)\n    .attr('y', labelPoint.y - labelBBox.height / 2)\n    .attr('width', labelBBox.width)\n    .attr('height', labelBBox.height)\n    .attr('fill', 'white')\n    .attr('fill-opacity', '85%');\n};\n\nconst drawRelationshipFromLayout = function (svg, rel, g, insert, diagObj) {\n  // Find the edge relating to this relationship\n  const edge = g.edge(elementString(rel.src), elementString(rel.dst));\n\n  // Get a function that will generate the line path\n  const lineFunction = line()\n    .x(function (d) {\n      return d.x;\n    })\n    .y(function (d) {\n      return d.y;\n    });\n\n  // Insert the line at the right place\n  const svgPath = svg\n    .insert('path', '#' + insert)\n    .attr('class', 'er relationshipLine')\n    .attr('d', lineFunction(edge.points))\n    .attr('fill', 'none');\n\n  if (rel.type == diagObj.db.Relationships.CONTAINS) {\n    svgPath.attr(\n      'marker-start',\n      'url(' + common.getUrl(conf.arrowMarkerAbsolute) + '#' + rel.type + '_line_ending' + ')'\n    );\n  } else {\n    svgPath.attr('stroke-dasharray', '10,7');\n    svgPath.attr(\n      'marker-end',\n      'url(' +\n        common.getUrl(conf.arrowMarkerAbsolute) +\n        '#' +\n        markers.ReqMarkers.ARROW +\n        '_line_ending' +\n        ')'\n    );\n  }\n\n  addEdgeLabel(svg, svgPath, conf, `<<${rel.type}>>`);\n\n  return;\n};\n\nexport const drawReqs = (reqs, graph, svgNode) => {\n  Object.keys(reqs).forEach((reqName) => {\n    let req = reqs[reqName];\n    reqName = elementString(reqName);\n    log.info('Added new requirement: ', reqName);\n\n    const groupNode = svgNode.append('g').attr('id', reqName);\n    const textId = 'req-' + reqName;\n    const rectNode = newRectNode(groupNode, textId);\n\n    let nodes = [];\n\n    let titleNodeInfo = newTitleNode(groupNode, reqName + '_title', [\n      `<<${req.type}>>`,\n      `${req.name}`,\n    ]);\n\n    nodes.push(titleNodeInfo.titleNode);\n\n    let bodyNode = newBodyNode(\n      groupNode,\n      reqName + '_body',\n      [\n        `Id: ${req.id}`,\n        `Text: ${req.text}`,\n        `Risk: ${req.risk}`,\n        `Verification: ${req.verifyMethod}`,\n      ],\n      titleNodeInfo.y\n    );\n\n    nodes.push(bodyNode);\n\n    const rectBBox = rectNode.node().getBBox();\n\n    // Add the entity to the graph\n    graph.setNode(reqName, {\n      width: rectBBox.width,\n      height: rectBBox.height,\n      shape: 'rect',\n      id: reqName,\n    });\n  });\n};\n\nexport const drawElements = (els, graph, svgNode) => {\n  Object.keys(els).forEach((elName) => {\n    let el = els[elName];\n    const id = elementString(elName);\n\n    const groupNode = svgNode.append('g').attr('id', id);\n    const textId = 'element-' + id;\n    const rectNode = newRectNode(groupNode, textId);\n\n    let nodes = [];\n\n    let titleNodeInfo = newTitleNode(groupNode, textId + '_title', [`<<Element>>`, `${elName}`]);\n\n    nodes.push(titleNodeInfo.titleNode);\n\n    let bodyNode = newBodyNode(\n      groupNode,\n      textId + '_body',\n      [`Type: ${el.type || 'Not Specified'}`, `Doc Ref: ${el.docRef || 'None'}`],\n      titleNodeInfo.y\n    );\n\n    nodes.push(bodyNode);\n\n    const rectBBox = rectNode.node().getBBox();\n\n    // Add the entity to the graph\n    graph.setNode(id, {\n      width: rectBBox.width,\n      height: rectBBox.height,\n      shape: 'rect',\n      id: id,\n    });\n  });\n};\n\nconst addRelationships = (relationships, g) => {\n  relationships.forEach(function (r) {\n    let src = elementString(r.src);\n    let dst = elementString(r.dst);\n    g.setEdge(src, dst, { relationship: r });\n  });\n  return relationships;\n};\n\nconst adjustEntities = function (svgNode, graph) {\n  graph.nodes().forEach(function (v) {\n    if (v !== undefined && graph.node(v) !== undefined) {\n      svgNode.select('#' + v);\n      svgNode\n        .select('#' + v)\n        .attr(\n          'transform',\n          'translate(' +\n            (graph.node(v).x - graph.node(v).width / 2) +\n            ',' +\n            (graph.node(v).y - graph.node(v).height / 2) +\n            ' )'\n        );\n    }\n  });\n  return;\n};\n\nconst elementString = (str) => {\n  return str.replace(/\\s/g, '').replace(/\\./g, '_');\n};\n\nexport const draw = (text, id, _version, diagObj) => {\n  conf = getConfig().requirement;\n  diagObj.db.clear();\n  diagObj.parser.parse(text);\n\n  const securityLevel = conf.securityLevel;\n  // Handle root and Document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n\n  const svg = root.select(`[id='${id}']`);\n  markers.insertLineEndings(svg, conf);\n\n  const g = new graphlib.Graph({\n    multigraph: false,\n    compound: false,\n    directed: true,\n  })\n    .setGraph({\n      rankdir: conf.layoutDirection,\n      marginx: 20,\n      marginy: 20,\n      nodesep: 100,\n      edgesep: 100,\n      ranksep: 100,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  let requirements = diagObj.db.getRequirements();\n  let elements = diagObj.db.getElements();\n  let relationships = diagObj.db.getRelationships();\n\n  drawReqs(requirements, g, svg);\n  drawElements(elements, g, svg);\n  addRelationships(relationships, g);\n  dagreLayout(g);\n  adjustEntities(svg, g);\n\n  relationships.forEach(function (rel) {\n    drawRelationshipFromLayout(svg, rel, g, id, diagObj);\n  });\n\n  const padding = conf.rect_padding;\n  const svgBounds = svg.node().getBBox();\n  const width = svgBounds.width + padding * 2;\n  const height = svgBounds.height + padding * 2;\n\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n\n  svg.attr('viewBox', `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`);\n};\n\nexport default {\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/requirementDiagram';\nimport db from './requirementDb';\nimport styles from './styles';\nimport renderer from './requirementRenderer';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n};\n"]}