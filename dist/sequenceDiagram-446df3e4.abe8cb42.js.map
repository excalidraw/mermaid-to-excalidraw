{"version":3,"sources":["../src/diagrams/sequence/parser/sequenceDiagram.jison","../src/diagrams/sequence/sequenceDb.js","../src/diagrams/sequence/styles.js","../src/diagrams/sequence/svgDraw.js","../src/diagrams/sequence/sequenceRenderer.ts","../src/diagrams/sequence/sequenceDiagram.ts"],"names":["o","parser","lexer","configApi.getConfig","commonClear","actors","text","actorCnt","diagram","bounds","conf","actorActivations","messages","boxes","box","messageWidth","actorWidth"],"mappings":";;;;;;;;;;;;;;;;;;AAyEA,IAAI,MAAA,GAAU,YAAU;EACxB,IAAI,CAAA,GAAE,SAAA,CAAS,CAAA,EAAE,CAAA,EAAEA,EAAAA,EAAE,CAAA,EAAE;MAAC,KAAIA,EAAAA,GAAEA,EAAAA,IAAG,CAAA,CAAA,EAAG,CAAA,GAAE,CAAA,CAAE,MAAA,EAAO,CAAA,EAAA,EAAIA,EAAAA,CAAE,CAAA,CAAE,CAAC,CAAC,CAAA,GAAE,CAAA,CAAE;MAAC,OAAOA,EAAAA;IAAC,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,CAAC,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,CAAC,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,CAAC,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,CAAC,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,CAAC,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,CAAA,EAAE,CAAA,EAAE,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,CAAA,EAAE,EAAA,EAAG,EAAA,EAAG,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,CAAA,EAAE,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,CAAA,EAAE,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,CAAA,EAAE,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,CAAA,EAAE,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,EAAA,EAAG,EAAA,EAAG,EAAE,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,GAAG,CAAA;IAAE,GAAA,GAAI,CAAC,CAAA,EAAE,CAAA,EAAE,CAAA,EAAE,CAAA,EAAE,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,EAAA,EAAG,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","file":"sequenceDiagram-446df3e4.abe8cb42.js","sourceRoot":"..","sourcesContent":["/** mermaid\n *  https://mermaidjs.github.io/\n *  (c) 2014-2015 Knut Sveidqvist\n *  MIT license.\n *\n *  Based on js sequence diagrams jison grammr\n *  https://bramp.github.io/js-sequence-diagrams/\n *  (c) 2012-2013 Andrew Brampton (bramp.net)\n *  Simplified BSD license.\n */\n%lex\n\n%options case-insensitive\n\n// Special states for recognizing aliases\n// A special state for grabbing text up to the first comment/newline\n%x ID ALIAS LINE\n\n// Directive states\n%x open_directive type_directive arg_directive\n%x acc_title\n%x acc_descr\n%x acc_descr_multiline\n%%\n\n\\%\\%\\{                                                          { this.begin('open_directive'); return 'open_directive'; }\n<open_directive>((?:(?!\\}\\%\\%)[^:.])*)                          { this.begin('type_directive'); return 'type_directive'; }\n<type_directive>\":\"                                             { this.popState(); this.begin('arg_directive'); return ':'; }\n<type_directive,arg_directive>\\}\\%\\%                            { this.popState(); this.popState(); return 'close_directive'; }\n<arg_directive>((?:(?!\\}\\%\\%).|\\n)*)                            return 'arg_directive';\n[\\n]+                                                           return 'NEWLINE';\n\\s+                                                             /* skip all whitespace */\n<ID,ALIAS,LINE>((?!\\n)\\s)+                                      /* skip same-line whitespace */\n<INITIAL,ID,ALIAS,LINE,arg_directive,type_directive,open_directive>\\#[^\\n]*   /* skip comments */\n\\%%(?!\\{)[^\\n]*                                                 /* skip comments */\n[^\\}]\\%\\%[^\\n]*                                                 /* skip comments */\n[0-9]+(?=[ \\n]+)       \t\t\t\t\t\t\t\t\t\t\treturn 'NUM';\n\"box\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ this.begin('LINE'); return 'box'; }\n\"participant\"                                                   { this.begin('ID'); return 'participant'; }\n\"actor\"                                                   \t\t{ this.begin('ID'); return 'participant_actor'; }\n<ID>[^\\->:\\n,;]+?([\\-]*[^\\->:\\n,;]+?)*?(?=((?!\\n)\\s)+\"as\"(?!\\n)\\s|[#\\n;]|$)     { yytext = yytext.trim(); this.begin('ALIAS'); return 'ACTOR'; }\n<ALIAS>\"as\"                                                     { this.popState(); this.popState(); this.begin('LINE'); return 'AS'; }\n<ALIAS>(?:)                                                     { this.popState(); this.popState(); return 'NEWLINE'; }\n\"loop\"                                                          { this.begin('LINE'); return 'loop'; }\n\"rect\"                                                          { this.begin('LINE'); return 'rect'; }\n\"opt\"                                                           { this.begin('LINE'); return 'opt'; }\n\"alt\"                                                           { this.begin('LINE'); return 'alt'; }\n\"else\"                                                          { this.begin('LINE'); return 'else'; }\n\"par\"                                                           { this.begin('LINE'); return 'par'; }\n\"and\"                                                           { this.begin('LINE'); return 'and'; }\n\"critical\"                                                      { this.begin('LINE'); return 'critical'; }\n\"option\"                                                        { this.begin('LINE'); return 'option'; }\n\"break\"                                                         { this.begin('LINE'); return 'break'; }\n<LINE>(?:[:]?(?:no)?wrap:)?[^#\\n;]*                             { this.popState(); return 'restOfLine'; }\n\"end\"                                                           return 'end';\n\"left of\"                                                       return 'left_of';\n\"right of\"                                                      return 'right_of';\n\"links\"                                                         return 'links';\n\"link\"                                                          return 'link';\n\"properties\"                                                    return 'properties';\n\"details\"                                                       return 'details';\n\"over\"                                                          return 'over';\n\"note\"                                                          return 'note';\n\"activate\"                                                      { this.begin('ID'); return 'activate'; }\n\"deactivate\"                                                    { this.begin('ID'); return 'deactivate'; }\n\"title\"\\s[^#\\n;]+                                               return 'title';\n\"title:\"\\s[^#\\n;]+                                              return 'legacy_title';\naccTitle\\s*\":\"\\s*                                               { this.begin(\"acc_title\");return 'acc_title'; }\n<acc_title>(?!\\n|;|#)*[^\\n]*                                    { this.popState(); return \"acc_title_value\"; }\naccDescr\\s*\":\"\\s*                                               { this.begin(\"acc_descr\");return 'acc_descr'; }\n<acc_descr>(?!\\n|;|#)*[^\\n]*                                    { this.popState(); return \"acc_descr_value\"; }\naccDescr\\s*\"{\"\\s*                                { this.begin(\"acc_descr_multiline\");}\n<acc_descr_multiline>[\\}]                       { this.popState(); }\n<acc_descr_multiline>[^\\}]*                     return \"acc_descr_multiline_value\";\n\"sequenceDiagram\"                                               return 'SD';\n\"autonumber\"                                                    return 'autonumber';\n\"off\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn 'off';\n\",\"                                                             return ',';\n\";\"                                                             return 'NEWLINE';\n[^\\+\\->:\\n,;]+((?!(\\-x|\\-\\-x|\\-\\)|\\-\\-\\)))[\\-]*[^\\+\\->:\\n,;]+)*             { yytext = yytext.trim(); return 'ACTOR'; }\n\"->>\"                                                           return 'SOLID_ARROW';\n\"-->>\"                                                          return 'DOTTED_ARROW';\n\"->\"                                                            return 'SOLID_OPEN_ARROW';\n\"-->\"                                                           return 'DOTTED_OPEN_ARROW';\n\\-[x]                                                           return 'SOLID_CROSS';\n\\-\\-[x]                                                         return 'DOTTED_CROSS';\n\\-[\\)]                                                          return 'SOLID_POINT';\n\\-\\-[\\)]                                                        return 'DOTTED_POINT';\n\":\"(?:(?:no)?wrap:)?[^#\\n;]+                                    return 'TXT';\n\"+\"                                                             return '+';\n\"-\"                                                             return '-';\n<<EOF>>                                                         return 'NEWLINE';\n.                                                               return 'INVALID';\n\n/lex\n\n%left '^'\n\n%start start\n\n%% /* language grammar */\n\nstart\n\t: SPACE start\n\t| NEWLINE start\n\t| directive start\n\t| SD document { yy.apply($2);return $2; }\n\t;\n\ndocument\n\t: /* empty */ { $$ = [] }\n\t| document line {$1.push($2);$$ = $1}\n\t;\n\nline\n\t: SPACE statement { $$ = $2 }\n\t| statement { $$ = $1 }\n\t| NEWLINE { $$=[]; }\n\t;\n\nbox_section\n\t: /* empty */ { $$ = [] }\n\t| box_section box_line {$1.push($2);$$ = $1}\n\t;\n\nbox_line\n\t: SPACE participant_statement { $$ = $2 }\n\t| participant_statement { $$ = $1 }\n\t| NEWLINE { $$=[]; }\n\t;\n\n\ndirective\n  : openDirective typeDirective closeDirective 'NEWLINE'\n  | openDirective typeDirective ':' argDirective closeDirective 'NEWLINE'\n  ;\n\nstatement\n\t: participant_statement\n\t| 'box' restOfLine box_section end\n\t{\n\t\t$3.unshift({type: 'boxStart', boxData:yy.parseBoxData($2) });\n\t\t$3.push({type: 'boxEnd', boxText:$2});\n\t\t$$=$3;}\n\t| signal 'NEWLINE'\n\t| autonumber NUM NUM 'NEWLINE' { $$= {type:'sequenceIndex',sequenceIndex: Number($2), sequenceIndexStep:Number($3), sequenceVisible:true, signalType:yy.LINETYPE.AUTONUMBER};}\n\t| autonumber NUM 'NEWLINE' { $$ = {type:'sequenceIndex',sequenceIndex: Number($2), sequenceIndexStep:1, sequenceVisible:true, signalType:yy.LINETYPE.AUTONUMBER};}\n\t| autonumber off 'NEWLINE' { $$ = {type:'sequenceIndex', sequenceVisible:false, signalType:yy.LINETYPE.AUTONUMBER};}\n\t| autonumber 'NEWLINE'  {$$ = {type:'sequenceIndex', sequenceVisible:true, signalType:yy.LINETYPE.AUTONUMBER}; }\n\t| 'activate' actor 'NEWLINE' {$$={type: 'activeStart', signalType: yy.LINETYPE.ACTIVE_START, actor: $2};}\n\t| 'deactivate' actor 'NEWLINE' {$$={type: 'activeEnd', signalType: yy.LINETYPE.ACTIVE_END, actor: $2};}\n\t| note_statement 'NEWLINE'\n\t| links_statement 'NEWLINE'\n\t| link_statement 'NEWLINE'\n\t| properties_statement 'NEWLINE'\n\t| details_statement 'NEWLINE'\n\t| title {yy.setDiagramTitle($1.substring(6));$$=$1.substring(6);}\n\t| legacy_title {yy.setDiagramTitle($1.substring(7));$$=$1.substring(7);}\n  | acc_title acc_title_value  { $$=$2.trim();yy.setAccTitle($$); }\n  | acc_descr acc_descr_value  { $$=$2.trim();yy.setAccDescription($$); }\n  | acc_descr_multiline_value { $$=$1.trim();yy.setAccDescription($$); }\n\t| 'loop' restOfLine document end\n\t{\n\t\t$3.unshift({type: 'loopStart', loopText:yy.parseMessage($2), signalType: yy.LINETYPE.LOOP_START});\n\t\t$3.push({type: 'loopEnd', loopText:$2, signalType: yy.LINETYPE.LOOP_END});\n\t\t$$=$3;}\n\t| 'rect' restOfLine document end\n\t{\n\t\t$3.unshift({type: 'rectStart', color:yy.parseMessage($2), signalType: yy.LINETYPE.RECT_START });\n\t\t$3.push({type: 'rectEnd', color:yy.parseMessage($2), signalType: yy.LINETYPE.RECT_END });\n\t\t$$=$3;}\n\t| opt restOfLine document end\n\t{\n\t\t$3.unshift({type: 'optStart', optText:yy.parseMessage($2), signalType: yy.LINETYPE.OPT_START});\n\t\t$3.push({type: 'optEnd', optText:yy.parseMessage($2), signalType: yy.LINETYPE.OPT_END});\n\t\t$$=$3;}\n\t| alt restOfLine else_sections end\n\t{\n\t\t// Alt start\n\t\t$3.unshift({type: 'altStart', altText:yy.parseMessage($2), signalType: yy.LINETYPE.ALT_START});\n\t\t// Content in alt is already in $3\n\t\t// End\n\t\t$3.push({type: 'altEnd', signalType: yy.LINETYPE.ALT_END});\n\t\t$$=$3;}\n\t| par restOfLine par_sections end\n\t{\n\t\t// Parallel start\n\t\t$3.unshift({type: 'parStart', parText:yy.parseMessage($2), signalType: yy.LINETYPE.PAR_START});\n\t\t// Content in par is already in $3\n\t\t// End\n\t\t$3.push({type: 'parEnd', signalType: yy.LINETYPE.PAR_END});\n\t\t$$=$3;}\n\t| critical restOfLine option_sections end\n\t{\n\t\t// critical start\n\t\t$3.unshift({type: 'criticalStart', criticalText:yy.parseMessage($2), signalType: yy.LINETYPE.CRITICAL_START});\n\t\t// Content in critical is already in $3\n\t\t// critical end\n\t\t$3.push({type: 'criticalEnd', signalType: yy.LINETYPE.CRITICAL_END});\n\t\t$$=$3;}\n\t| break restOfLine document end\n\t{\n\t\t$3.unshift({type: 'breakStart', breakText:yy.parseMessage($2), signalType: yy.LINETYPE.BREAK_START});\n\t\t$3.push({type: 'breakEnd', optText:yy.parseMessage($2), signalType: yy.LINETYPE.BREAK_END});\n\t\t$$=$3;}\n  | directive\n\t;\n\noption_sections\n\t: document\n\t| document option restOfLine option_sections\n\t{ $$ = $1.concat([{type: 'option', optionText:yy.parseMessage($3), signalType: yy.LINETYPE.CRITICAL_OPTION}, $4]); }\n\t;\n\npar_sections\n\t: document\n\t| document and restOfLine par_sections\n\t{ $$ = $1.concat([{type: 'and', parText:yy.parseMessage($3), signalType: yy.LINETYPE.PAR_AND}, $4]); }\n\t;\n\nelse_sections\n\t: document\n\t| document else restOfLine else_sections\n\t{ $$ = $1.concat([{type: 'else', altText:yy.parseMessage($3), signalType: yy.LINETYPE.ALT_ELSE}, $4]); }\n\t;\n\nparticipant_statement\n\t: 'participant' actor 'AS' restOfLine 'NEWLINE' {$2.type='addParticipant';$2.description=yy.parseMessage($4); $$=$2;}\n\t| 'participant' actor 'NEWLINE' {$2.type='addParticipant';$$=$2;}\n\t| 'participant_actor' actor 'AS' restOfLine 'NEWLINE' {$2.type='addActor';$2.description=yy.parseMessage($4); $$=$2;}\n\t| 'participant_actor' actor 'NEWLINE' {$2.type='addActor'; $$=$2;}\n\t;\n\nnote_statement\n\t: 'note' placement actor text2\n\t{\n\t\t$$ = [$3, {type:'addNote', placement:$2, actor:$3.actor, text:$4}];}\n\t| 'note' 'over' actor_pair text2\n\t{\n\t\t// Coerce actor_pair into a [to, from, ...] array\n\t\t$2 = [].concat($3, $3).slice(0, 2);\n\t\t$2[0] = $2[0].actor;\n\t\t$2[1] = $2[1].actor;\n\t\t$$ = [$3, {type:'addNote', placement:yy.PLACEMENT.OVER, actor:$2.slice(0, 2), text:$4}];}\n\t;\n\nlinks_statement\n\t: 'links' actor text2\n\t{\n\t\t$$ = [$2, {type:'addLinks', actor:$2.actor, text:$3}];\n  }\n\t;\n\nlink_statement\n\t: 'link' actor text2\n\t{\n\t\t$$ = [$2, {type:'addALink', actor:$2.actor, text:$3}];\n  }\n\t;\n\nproperties_statement\n\t: 'properties' actor text2\n\t{\n\t\t$$ = [$2, {type:'addProperties', actor:$2.actor, text:$3}];\n  }\n\t;\n\ndetails_statement\n\t: 'details' actor text2\n\t{\n\t\t$$ = [$2, {type:'addDetails', actor:$2.actor, text:$3}];\n  }\n\t;\n\nspaceList\n    : SPACE spaceList\n    | SPACE\n    ;\nactor_pair\n\t: actor ',' actor   { $$ = [$1, $3]; }\n\t| actor             { $$ = $1; }\n\t;\n\nplacement\n\t: 'left_of'   { $$ = yy.PLACEMENT.LEFTOF; }\n\t| 'right_of'  { $$ = yy.PLACEMENT.RIGHTOF; }\n\t;\n\nsignal\n\t: actor signaltype '+' actor text2\n\t{ $$ = [$1,$4,{type: 'addMessage', from:$1.actor, to:$4.actor, signalType:$2, msg:$5},\n\t              {type: 'activeStart', signalType: yy.LINETYPE.ACTIVE_START, actor: $4}\n\t             ]}\n\t| actor signaltype '-' actor text2\n\t{ $$ = [$1,$4,{type: 'addMessage', from:$1.actor, to:$4.actor, signalType:$2, msg:$5},\n\t             {type: 'activeEnd', signalType: yy.LINETYPE.ACTIVE_END, actor: $1}\n\t             ]}\n\t| actor signaltype actor text2\n\t{ $$ = [$1,$3,{type: 'addMessage', from:$1.actor, to:$3.actor, signalType:$2, msg:$4}]}\n\t;\n\n// actor\n// \t: actor_participant\n// \t| actor_actor\n// \t;\n\nactor: ACTOR {$$={ type: 'addParticipant', actor:$1}};\n// actor_actor: ACTOR {$$={type: 'addActor', actor:$1}};\n\nsignaltype\n\t: SOLID_OPEN_ARROW  { $$ = yy.LINETYPE.SOLID_OPEN; }\n\t| DOTTED_OPEN_ARROW { $$ = yy.LINETYPE.DOTTED_OPEN; }\n\t| SOLID_ARROW       { $$ = yy.LINETYPE.SOLID; }\n\t| DOTTED_ARROW      { $$ = yy.LINETYPE.DOTTED; }\n\t| SOLID_CROSS       { $$ = yy.LINETYPE.SOLID_CROSS; }\n\t| DOTTED_CROSS      { $$ = yy.LINETYPE.DOTTED_CROSS; }\n\t| SOLID_POINT { $$ = yy.LINETYPE.SOLID_POINT; }\n\t| DOTTED_POINT { $$ = yy.LINETYPE.DOTTED_POINT; }\n\t;\n\ntext2\n  : TXT {$$ = yy.parseMessage($1.trim().substring(1)) }\n  ;\n\nopenDirective\n  : open_directive { yy.parseDirective('%%{', 'open_directive'); }\n  ;\n\ntypeDirective\n  : type_directive { yy.parseDirective($1, 'type_directive'); }\n  ;\n\nargDirective\n  : arg_directive { $1 = $1.trim().replace(/'/g, '\"'); yy.parseDirective($1, 'arg_directive'); }\n  ;\n\ncloseDirective\n  : close_directive { yy.parseDirective('}%%', 'close_directive', 'sequence'); }\n  ;\n\n%%\n","import mermaidAPI from '../../mermaidAPI';\nimport * as configApi from '../../config';\nimport { log } from '../../logger';\nimport { sanitizeText } from '../common/common';\nimport {\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription,\n  clear as commonClear,\n} from '../../commonDb';\n\nlet prevActor = undefined;\nlet actors = {};\nlet boxes = [];\nlet messages = [];\nconst notes = [];\nlet sequenceNumbersEnabled = false;\nlet wrapEnabled;\nlet currentBox = undefined;\n\nexport const parseDirective = function (statement, context, type) {\n  mermaidAPI.parseDirective(this, statement, context, type);\n};\n\nexport const addBox = function (data) {\n  boxes.push({\n    name: data.text,\n    wrap: (data.wrap === undefined && autoWrap()) || !!data.wrap,\n    fill: data.color,\n    actorKeys: [],\n  });\n  currentBox = boxes.slice(-1)[0];\n};\n\nexport const addActor = function (id, name, description, type) {\n  let assignedBox = currentBox;\n  const old = actors[id];\n  if (old) {\n    // If already set and trying to set to a new one throw error\n    if (currentBox && old.box && currentBox !== old.box) {\n      throw new Error(\n        'A same participant should only be defined in one Box: ' +\n          old.name +\n          \" can't be in '\" +\n          old.box.name +\n          \"' and in '\" +\n          currentBox.name +\n          \"' at the same time.\"\n      );\n    }\n\n    // Don't change the box if already\n    assignedBox = old.box ? old.box : currentBox;\n    old.box = assignedBox;\n\n    // Don't allow description nulling\n    if (old && name === old.name && description == null) {\n      return;\n    }\n  }\n\n  // Don't allow null descriptions, either\n  if (description == null || description.text == null) {\n    description = { text: name, wrap: null, type };\n  }\n  if (type == null || description.text == null) {\n    description = { text: name, wrap: null, type };\n  }\n\n  actors[id] = {\n    box: assignedBox,\n    name: name,\n    description: description.text,\n    wrap: (description.wrap === undefined && autoWrap()) || !!description.wrap,\n    prevActor: prevActor,\n    links: {},\n    properties: {},\n    actorCnt: null,\n    rectData: null,\n    type: type || 'participant',\n  };\n  if (prevActor && actors[prevActor]) {\n    actors[prevActor].nextActor = id;\n  }\n\n  if (currentBox) {\n    currentBox.actorKeys.push(id);\n  }\n  prevActor = id;\n};\n\nconst activationCount = (part) => {\n  let i;\n  let count = 0;\n  for (i = 0; i < messages.length; i++) {\n    if (messages[i].type === LINETYPE.ACTIVE_START && messages[i].from.actor === part) {\n      count++;\n    }\n    if (messages[i].type === LINETYPE.ACTIVE_END && messages[i].from.actor === part) {\n      count--;\n    }\n  }\n  return count;\n};\n\nexport const addMessage = function (idFrom, idTo, message, answer) {\n  messages.push({\n    from: idFrom,\n    to: idTo,\n    message: message.text,\n    wrap: (message.wrap === undefined && autoWrap()) || !!message.wrap,\n    answer: answer,\n  });\n};\n\nexport const addSignal = function (\n  idFrom,\n  idTo,\n  message = { text: undefined, wrap: undefined },\n  messageType\n) {\n  if (messageType === LINETYPE.ACTIVE_END) {\n    const cnt = activationCount(idFrom.actor);\n    if (cnt < 1) {\n      // Bail out as there is an activation signal from an inactive participant\n      let error = new Error('Trying to inactivate an inactive participant (' + idFrom.actor + ')');\n      error.hash = {\n        text: '->>-',\n        token: '->>-',\n        line: '1',\n        loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n        expected: [\"'ACTIVE_PARTICIPANT'\"],\n      };\n      throw error;\n    }\n  }\n  messages.push({\n    from: idFrom,\n    to: idTo,\n    message: message.text,\n    wrap: (message.wrap === undefined && autoWrap()) || !!message.wrap,\n    type: messageType,\n  });\n  return true;\n};\n\nexport const hasAtLeastOneBox = function () {\n  return boxes.length > 0;\n};\n\nexport const hasAtLeastOneBoxWithTitle = function () {\n  return boxes.some((b) => b.name);\n};\n\nexport const getMessages = function () {\n  return messages;\n};\n\nexport const getBoxes = function () {\n  return boxes;\n};\nexport const getActors = function () {\n  return actors;\n};\nexport const getActor = function (id) {\n  return actors[id];\n};\nexport const getActorKeys = function () {\n  return Object.keys(actors);\n};\nexport const enableSequenceNumbers = function () {\n  sequenceNumbersEnabled = true;\n};\nexport const disableSequenceNumbers = function () {\n  sequenceNumbersEnabled = false;\n};\nexport const showSequenceNumbers = () => sequenceNumbersEnabled;\n\nexport const setWrap = function (wrapSetting) {\n  wrapEnabled = wrapSetting;\n};\n\nexport const autoWrap = () => {\n  // if setWrap has been called, use that value, otherwise use the value from the config\n  // TODO: refactor, always use the config value let setWrap update the config value\n  if (wrapEnabled !== undefined) {\n    return wrapEnabled;\n  }\n  return configApi.getConfig().sequence.wrap;\n};\n\nexport const clear = function () {\n  actors = {};\n  boxes = [];\n  messages = [];\n  sequenceNumbersEnabled = false;\n  commonClear();\n};\n\nexport const parseMessage = function (str) {\n  const _str = str.trim();\n  const message = {\n    text: _str.replace(/^:?(?:no)?wrap:/, '').trim(),\n    wrap:\n      _str.match(/^:?wrap:/) !== null\n        ? true\n        : _str.match(/^:?nowrap:/) !== null\n        ? false\n        : undefined,\n  };\n  log.debug('parseMessage:', message);\n  return message;\n};\n\n// We expect the box statement to be color first then description\n// The color can be rgb,rgba,hsl,hsla, or css code names  #hex codes are not supported for now because of the way the char # is handled\n// We extract first segment as color, the rest of the line is considered as text\nexport const parseBoxData = function (str) {\n  const match = str.match(/^((?:rgba?|hsla?)\\s*\\(.*\\)|\\w*)(.*)$/);\n  let color = match != null && match[1] ? match[1].trim() : 'transparent';\n  let title = match != null && match[2] ? match[2].trim() : undefined;\n\n  // check that the string is a color\n  if (window && window.CSS) {\n    if (!window.CSS.supports('color', color)) {\n      color = 'transparent';\n      title = str.trim();\n    }\n  } else {\n    const style = new Option().style;\n    style.color = color;\n    if (style.color !== color) {\n      color = 'transparent';\n      title = str.trim();\n    }\n  }\n\n  const boxData = {\n    color: color,\n    text:\n      title !== undefined\n        ? sanitizeText(title.replace(/^:?(?:no)?wrap:/, ''), configApi.getConfig())\n        : undefined,\n    wrap:\n      title !== undefined\n        ? title.match(/^:?wrap:/) !== null\n          ? true\n          : title.match(/^:?nowrap:/) !== null\n          ? false\n          : undefined\n        : undefined,\n  };\n  return boxData;\n};\n\nexport const LINETYPE = {\n  SOLID: 0,\n  DOTTED: 1,\n  NOTE: 2,\n  SOLID_CROSS: 3,\n  DOTTED_CROSS: 4,\n  SOLID_OPEN: 5,\n  DOTTED_OPEN: 6,\n  LOOP_START: 10,\n  LOOP_END: 11,\n  ALT_START: 12,\n  ALT_ELSE: 13,\n  ALT_END: 14,\n  OPT_START: 15,\n  OPT_END: 16,\n  ACTIVE_START: 17,\n  ACTIVE_END: 18,\n  PAR_START: 19,\n  PAR_AND: 20,\n  PAR_END: 21,\n  RECT_START: 22,\n  RECT_END: 23,\n  SOLID_POINT: 24,\n  DOTTED_POINT: 25,\n  AUTONUMBER: 26,\n  CRITICAL_START: 27,\n  CRITICAL_OPTION: 28,\n  CRITICAL_END: 29,\n  BREAK_START: 30,\n  BREAK_END: 31,\n};\n\nexport const ARROWTYPE = {\n  FILLED: 0,\n  OPEN: 1,\n};\n\nexport const PLACEMENT = {\n  LEFTOF: 0,\n  RIGHTOF: 1,\n  OVER: 2,\n};\n\nexport const addNote = function (actor, placement, message) {\n  const note = {\n    actor: actor,\n    placement: placement,\n    message: message.text,\n    wrap: (message.wrap === undefined && autoWrap()) || !!message.wrap,\n  };\n\n  // Coerce actor into a [to, from, ...] array\n  // eslint-disable-next-line unicorn/prefer-spread\n  const actors = [].concat(actor, actor);\n\n  notes.push(note);\n  messages.push({\n    from: actors[0],\n    to: actors[1],\n    message: message.text,\n    wrap: (message.wrap === undefined && autoWrap()) || !!message.wrap,\n    type: LINETYPE.NOTE,\n    placement: placement,\n  });\n};\n\nexport const addLinks = function (actorId, text) {\n  // find the actor\n  const actor = getActor(actorId);\n  // JSON.parse the text\n  try {\n    let sanitizedText = sanitizeText(text.text, configApi.getConfig());\n    sanitizedText = sanitizedText.replace(/&amp;/g, '&');\n    sanitizedText = sanitizedText.replace(/&equals;/g, '=');\n    const links = JSON.parse(sanitizedText);\n    // add the deserialized text to the actor's links field.\n    insertLinks(actor, links);\n  } catch (e) {\n    log.error('error while parsing actor link text', e);\n  }\n};\n\nexport const addALink = function (actorId, text) {\n  // find the actor\n  const actor = getActor(actorId);\n  try {\n    const links = {};\n    let sanitizedText = sanitizeText(text.text, configApi.getConfig());\n    var sep = sanitizedText.indexOf('@');\n    sanitizedText = sanitizedText.replace(/&amp;/g, '&');\n    sanitizedText = sanitizedText.replace(/&equals;/g, '=');\n    var label = sanitizedText.slice(0, sep - 1).trim();\n    var link = sanitizedText.slice(sep + 1).trim();\n\n    links[label] = link;\n    // add the deserialized text to the actor's links field.\n    insertLinks(actor, links);\n  } catch (e) {\n    log.error('error while parsing actor link text', e);\n  }\n};\n\n/**\n * @param {any} actor\n * @param {any} links\n */\nfunction insertLinks(actor, links) {\n  if (actor.links == null) {\n    actor.links = links;\n  } else {\n    for (let key in links) {\n      actor.links[key] = links[key];\n    }\n  }\n}\n\nexport const addProperties = function (actorId, text) {\n  // find the actor\n  const actor = getActor(actorId);\n  // JSON.parse the text\n  try {\n    let sanitizedText = sanitizeText(text.text, configApi.getConfig());\n    const properties = JSON.parse(sanitizedText);\n    // add the deserialized text to the actor's property field.\n    insertProperties(actor, properties);\n  } catch (e) {\n    log.error('error while parsing actor properties text', e);\n  }\n};\n\n/**\n * @param {any} actor\n * @param {any} properties\n */\nfunction insertProperties(actor, properties) {\n  if (actor.properties == null) {\n    actor.properties = properties;\n  } else {\n    for (let key in properties) {\n      actor.properties[key] = properties[key];\n    }\n  }\n}\n\n/**\n *\n */\nfunction boxEnd() {\n  currentBox = undefined;\n}\n\nexport const addDetails = function (actorId, text) {\n  // find the actor\n  const actor = getActor(actorId);\n  const elem = document.getElementById(text.text);\n\n  // JSON.parse the text\n  try {\n    const text = elem.innerHTML;\n    const details = JSON.parse(text);\n    // add the deserialized text to the actor's property field.\n    if (details['properties']) {\n      insertProperties(actor, details['properties']);\n    }\n\n    if (details['links']) {\n      insertLinks(actor, details['links']);\n    }\n  } catch (e) {\n    log.error('error while parsing actor details text', e);\n  }\n};\n\nexport const getActorProperty = function (actor, key) {\n  if (actor !== undefined && actor.properties !== undefined) {\n    return actor.properties[key];\n  }\n\n  return undefined;\n};\n\nexport const apply = function (param) {\n  if (Array.isArray(param)) {\n    param.forEach(function (item) {\n      apply(item);\n    });\n  } else {\n    switch (param.type) {\n      case 'sequenceIndex':\n        messages.push({\n          from: undefined,\n          to: undefined,\n          message: {\n            start: param.sequenceIndex,\n            step: param.sequenceIndexStep,\n            visible: param.sequenceVisible,\n          },\n          wrap: false,\n          type: param.signalType,\n        });\n        break;\n      case 'addParticipant':\n        addActor(param.actor, param.actor, param.description, 'participant');\n        break;\n      case 'addActor':\n        addActor(param.actor, param.actor, param.description, 'actor');\n        break;\n      case 'activeStart':\n        addSignal(param.actor, undefined, undefined, param.signalType);\n        break;\n      case 'activeEnd':\n        addSignal(param.actor, undefined, undefined, param.signalType);\n        break;\n      case 'addNote':\n        addNote(param.actor, param.placement, param.text);\n        break;\n      case 'addLinks':\n        addLinks(param.actor, param.text);\n        break;\n      case 'addALink':\n        addALink(param.actor, param.text);\n        break;\n      case 'addProperties':\n        addProperties(param.actor, param.text);\n        break;\n      case 'addDetails':\n        addDetails(param.actor, param.text);\n        break;\n      case 'addMessage':\n        addSignal(param.from, param.to, param.msg, param.signalType);\n        break;\n      case 'boxStart':\n        addBox(param.boxData);\n        break;\n      case 'boxEnd':\n        boxEnd();\n        break;\n      case 'loopStart':\n        addSignal(undefined, undefined, param.loopText, param.signalType);\n        break;\n      case 'loopEnd':\n        addSignal(undefined, undefined, undefined, param.signalType);\n        break;\n      case 'rectStart':\n        addSignal(undefined, undefined, param.color, param.signalType);\n        break;\n      case 'rectEnd':\n        addSignal(undefined, undefined, undefined, param.signalType);\n        break;\n      case 'optStart':\n        addSignal(undefined, undefined, param.optText, param.signalType);\n        break;\n      case 'optEnd':\n        addSignal(undefined, undefined, undefined, param.signalType);\n        break;\n      case 'altStart':\n        addSignal(undefined, undefined, param.altText, param.signalType);\n        break;\n      case 'else':\n        addSignal(undefined, undefined, param.altText, param.signalType);\n        break;\n      case 'altEnd':\n        addSignal(undefined, undefined, undefined, param.signalType);\n        break;\n      case 'setAccTitle':\n        setAccTitle(param.text);\n        break;\n      case 'parStart':\n        addSignal(undefined, undefined, param.parText, param.signalType);\n        break;\n      case 'and':\n        addSignal(undefined, undefined, param.parText, param.signalType);\n        break;\n      case 'parEnd':\n        addSignal(undefined, undefined, undefined, param.signalType);\n        break;\n      case 'criticalStart':\n        addSignal(undefined, undefined, param.criticalText, param.signalType);\n        break;\n      case 'option':\n        addSignal(undefined, undefined, param.optionText, param.signalType);\n        break;\n      case 'criticalEnd':\n        addSignal(undefined, undefined, undefined, param.signalType);\n        break;\n      case 'breakStart':\n        addSignal(undefined, undefined, param.breakText, param.signalType);\n        break;\n      case 'breakEnd':\n        addSignal(undefined, undefined, undefined, param.signalType);\n        break;\n    }\n  }\n};\n\nexport default {\n  addActor,\n  addMessage,\n  addSignal,\n  addLinks,\n  addDetails,\n  addProperties,\n  autoWrap,\n  setWrap,\n  enableSequenceNumbers,\n  disableSequenceNumbers,\n  showSequenceNumbers,\n  getMessages,\n  getActors,\n  getActor,\n  getActorKeys,\n  getActorProperty,\n  getAccTitle,\n  getBoxes,\n  getDiagramTitle,\n  setDiagramTitle,\n  parseDirective,\n  getConfig: () => configApi.getConfig().sequence,\n  clear,\n  parseMessage,\n  parseBoxData,\n  LINETYPE,\n  ARROWTYPE,\n  PLACEMENT,\n  addNote,\n  setAccTitle,\n  apply,\n  setAccDescription,\n  getAccDescription,\n  hasAtLeastOneBox,\n  hasAtLeastOneBoxWithTitle,\n};\n","const getStyles = (options) =>\n  `.actor {\n    stroke: ${options.actorBorder};\n    fill: ${options.actorBkg};\n  }\n\n  text.actor > tspan {\n    fill: ${options.actorTextColor};\n    stroke: none;\n  }\n\n  .actor-line {\n    stroke: ${options.actorLineColor};\n  }\n\n  .messageLine0 {\n    stroke-width: 1.5;\n    stroke-dasharray: none;\n    stroke: ${options.signalColor};\n  }\n\n  .messageLine1 {\n    stroke-width: 1.5;\n    stroke-dasharray: 2, 2;\n    stroke: ${options.signalColor};\n  }\n\n  #arrowhead path {\n    fill: ${options.signalColor};\n    stroke: ${options.signalColor};\n  }\n\n  .sequenceNumber {\n    fill: ${options.sequenceNumberColor};\n  }\n\n  #sequencenumber {\n    fill: ${options.signalColor};\n  }\n\n  #crosshead path {\n    fill: ${options.signalColor};\n    stroke: ${options.signalColor};\n  }\n\n  .messageText {\n    fill: ${options.signalTextColor};\n    stroke: none;\n  }\n\n  .labelBox {\n    stroke: ${options.labelBoxBorderColor};\n    fill: ${options.labelBoxBkgColor};\n  }\n\n  .labelText, .labelText > tspan {\n    fill: ${options.labelTextColor};\n    stroke: none;\n  }\n\n  .loopText, .loopText > tspan {\n    fill: ${options.loopTextColor};\n    stroke: none;\n  }\n\n  .loopLine {\n    stroke-width: 2px;\n    stroke-dasharray: 2, 2;\n    stroke: ${options.labelBoxBorderColor};\n    fill: ${options.labelBoxBorderColor};\n  }\n\n  .note {\n    //stroke: #decc93;\n    stroke: ${options.noteBorderColor};\n    fill: ${options.noteBkgColor};\n  }\n\n  .noteText, .noteText > tspan {\n    fill: ${options.noteTextColor};\n    stroke: none;\n  }\n\n  .activation0 {\n    fill: ${options.activationBkgColor};\n    stroke: ${options.activationBorderColor};\n  }\n\n  .activation1 {\n    fill: ${options.activationBkgColor};\n    stroke: ${options.activationBorderColor};\n  }\n\n  .activation2 {\n    fill: ${options.activationBkgColor};\n    stroke: ${options.activationBorderColor};\n  }\n\n  .actorPopupMenu {\n    position: absolute;\n  }\n\n  .actorPopupMenuPanel {\n    position: absolute;\n    fill: ${options.actorBkg};\n    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n    filter: drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));\n}\n  .actor-man line {\n    stroke: ${options.actorBorder};\n    fill: ${options.actorBkg};\n  }\n  .actor-man circle, line {\n    stroke: ${options.actorBorder};\n    fill: ${options.actorBkg};\n    stroke-width: 2px;\n  }\n`;\n\nexport default getStyles;\n","import common from '../common/common';\nimport { addFunction } from '../../interactionDb';\nimport { parseFontSize } from '../../utils';\nimport { sanitizeUrl } from '@braintree/sanitize-url';\n\nexport const drawRect = function (elem, rectData) {\n  const rectElem = elem.append('rect');\n  rectElem.attr('x', rectData.x);\n  rectElem.attr('y', rectData.y);\n  rectElem.attr('fill', rectData.fill);\n  rectElem.attr('stroke', rectData.stroke);\n  rectElem.attr('width', rectData.width);\n  rectElem.attr('height', rectData.height);\n  rectElem.attr('rx', rectData.rx);\n  rectElem.attr('ry', rectData.ry);\n\n  if (rectData.class !== undefined) {\n    rectElem.attr('class', rectData.class);\n  }\n\n  return rectElem;\n};\n\n// const sanitizeUrl = function (s) {\n//   return s\n//     .replace(/&/g, '&amp;')\n//     .replace(/</g, '&lt;')\n//     .replace(/javascript:/g, '');\n// };\n\nconst addPopupInteraction = (id, actorCnt) => {\n  addFunction(() => {\n    const arr = document.querySelectorAll(id);\n    // This will be the case when running in sandboxed mode\n    if (arr.length === 0) {\n      return;\n    }\n    arr[0].addEventListener('mouseover', function () {\n      popupMenuUpFunc('actor' + actorCnt + '_popup');\n    });\n    arr[0].addEventListener('mouseout', function () {\n      popupMenuDownFunc('actor' + actorCnt + '_popup');\n    });\n  });\n};\nexport const drawPopup = function (elem, actor, minMenuWidth, textAttrs, forceMenus) {\n  if (actor.links === undefined || actor.links === null || Object.keys(actor.links).length === 0) {\n    return { height: 0, width: 0 };\n  }\n\n  const links = actor.links;\n  const actorCnt = actor.actorCnt;\n  const rectData = actor.rectData;\n\n  var displayValue = 'none';\n  if (forceMenus) {\n    displayValue = 'block !important';\n  }\n\n  const g = elem.append('g');\n  g.attr('id', 'actor' + actorCnt + '_popup');\n  g.attr('class', 'actorPopupMenu');\n  g.attr('display', displayValue);\n  addPopupInteraction('#actor' + actorCnt + '_popup', actorCnt);\n  var actorClass = '';\n  if (rectData.class !== undefined) {\n    actorClass = ' ' + rectData.class;\n  }\n\n  let menuWidth = rectData.width > minMenuWidth ? rectData.width : minMenuWidth;\n\n  const rectElem = g.append('rect');\n  rectElem.attr('class', 'actorPopupMenuPanel' + actorClass);\n  rectElem.attr('x', rectData.x);\n  rectElem.attr('y', rectData.height);\n  rectElem.attr('fill', rectData.fill);\n  rectElem.attr('stroke', rectData.stroke);\n  rectElem.attr('width', menuWidth);\n  rectElem.attr('height', rectData.height);\n  rectElem.attr('rx', rectData.rx);\n  rectElem.attr('ry', rectData.ry);\n  if (links != null) {\n    var linkY = 20;\n    for (let key in links) {\n      var linkElem = g.append('a');\n      var sanitizedLink = sanitizeUrl(links[key]);\n      linkElem.attr('xlink:href', sanitizedLink);\n      linkElem.attr('target', '_blank');\n\n      _drawMenuItemTextCandidateFunc(textAttrs)(\n        key,\n        linkElem,\n        rectData.x + 10,\n        rectData.height + linkY,\n        menuWidth,\n        20,\n        { class: 'actor' },\n        textAttrs\n      );\n\n      linkY += 30;\n    }\n  }\n\n  rectElem.attr('height', linkY);\n\n  return { height: rectData.height + linkY, width: menuWidth };\n};\n\nexport const drawImage = function (elem, x, y, link) {\n  const imageElem = elem.append('image');\n  imageElem.attr('x', x);\n  imageElem.attr('y', y);\n  var sanitizedLink = sanitizeUrl(link);\n  imageElem.attr('xlink:href', sanitizedLink);\n};\n\nexport const drawEmbeddedImage = function (elem, x, y, link) {\n  const imageElem = elem.append('use');\n  imageElem.attr('x', x);\n  imageElem.attr('y', y);\n  var sanitizedLink = sanitizeUrl(link);\n  imageElem.attr('xlink:href', '#' + sanitizedLink);\n};\n\nexport const popupMenu = function (popid) {\n  return (\n    \"var pu = document.getElementById('\" +\n    popid +\n    \"'); if (pu != null) { pu.style.display = 'block'; }\"\n  );\n};\n\nexport const popdownMenu = function (popid) {\n  return (\n    \"var pu = document.getElementById('\" +\n    popid +\n    \"'); if (pu != null) { pu.style.display = 'none'; }\"\n  );\n};\n\nconst popupMenuUpFunc = function (popupId) {\n  var pu = document.getElementById(popupId);\n  if (pu != null) {\n    pu.style.display = 'block';\n  }\n};\n\nconst popupMenuDownFunc = function (popupId) {\n  var pu = document.getElementById(popupId);\n  if (pu != null) {\n    pu.style.display = 'none';\n  }\n};\nexport const drawText = function (elem, textData) {\n  let prevTextHeight = 0,\n    textHeight = 0;\n  const lines = textData.text.split(common.lineBreakRegex);\n\n  const [_textFontSize, _textFontSizePx] = parseFontSize(textData.fontSize);\n\n  let textElems = [];\n  let dy = 0;\n  let yfunc = () => textData.y;\n  if (\n    textData.valign !== undefined &&\n    textData.textMargin !== undefined &&\n    textData.textMargin > 0\n  ) {\n    switch (textData.valign) {\n      case 'top':\n      case 'start':\n        yfunc = () => Math.round(textData.y + textData.textMargin);\n        break;\n      case 'middle':\n      case 'center':\n        yfunc = () =>\n          Math.round(textData.y + (prevTextHeight + textHeight + textData.textMargin) / 2);\n        break;\n      case 'bottom':\n      case 'end':\n        yfunc = () =>\n          Math.round(\n            textData.y +\n              (prevTextHeight + textHeight + 2 * textData.textMargin) -\n              textData.textMargin\n          );\n        break;\n    }\n  }\n  if (\n    textData.anchor !== undefined &&\n    textData.textMargin !== undefined &&\n    textData.width !== undefined\n  ) {\n    switch (textData.anchor) {\n      case 'left':\n      case 'start':\n        textData.x = Math.round(textData.x + textData.textMargin);\n        textData.anchor = 'start';\n        textData.dominantBaseline = 'middle';\n        textData.alignmentBaseline = 'middle';\n        break;\n      case 'middle':\n      case 'center':\n        textData.x = Math.round(textData.x + textData.width / 2);\n        textData.anchor = 'middle';\n        textData.dominantBaseline = 'middle';\n        textData.alignmentBaseline = 'middle';\n        break;\n      case 'right':\n      case 'end':\n        textData.x = Math.round(textData.x + textData.width - textData.textMargin);\n        textData.anchor = 'end';\n        textData.dominantBaseline = 'middle';\n        textData.alignmentBaseline = 'middle';\n        break;\n    }\n  }\n  for (let [i, line] of lines.entries()) {\n    if (\n      textData.textMargin !== undefined &&\n      textData.textMargin === 0 &&\n      _textFontSize !== undefined\n    ) {\n      dy = i * _textFontSize;\n    }\n\n    const textElem = elem.append('text');\n    textElem.attr('x', textData.x);\n    textElem.attr('y', yfunc());\n    if (textData.anchor !== undefined) {\n      textElem\n        .attr('text-anchor', textData.anchor)\n        .attr('dominant-baseline', textData.dominantBaseline)\n        .attr('alignment-baseline', textData.alignmentBaseline);\n    }\n    if (textData.fontFamily !== undefined) {\n      textElem.style('font-family', textData.fontFamily);\n    }\n    if (_textFontSizePx !== undefined) {\n      textElem.style('font-size', _textFontSizePx);\n    }\n    if (textData.fontWeight !== undefined) {\n      textElem.style('font-weight', textData.fontWeight);\n    }\n    if (textData.fill !== undefined) {\n      textElem.attr('fill', textData.fill);\n    }\n    if (textData.class !== undefined) {\n      textElem.attr('class', textData.class);\n    }\n    if (textData.dy !== undefined) {\n      textElem.attr('dy', textData.dy);\n    } else if (dy !== 0) {\n      textElem.attr('dy', dy);\n    }\n\n    if (textData.tspan) {\n      const span = textElem.append('tspan');\n      span.attr('x', textData.x);\n      if (textData.fill !== undefined) {\n        span.attr('fill', textData.fill);\n      }\n      span.text(line);\n    } else {\n      textElem.text(line);\n    }\n    if (\n      textData.valign !== undefined &&\n      textData.textMargin !== undefined &&\n      textData.textMargin > 0\n    ) {\n      textHeight += (textElem._groups || textElem)[0][0].getBBox().height;\n      prevTextHeight = textHeight;\n    }\n\n    textElems.push(textElem);\n  }\n\n  return textElems;\n};\n\nexport const drawLabel = function (elem, txtObject) {\n  /**\n   * @param {any} x\n   * @param {any} y\n   * @param {any} width\n   * @param {any} height\n   * @param {any} cut\n   * @returns {any}\n   */\n  function genPoints(x, y, width, height, cut) {\n    return (\n      x +\n      ',' +\n      y +\n      ' ' +\n      (x + width) +\n      ',' +\n      y +\n      ' ' +\n      (x + width) +\n      ',' +\n      (y + height - cut) +\n      ' ' +\n      (x + width - cut * 1.2) +\n      ',' +\n      (y + height) +\n      ' ' +\n      x +\n      ',' +\n      (y + height)\n    );\n  }\n  const polygon = elem.append('polygon');\n  polygon.attr('points', genPoints(txtObject.x, txtObject.y, txtObject.width, txtObject.height, 7));\n  polygon.attr('class', 'labelBox');\n\n  txtObject.y = txtObject.y + txtObject.height / 2;\n\n  drawText(elem, txtObject);\n  return polygon;\n};\n\nlet actorCnt = -1;\n\nexport const fixLifeLineHeights = (diagram, bounds) => {\n  if (!diagram.selectAll) {\n    return;\n  }\n  diagram\n    .selectAll('.actor-line')\n    .attr('class', '200')\n    .attr('y2', bounds - 55);\n};\n\n/**\n * Draws an actor in the diagram with the attached line\n *\n * @param {any} elem - The diagram we'll draw to.\n * @param {any} actor - The actor to draw.\n * @param {any} conf - DrawText implementation discriminator object\n * @param {boolean} isFooter - If the actor is the footer one\n */\nconst drawActorTypeParticipant = function (elem, actor, conf, isFooter) {\n  const center = actor.x + actor.width / 2;\n  const centerY = actor.y + 5;\n\n  const boxpluslineGroup = elem.append('g');\n  var g = boxpluslineGroup;\n\n  if (!isFooter) {\n    actorCnt++;\n    g.append('line')\n      .attr('id', 'actor' + actorCnt)\n      .attr('x1', center)\n      .attr('y1', centerY)\n      .attr('x2', center)\n      .attr('y2', 2000)\n      .attr('class', 'actor-line')\n      .attr('stroke-width', '0.5px')\n      .attr('stroke', '#999');\n\n    g = boxpluslineGroup.append('g');\n    actor.actorCnt = actorCnt;\n\n    if (actor.links != null) {\n      g.attr('id', 'root-' + actorCnt);\n      addPopupInteraction('#root-' + actorCnt, actorCnt);\n    }\n  }\n\n  const rect = getNoteRect();\n  var cssclass = 'actor';\n  if (actor.properties != null && actor.properties['class']) {\n    cssclass = actor.properties['class'];\n  } else {\n    rect.fill = '#eaeaea';\n  }\n  rect.x = actor.x;\n  rect.y = actor.y;\n  rect.width = actor.width;\n  rect.height = actor.height;\n  rect.class = cssclass;\n  rect.rx = 3;\n  rect.ry = 3;\n  const rectElem = drawRect(g, rect);\n  actor.rectData = rect;\n\n  if (actor.properties != null && actor.properties['icon']) {\n    const iconSrc = actor.properties['icon'].trim();\n    if (iconSrc.charAt(0) === '@') {\n      drawEmbeddedImage(g, rect.x + rect.width - 20, rect.y + 10, iconSrc.substr(1));\n    } else {\n      drawImage(g, rect.x + rect.width - 20, rect.y + 10, iconSrc);\n    }\n  }\n\n  _drawTextCandidateFunc(conf)(\n    actor.description,\n    g,\n    rect.x,\n    rect.y,\n    rect.width,\n    rect.height,\n    { class: 'actor' },\n    conf\n  );\n\n  let height = actor.height;\n  if (rectElem.node) {\n    const bounds = rectElem.node().getBBox();\n    actor.height = bounds.height;\n    height = bounds.height;\n  }\n\n  return height;\n};\n\nconst drawActorTypeActor = function (elem, actor, conf, isFooter) {\n  const center = actor.x + actor.width / 2;\n  const centerY = actor.y + 80;\n\n  if (!isFooter) {\n    actorCnt++;\n    elem\n      .append('line')\n      .attr('id', 'actor' + actorCnt)\n      .attr('x1', center)\n      .attr('y1', centerY)\n      .attr('x2', center)\n      .attr('y2', 2000)\n      .attr('class', 'actor-line')\n      .attr('stroke-width', '0.5px')\n      .attr('stroke', '#999');\n  }\n  const actElem = elem.append('g');\n  actElem.attr('class', 'actor-man');\n\n  const rect = getNoteRect();\n  rect.x = actor.x;\n  rect.y = actor.y;\n  rect.fill = '#eaeaea';\n  rect.width = actor.width;\n  rect.height = actor.height;\n  rect.class = 'actor';\n  rect.rx = 3;\n  rect.ry = 3;\n  // drawRect(actElem, rect);\n\n  actElem\n    .append('line')\n    .attr('id', 'actor-man-torso' + actorCnt)\n    .attr('x1', center)\n    .attr('y1', actor.y + 25)\n    .attr('x2', center)\n    .attr('y2', actor.y + 45);\n\n  actElem\n    .append('line')\n    .attr('id', 'actor-man-arms' + actorCnt)\n    .attr('x1', center - 18)\n    .attr('y1', actor.y + 33)\n    .attr('x2', center + 18)\n    .attr('y2', actor.y + 33);\n  actElem\n    .append('line')\n    .attr('x1', center - 18)\n    .attr('y1', actor.y + 60)\n    .attr('x2', center)\n    .attr('y2', actor.y + 45);\n  actElem\n    .append('line')\n    .attr('x1', center)\n    .attr('y1', actor.y + 45)\n    .attr('x2', center + 16)\n    .attr('y2', actor.y + 60);\n\n  const circle = actElem.append('circle');\n  circle.attr('cx', actor.x + actor.width / 2);\n  circle.attr('cy', actor.y + 10);\n  circle.attr('r', 15);\n  circle.attr('width', actor.width);\n  circle.attr('height', actor.height);\n\n  const bounds = actElem.node().getBBox();\n  actor.height = bounds.height;\n\n  _drawTextCandidateFunc(conf)(\n    actor.description,\n    actElem,\n    rect.x,\n    rect.y + 35,\n    rect.width,\n    rect.height,\n    { class: 'actor' },\n    conf\n  );\n\n  return actor.height;\n};\n\nexport const drawActor = function (elem, actor, conf, isFooter) {\n  switch (actor.type) {\n    case 'actor':\n      return drawActorTypeActor(elem, actor, conf, isFooter);\n    case 'participant':\n      return drawActorTypeParticipant(elem, actor, conf, isFooter);\n  }\n};\n\nexport const drawBox = function (elem, box, conf) {\n  const boxplustextGroup = elem.append('g');\n  const g = boxplustextGroup;\n  drawBackgroundRect(g, box);\n  if (box.name) {\n    _drawTextCandidateFunc(conf)(\n      box.name,\n      g,\n      box.x,\n      box.y + (box.textMaxHeight || 0) / 2,\n      box.width,\n      0,\n      { class: 'text' },\n      conf\n    );\n  }\n  g.lower();\n};\n\nexport const anchorElement = function (elem) {\n  return elem.append('g');\n};\n/**\n * Draws an activation in the diagram\n *\n * @param {any} elem - Element to append activation rect.\n * @param {any} bounds - Activation box bounds.\n * @param {any} verticalPos - Precise y coordinate of bottom activation box edge.\n * @param {any} conf - Sequence diagram config object.\n * @param {any} actorActivations - Number of activations on the actor.\n */\nexport const drawActivation = function (elem, bounds, verticalPos, conf, actorActivations) {\n  const rect = getNoteRect();\n  const g = bounds.anchored;\n  rect.x = bounds.startx;\n  rect.y = bounds.starty;\n  rect.class = 'activation' + (actorActivations % 3); // Will evaluate to 0, 1 or 2\n  rect.width = bounds.stopx - bounds.startx;\n  rect.height = verticalPos - bounds.starty;\n  drawRect(g, rect);\n};\n\n/**\n * Draws a loop in the diagram\n *\n * @param {any} elem - Element to append the loop to.\n * @param {any} loopModel - LoopModel of the given loop.\n * @param {any} labelText - Text within the loop.\n * @param {any} conf - Diagram configuration\n * @returns {any}\n */\nexport const drawLoop = function (elem, loopModel, labelText, conf) {\n  const {\n    boxMargin,\n    boxTextMargin,\n    labelBoxHeight,\n    labelBoxWidth,\n    messageFontFamily: fontFamily,\n    messageFontSize: fontSize,\n    messageFontWeight: fontWeight,\n  } = conf;\n  const g = elem.append('g');\n  const drawLoopLine = function (startx, starty, stopx, stopy) {\n    return g\n      .append('line')\n      .attr('x1', startx)\n      .attr('y1', starty)\n      .attr('x2', stopx)\n      .attr('y2', stopy)\n      .attr('class', 'loopLine');\n  };\n  drawLoopLine(loopModel.startx, loopModel.starty, loopModel.stopx, loopModel.starty);\n  drawLoopLine(loopModel.stopx, loopModel.starty, loopModel.stopx, loopModel.stopy);\n  drawLoopLine(loopModel.startx, loopModel.stopy, loopModel.stopx, loopModel.stopy);\n  drawLoopLine(loopModel.startx, loopModel.starty, loopModel.startx, loopModel.stopy);\n  if (loopModel.sections !== undefined) {\n    loopModel.sections.forEach(function (item) {\n      drawLoopLine(loopModel.startx, item.y, loopModel.stopx, item.y).style(\n        'stroke-dasharray',\n        '3, 3'\n      );\n    });\n  }\n\n  let txt = getTextObj();\n  txt.text = labelText;\n  txt.x = loopModel.startx;\n  txt.y = loopModel.starty;\n  txt.fontFamily = fontFamily;\n  txt.fontSize = fontSize;\n  txt.fontWeight = fontWeight;\n  txt.anchor = 'middle';\n  txt.valign = 'middle';\n  txt.tspan = false;\n  txt.width = labelBoxWidth || 50;\n  txt.height = labelBoxHeight || 20;\n  txt.textMargin = boxTextMargin;\n  txt.class = 'labelText';\n\n  drawLabel(g, txt);\n  txt = getTextObj();\n  txt.text = loopModel.title;\n  txt.x = loopModel.startx + labelBoxWidth / 2 + (loopModel.stopx - loopModel.startx) / 2;\n  txt.y = loopModel.starty + boxMargin + boxTextMargin;\n  txt.anchor = 'middle';\n  txt.valign = 'middle';\n  txt.textMargin = boxTextMargin;\n  txt.class = 'loopText';\n  txt.fontFamily = fontFamily;\n  txt.fontSize = fontSize;\n  txt.fontWeight = fontWeight;\n  txt.wrap = true;\n\n  let textElem = drawText(g, txt);\n\n  if (loopModel.sectionTitles !== undefined) {\n    loopModel.sectionTitles.forEach(function (item, idx) {\n      if (item.message) {\n        txt.text = item.message;\n        txt.x = loopModel.startx + (loopModel.stopx - loopModel.startx) / 2;\n        txt.y = loopModel.sections[idx].y + boxMargin + boxTextMargin;\n        txt.class = 'loopText';\n        txt.anchor = 'middle';\n        txt.valign = 'middle';\n        txt.tspan = false;\n        txt.fontFamily = fontFamily;\n        txt.fontSize = fontSize;\n        txt.fontWeight = fontWeight;\n        txt.wrap = loopModel.wrap;\n        textElem = drawText(g, txt);\n        let sectionHeight = Math.round(\n          textElem\n            .map((te) => (te._groups || te)[0][0].getBBox().height)\n            .reduce((acc, curr) => acc + curr)\n        );\n        loopModel.sections[idx].height += sectionHeight - (boxMargin + boxTextMargin);\n      }\n    });\n  }\n\n  loopModel.height = Math.round(loopModel.stopy - loopModel.starty);\n  return g;\n};\n\n/**\n * Draws a background rectangle\n *\n * @param {any} elem Diagram (reference for bounds)\n * @param {any} bounds Shape of the rectangle\n */\nexport const drawBackgroundRect = function (elem, bounds) {\n  const rectElem = drawRect(elem, {\n    x: bounds.startx,\n    y: bounds.starty,\n    width: bounds.stopx - bounds.startx,\n    height: bounds.stopy - bounds.starty,\n    fill: bounds.fill,\n    stroke: bounds.stroke,\n    class: 'rect',\n  });\n  rectElem.lower();\n};\n\nexport const insertDatabaseIcon = function (elem) {\n  elem\n    .append('defs')\n    .append('symbol')\n    .attr('id', 'database')\n    .attr('fill-rule', 'evenodd')\n    .attr('clip-rule', 'evenodd')\n    .append('path')\n    .attr('transform', 'scale(.5)')\n    .attr(\n      'd',\n      'M12.258.001l.256.004.255.005.253.008.251.01.249.012.247.015.246.016.242.019.241.02.239.023.236.024.233.027.231.028.229.031.225.032.223.034.22.036.217.038.214.04.211.041.208.043.205.045.201.046.198.048.194.05.191.051.187.053.183.054.18.056.175.057.172.059.168.06.163.061.16.063.155.064.15.066.074.033.073.033.071.034.07.034.069.035.068.035.067.035.066.035.064.036.064.036.062.036.06.036.06.037.058.037.058.037.055.038.055.038.053.038.052.038.051.039.05.039.048.039.047.039.045.04.044.04.043.04.041.04.04.041.039.041.037.041.036.041.034.041.033.042.032.042.03.042.029.042.027.042.026.043.024.043.023.043.021.043.02.043.018.044.017.043.015.044.013.044.012.044.011.045.009.044.007.045.006.045.004.045.002.045.001.045v17l-.001.045-.002.045-.004.045-.006.045-.007.045-.009.044-.011.045-.012.044-.013.044-.015.044-.017.043-.018.044-.02.043-.021.043-.023.043-.024.043-.026.043-.027.042-.029.042-.03.042-.032.042-.033.042-.034.041-.036.041-.037.041-.039.041-.04.041-.041.04-.043.04-.044.04-.045.04-.047.039-.048.039-.05.039-.051.039-.052.038-.053.038-.055.038-.055.038-.058.037-.058.037-.06.037-.06.036-.062.036-.064.036-.064.036-.066.035-.067.035-.068.035-.069.035-.07.034-.071.034-.073.033-.074.033-.15.066-.155.064-.16.063-.163.061-.168.06-.172.059-.175.057-.18.056-.183.054-.187.053-.191.051-.194.05-.198.048-.201.046-.205.045-.208.043-.211.041-.214.04-.217.038-.22.036-.223.034-.225.032-.229.031-.231.028-.233.027-.236.024-.239.023-.241.02-.242.019-.246.016-.247.015-.249.012-.251.01-.253.008-.255.005-.256.004-.258.001-.258-.001-.256-.004-.255-.005-.253-.008-.251-.01-.249-.012-.247-.015-.245-.016-.243-.019-.241-.02-.238-.023-.236-.024-.234-.027-.231-.028-.228-.031-.226-.032-.223-.034-.22-.036-.217-.038-.214-.04-.211-.041-.208-.043-.204-.045-.201-.046-.198-.048-.195-.05-.19-.051-.187-.053-.184-.054-.179-.056-.176-.057-.172-.059-.167-.06-.164-.061-.159-.063-.155-.064-.151-.066-.074-.033-.072-.033-.072-.034-.07-.034-.069-.035-.068-.035-.067-.035-.066-.035-.064-.036-.063-.036-.062-.036-.061-.036-.06-.037-.058-.037-.057-.037-.056-.038-.055-.038-.053-.038-.052-.038-.051-.039-.049-.039-.049-.039-.046-.039-.046-.04-.044-.04-.043-.04-.041-.04-.04-.041-.039-.041-.037-.041-.036-.041-.034-.041-.033-.042-.032-.042-.03-.042-.029-.042-.027-.042-.026-.043-.024-.043-.023-.043-.021-.043-.02-.043-.018-.044-.017-.043-.015-.044-.013-.044-.012-.044-.011-.045-.009-.044-.007-.045-.006-.045-.004-.045-.002-.045-.001-.045v-17l.001-.045.002-.045.004-.045.006-.045.007-.045.009-.044.011-.045.012-.044.013-.044.015-.044.017-.043.018-.044.02-.043.021-.043.023-.043.024-.043.026-.043.027-.042.029-.042.03-.042.032-.042.033-.042.034-.041.036-.041.037-.041.039-.041.04-.041.041-.04.043-.04.044-.04.046-.04.046-.039.049-.039.049-.039.051-.039.052-.038.053-.038.055-.038.056-.038.057-.037.058-.037.06-.037.061-.036.062-.036.063-.036.064-.036.066-.035.067-.035.068-.035.069-.035.07-.034.072-.034.072-.033.074-.033.151-.066.155-.064.159-.063.164-.061.167-.06.172-.059.176-.057.179-.056.184-.054.187-.053.19-.051.195-.05.198-.048.201-.046.204-.045.208-.043.211-.041.214-.04.217-.038.22-.036.223-.034.226-.032.228-.031.231-.028.234-.027.236-.024.238-.023.241-.02.243-.019.245-.016.247-.015.249-.012.251-.01.253-.008.255-.005.256-.004.258-.001.258.001zm-9.258 20.499v.01l.001.021.003.021.004.022.005.021.006.022.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.023.018.024.019.024.021.024.022.025.023.024.024.025.052.049.056.05.061.051.066.051.07.051.075.051.079.052.084.052.088.052.092.052.097.052.102.051.105.052.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.048.144.049.147.047.152.047.155.047.16.045.163.045.167.043.171.043.176.041.178.041.183.039.187.039.19.037.194.035.197.035.202.033.204.031.209.03.212.029.216.027.219.025.222.024.226.021.23.02.233.018.236.016.24.015.243.012.246.01.249.008.253.005.256.004.259.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.021.224-.024.22-.026.216-.027.212-.028.21-.031.205-.031.202-.034.198-.034.194-.036.191-.037.187-.039.183-.04.179-.04.175-.042.172-.043.168-.044.163-.045.16-.046.155-.046.152-.047.148-.048.143-.049.139-.049.136-.05.131-.05.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.053.083-.051.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.05.023-.024.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.023.01-.022.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.127l-.077.055-.08.053-.083.054-.085.053-.087.052-.09.052-.093.051-.095.05-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.045-.118.044-.12.043-.122.042-.124.042-.126.041-.128.04-.13.04-.132.038-.134.038-.135.037-.138.037-.139.035-.142.035-.143.034-.144.033-.147.032-.148.031-.15.03-.151.03-.153.029-.154.027-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.01-.179.008-.179.008-.181.006-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.006-.179-.008-.179-.008-.178-.01-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.027-.153-.029-.151-.03-.15-.03-.148-.031-.146-.032-.145-.033-.143-.034-.141-.035-.14-.035-.137-.037-.136-.037-.134-.038-.132-.038-.13-.04-.128-.04-.126-.041-.124-.042-.122-.042-.12-.044-.117-.043-.116-.045-.113-.045-.112-.046-.109-.047-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.05-.093-.052-.09-.051-.087-.052-.085-.053-.083-.054-.08-.054-.077-.054v4.127zm0-5.654v.011l.001.021.003.021.004.021.005.022.006.022.007.022.009.022.01.022.011.023.012.023.013.023.015.024.016.023.017.024.018.024.019.024.021.024.022.024.023.025.024.024.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.052.11.051.114.051.119.052.123.05.127.051.131.05.135.049.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.044.171.042.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.022.23.02.233.018.236.016.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.012.241-.015.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.048.139-.05.136-.049.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.051.051-.049.023-.025.023-.024.021-.025.02-.024.019-.024.018-.024.017-.024.015-.023.014-.023.013-.024.012-.022.01-.023.01-.023.008-.022.006-.022.006-.022.004-.021.004-.022.001-.021.001-.021v-4.139l-.077.054-.08.054-.083.054-.085.052-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.044-.118.044-.12.044-.122.042-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.035-.143.033-.144.033-.147.033-.148.031-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.009-.179.009-.179.007-.181.007-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.007-.179-.007-.179-.009-.178-.009-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.031-.146-.033-.145-.033-.143-.033-.141-.035-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.04-.126-.041-.124-.042-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.051-.093-.051-.09-.051-.087-.053-.085-.052-.083-.054-.08-.054-.077-.054v4.139zm0-5.666v.011l.001.02.003.022.004.021.005.022.006.021.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.024.018.023.019.024.021.025.022.024.023.024.024.025.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.051.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.043.171.043.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.021.23.02.233.018.236.017.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.013.241-.014.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.049.139-.049.136-.049.131-.051.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.049.023-.025.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.022.01-.023.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.153l-.077.054-.08.054-.083.053-.085.053-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.048-.105.048-.106.048-.109.046-.111.046-.114.046-.115.044-.118.044-.12.043-.122.043-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.034-.143.034-.144.033-.147.032-.148.032-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.024-.161.024-.162.023-.163.023-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.01-.178.01-.179.009-.179.007-.181.006-.182.006-.182.004-.184.003-.184.001-.185.001-.185-.001-.184-.001-.184-.003-.182-.004-.182-.006-.181-.006-.179-.007-.179-.009-.178-.01-.176-.01-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.023-.162-.023-.161-.024-.159-.024-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.032-.146-.032-.145-.033-.143-.034-.141-.034-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.041-.126-.041-.124-.041-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.048-.105-.048-.102-.048-.1-.05-.097-.049-.095-.051-.093-.051-.09-.052-.087-.052-.085-.053-.083-.053-.08-.054-.077-.054v4.153zm8.74-8.179l-.257.004-.254.005-.25.008-.247.011-.244.012-.241.014-.237.016-.233.018-.231.021-.226.022-.224.023-.22.026-.216.027-.212.028-.21.031-.205.032-.202.033-.198.034-.194.036-.191.038-.187.038-.183.04-.179.041-.175.042-.172.043-.168.043-.163.045-.16.046-.155.046-.152.048-.148.048-.143.048-.139.049-.136.05-.131.05-.126.051-.123.051-.118.051-.114.052-.11.052-.106.052-.101.052-.096.052-.092.052-.088.052-.083.052-.079.052-.074.051-.07.052-.065.051-.06.05-.056.05-.051.05-.023.025-.023.024-.021.024-.02.025-.019.024-.018.024-.017.023-.015.024-.014.023-.013.023-.012.023-.01.023-.01.022-.008.022-.006.023-.006.021-.004.022-.004.021-.001.021-.001.021.001.021.001.021.004.021.004.022.006.021.006.023.008.022.01.022.01.023.012.023.013.023.014.023.015.024.017.023.018.024.019.024.02.025.021.024.023.024.023.025.051.05.056.05.06.05.065.051.07.052.074.051.079.052.083.052.088.052.092.052.096.052.101.052.106.052.11.052.114.052.118.051.123.051.126.051.131.05.136.05.139.049.143.048.148.048.152.048.155.046.16.046.163.045.168.043.172.043.175.042.179.041.183.04.187.038.191.038.194.036.198.034.202.033.205.032.21.031.212.028.216.027.22.026.224.023.226.022.231.021.233.018.237.016.241.014.244.012.247.011.25.008.254.005.257.004.26.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.022.224-.023.22-.026.216-.027.212-.028.21-.031.205-.032.202-.033.198-.034.194-.036.191-.038.187-.038.183-.04.179-.041.175-.042.172-.043.168-.043.163-.045.16-.046.155-.046.152-.048.148-.048.143-.048.139-.049.136-.05.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.05.051-.05.023-.025.023-.024.021-.024.02-.025.019-.024.018-.024.017-.023.015-.024.014-.023.013-.023.012-.023.01-.023.01-.022.008-.022.006-.023.006-.021.004-.022.004-.021.001-.021.001-.021-.001-.021-.001-.021-.004-.021-.004-.022-.006-.021-.006-.023-.008-.022-.01-.022-.01-.023-.012-.023-.013-.023-.014-.023-.015-.024-.017-.023-.018-.024-.019-.024-.02-.025-.021-.024-.023-.024-.023-.025-.051-.05-.056-.05-.06-.05-.065-.051-.07-.052-.074-.051-.079-.052-.083-.052-.088-.052-.092-.052-.096-.052-.101-.052-.106-.052-.11-.052-.114-.052-.118-.051-.123-.051-.126-.051-.131-.05-.136-.05-.139-.049-.143-.048-.148-.048-.152-.048-.155-.046-.16-.046-.163-.045-.168-.043-.172-.043-.175-.042-.179-.041-.183-.04-.187-.038-.191-.038-.194-.036-.198-.034-.202-.033-.205-.032-.21-.031-.212-.028-.216-.027-.22-.026-.224-.023-.226-.022-.231-.021-.233-.018-.237-.016-.241-.014-.244-.012-.247-.011-.25-.008-.254-.005-.257-.004-.26-.001-.26.001z'\n    );\n};\n\nexport const insertComputerIcon = function (elem) {\n  elem\n    .append('defs')\n    .append('symbol')\n    .attr('id', 'computer')\n    .attr('width', '24')\n    .attr('height', '24')\n    .append('path')\n    .attr('transform', 'scale(.5)')\n    .attr(\n      'd',\n      'M2 2v13h20v-13h-20zm18 11h-16v-9h16v9zm-10.228 6l.466-1h3.524l.467 1h-4.457zm14.228 3h-24l2-6h2.104l-1.33 4h18.45l-1.297-4h2.073l2 6zm-5-10h-14v-7h14v7z'\n    );\n};\n\nexport const insertClockIcon = function (elem) {\n  elem\n    .append('defs')\n    .append('symbol')\n    .attr('id', 'clock')\n    .attr('width', '24')\n    .attr('height', '24')\n    .append('path')\n    .attr('transform', 'scale(.5)')\n    .attr(\n      'd',\n      'M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm5.848 12.459c.202.038.202.333.001.372-1.907.361-6.045 1.111-6.547 1.111-.719 0-1.301-.582-1.301-1.301 0-.512.77-5.447 1.125-7.445.034-.192.312-.181.343.014l.985 6.238 5.394 1.011z'\n    );\n};\n\n/**\n * Setup arrow head and define the marker. The result is appended to the svg.\n *\n * @param elem\n */\nexport const insertArrowHead = function (elem) {\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('refX', 9)\n    .attr('refY', 5)\n    .attr('markerUnits', 'userSpaceOnUse')\n    .attr('markerWidth', 12)\n    .attr('markerHeight', 12)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z'); // this is actual shape for arrowhead\n};\n/**\n * Setup arrow head and define the marker. The result is appended to the svg.\n *\n * @param {any} elem\n */\nexport const insertArrowFilledHead = function (elem) {\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'filled-head')\n    .attr('refX', 18)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L14,7 L9,1 Z');\n};\n/**\n * Setup node number. The result is appended to the svg.\n *\n * @param {any} elem\n */\nexport const insertSequenceNumber = function (elem) {\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'sequencenumber')\n    .attr('refX', 15)\n    .attr('refY', 15)\n    .attr('markerWidth', 60)\n    .attr('markerHeight', 40)\n    .attr('orient', 'auto')\n    .append('circle')\n    .attr('cx', 15)\n    .attr('cy', 15)\n    .attr('r', 6);\n  // .style(\"fill\", '#f00');\n};\n/**\n * Setup cross head and define the marker. The result is appended to the svg.\n *\n * @param {any} elem\n */\nexport const insertArrowCrossHead = function (elem) {\n  const defs = elem.append('defs');\n  const marker = defs\n    .append('marker')\n    .attr('id', 'crosshead')\n    .attr('markerWidth', 15)\n    .attr('markerHeight', 8)\n    .attr('orient', 'auto')\n    .attr('refX', 4)\n    .attr('refY', 5);\n  // The cross\n  marker\n    .append('path')\n    .attr('fill', 'none')\n    .attr('stroke', '#000000')\n    .style('stroke-dasharray', '0, 0')\n    .attr('stroke-width', '1pt')\n    .attr('d', 'M 1,2 L 6,7 M 6,2 L 1,7');\n  // this is actual shape for arrowhead\n};\n\nexport const getTextObj = function () {\n  return {\n    x: 0,\n    y: 0,\n    fill: undefined,\n    anchor: undefined,\n    style: '#666',\n    width: undefined,\n    height: undefined,\n    textMargin: 0,\n    rx: 0,\n    ry: 0,\n    tspan: true,\n    valign: undefined,\n  };\n};\n\nexport const getNoteRect = function () {\n  return {\n    x: 0,\n    y: 0,\n    fill: '#EDF2AE',\n    stroke: '#666',\n    width: 100,\n    anchor: 'start',\n    height: 100,\n    rx: 0,\n    ry: 0,\n  };\n};\n\nconst _drawTextCandidateFunc = (function () {\n  /**\n   * @param {any} content\n   * @param {any} g\n   * @param {any} x\n   * @param {any} y\n   * @param {any} width\n   * @param {any} height\n   * @param {any} textAttrs\n   */\n  function byText(content, g, x, y, width, height, textAttrs) {\n    const text = g\n      .append('text')\n      .attr('x', x + width / 2)\n      .attr('y', y + height / 2 + 5)\n      .style('text-anchor', 'middle')\n      .text(content);\n    _setTextAttrs(text, textAttrs);\n  }\n\n  /**\n   * @param {any} content\n   * @param {any} g\n   * @param {any} x\n   * @param {any} y\n   * @param {any} width\n   * @param {any} height\n   * @param {any} textAttrs\n   * @param {any} conf\n   */\n  function byTspan(content, g, x, y, width, height, textAttrs, conf) {\n    const { actorFontSize, actorFontFamily, actorFontWeight } = conf;\n\n    const [_actorFontSize, _actorFontSizePx] = parseFontSize(actorFontSize);\n\n    const lines = content.split(common.lineBreakRegex);\n    for (let i = 0; i < lines.length; i++) {\n      const dy = i * _actorFontSize - (_actorFontSize * (lines.length - 1)) / 2;\n      const text = g\n        .append('text')\n        .attr('x', x + width / 2)\n        .attr('y', y)\n        .style('text-anchor', 'middle')\n        .style('font-size', _actorFontSizePx)\n        .style('font-weight', actorFontWeight)\n        .style('font-family', actorFontFamily);\n      text\n        .append('tspan')\n        .attr('x', x + width / 2)\n        .attr('dy', dy)\n        .text(lines[i]);\n\n      text\n        .attr('y', y + height / 2.0)\n        .attr('dominant-baseline', 'central')\n        .attr('alignment-baseline', 'central');\n\n      _setTextAttrs(text, textAttrs);\n    }\n  }\n\n  /**\n   * @param {any} content\n   * @param {any} g\n   * @param {any} x\n   * @param {any} y\n   * @param {any} width\n   * @param {any} height\n   * @param {any} textAttrs\n   * @param {any} conf\n   */\n  function byFo(content, g, x, y, width, height, textAttrs, conf) {\n    const s = g.append('switch');\n    const f = s\n      .append('foreignObject')\n      .attr('x', x)\n      .attr('y', y)\n      .attr('width', width)\n      .attr('height', height);\n\n    const text = f\n      .append('xhtml:div')\n      .style('display', 'table')\n      .style('height', '100%')\n      .style('width', '100%');\n\n    text\n      .append('div')\n      .style('display', 'table-cell')\n      .style('text-align', 'center')\n      .style('vertical-align', 'middle')\n      .text(content);\n\n    byTspan(content, s, x, y, width, height, textAttrs, conf);\n    _setTextAttrs(text, textAttrs);\n  }\n\n  /**\n   * @param {any} toText\n   * @param {any} fromTextAttrsDict\n   */\n  function _setTextAttrs(toText, fromTextAttrsDict) {\n    for (const key in fromTextAttrsDict) {\n      if (fromTextAttrsDict.hasOwnProperty(key)) {\n        toText.attr(key, fromTextAttrsDict[key]);\n      }\n    }\n  }\n\n  return function (conf) {\n    return conf.textPlacement === 'fo' ? byFo : conf.textPlacement === 'old' ? byText : byTspan;\n  };\n})();\n\nconst _drawMenuItemTextCandidateFunc = (function () {\n  /**\n   * @param {any} content\n   * @param {any} g\n   * @param {any} x\n   * @param {any} y\n   * @param {any} width\n   * @param {any} height\n   * @param {any} textAttrs\n   */\n  function byText(content, g, x, y, width, height, textAttrs) {\n    const text = g\n      .append('text')\n      .attr('x', x)\n      .attr('y', y)\n      .style('text-anchor', 'start')\n      .text(content);\n    _setTextAttrs(text, textAttrs);\n  }\n\n  /**\n   * @param {any} content\n   * @param {any} g\n   * @param {any} x\n   * @param {any} y\n   * @param {any} width\n   * @param {any} height\n   * @param {any} textAttrs\n   * @param {any} conf\n   */\n  function byTspan(content, g, x, y, width, height, textAttrs, conf) {\n    const { actorFontSize, actorFontFamily, actorFontWeight } = conf;\n\n    const lines = content.split(common.lineBreakRegex);\n    for (let i = 0; i < lines.length; i++) {\n      const dy = i * actorFontSize - (actorFontSize * (lines.length - 1)) / 2;\n      const text = g\n        .append('text')\n        .attr('x', x)\n        .attr('y', y)\n        .style('text-anchor', 'start')\n        .style('font-size', actorFontSize)\n        .style('font-weight', actorFontWeight)\n        .style('font-family', actorFontFamily);\n      text.append('tspan').attr('x', x).attr('dy', dy).text(lines[i]);\n\n      text\n        .attr('y', y + height / 2.0)\n        .attr('dominant-baseline', 'central')\n        .attr('alignment-baseline', 'central');\n\n      _setTextAttrs(text, textAttrs);\n    }\n  }\n\n  /**\n   * @param {any} content\n   * @param {any} g\n   * @param {any} x\n   * @param {any} y\n   * @param {any} width\n   * @param {any} height\n   * @param {any} textAttrs\n   * @param {any} conf\n   */\n  function byFo(content, g, x, y, width, height, textAttrs, conf) {\n    const s = g.append('switch');\n    const f = s\n      .append('foreignObject')\n      .attr('x', x)\n      .attr('y', y)\n      .attr('width', width)\n      .attr('height', height);\n\n    const text = f\n      .append('xhtml:div')\n      .style('display', 'table')\n      .style('height', '100%')\n      .style('width', '100%');\n\n    text\n      .append('div')\n      .style('display', 'table-cell')\n      .style('text-align', 'center')\n      .style('vertical-align', 'middle')\n      .text(content);\n\n    byTspan(content, s, x, y, width, height, textAttrs, conf);\n    _setTextAttrs(text, textAttrs);\n  }\n\n  /**\n   * @param {any} toText\n   * @param {any} fromTextAttrsDict\n   */\n  function _setTextAttrs(toText, fromTextAttrsDict) {\n    for (const key in fromTextAttrsDict) {\n      if (fromTextAttrsDict.hasOwnProperty(key)) {\n        toText.attr(key, fromTextAttrsDict[key]);\n      }\n    }\n  }\n\n  return function (conf) {\n    return conf.textPlacement === 'fo' ? byFo : conf.textPlacement === 'old' ? byText : byTspan;\n  };\n})();\n\nexport default {\n  drawRect,\n  drawText,\n  drawLabel,\n  drawActor,\n  drawBox,\n  drawPopup,\n  drawImage,\n  drawEmbeddedImage,\n  anchorElement,\n  drawActivation,\n  drawLoop,\n  drawBackgroundRect,\n  insertArrowHead,\n  insertArrowFilledHead,\n  insertSequenceNumber,\n  insertArrowCrossHead,\n  insertDatabaseIcon,\n  insertComputerIcon,\n  insertClockIcon,\n  getTextObj,\n  getNoteRect,\n  popupMenu,\n  popdownMenu,\n  fixLifeLineHeights,\n  sanitizeUrl,\n};\n","// @ts-nocheck TODO: fix file\nimport { select, selectAll } from 'd3';\nimport svgDraw, { drawText, fixLifeLineHeights } from './svgDraw';\nimport { log } from '../../logger';\nimport common from '../common/common';\nimport * as configApi from '../../config';\nimport assignWithDepth from '../../assignWithDepth';\nimport utils from '../../utils';\nimport { configureSvgSize } from '../../setupGraphViewbox';\nimport { Diagram } from '../../Diagram';\n\nlet conf = {};\n\nexport const bounds = {\n  data: {\n    startx: undefined,\n    stopx: undefined,\n    starty: undefined,\n    stopy: undefined,\n  },\n  verticalPos: 0,\n  sequenceItems: [],\n  activations: [],\n  models: {\n    getHeight: function () {\n      return (\n        Math.max.apply(\n          null,\n          this.actors.length === 0 ? [0] : this.actors.map((actor) => actor.height || 0)\n        ) +\n        (this.loops.length === 0\n          ? 0\n          : this.loops.map((it) => it.height || 0).reduce((acc, h) => acc + h)) +\n        (this.messages.length === 0\n          ? 0\n          : this.messages.map((it) => it.height || 0).reduce((acc, h) => acc + h)) +\n        (this.notes.length === 0\n          ? 0\n          : this.notes.map((it) => it.height || 0).reduce((acc, h) => acc + h))\n      );\n    },\n    clear: function () {\n      this.actors = [];\n      this.boxes = [];\n      this.loops = [];\n      this.messages = [];\n      this.notes = [];\n    },\n    addBox: function (boxModel) {\n      this.boxes.push(boxModel);\n    },\n    addActor: function (actorModel) {\n      this.actors.push(actorModel);\n    },\n    addLoop: function (loopModel) {\n      this.loops.push(loopModel);\n    },\n    addMessage: function (msgModel) {\n      this.messages.push(msgModel);\n    },\n    addNote: function (noteModel) {\n      this.notes.push(noteModel);\n    },\n    lastActor: function () {\n      return this.actors[this.actors.length - 1];\n    },\n    lastLoop: function () {\n      return this.loops[this.loops.length - 1];\n    },\n    lastMessage: function () {\n      return this.messages[this.messages.length - 1];\n    },\n    lastNote: function () {\n      return this.notes[this.notes.length - 1];\n    },\n    actors: [],\n    boxes: [],\n    loops: [],\n    messages: [],\n    notes: [],\n  },\n  init: function () {\n    this.sequenceItems = [];\n    this.activations = [];\n    this.models.clear();\n    this.data = {\n      startx: undefined,\n      stopx: undefined,\n      starty: undefined,\n      stopy: undefined,\n    };\n    this.verticalPos = 0;\n    setConf(configApi.getConfig());\n  },\n  updateVal: function (obj, key, val, fun) {\n    if (obj[key] === undefined) {\n      obj[key] = val;\n    } else {\n      obj[key] = fun(val, obj[key]);\n    }\n  },\n  updateBounds: function (startx, starty, stopx, stopy) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const _self = this;\n    let cnt = 0;\n    /** @param type - Either `activation` or `undefined` */\n    function updateFn(type?: 'activation') {\n      return function updateItemBounds(item) {\n        cnt++;\n        // The loop sequenceItems is a stack so the biggest margins in the beginning of the sequenceItems\n        const n = _self.sequenceItems.length - cnt + 1;\n\n        _self.updateVal(item, 'starty', starty - n * conf.boxMargin, Math.min);\n        _self.updateVal(item, 'stopy', stopy + n * conf.boxMargin, Math.max);\n\n        _self.updateVal(bounds.data, 'startx', startx - n * conf.boxMargin, Math.min);\n        _self.updateVal(bounds.data, 'stopx', stopx + n * conf.boxMargin, Math.max);\n\n        if (!(type === 'activation')) {\n          _self.updateVal(item, 'startx', startx - n * conf.boxMargin, Math.min);\n          _self.updateVal(item, 'stopx', stopx + n * conf.boxMargin, Math.max);\n\n          _self.updateVal(bounds.data, 'starty', starty - n * conf.boxMargin, Math.min);\n          _self.updateVal(bounds.data, 'stopy', stopy + n * conf.boxMargin, Math.max);\n        }\n      };\n    }\n\n    this.sequenceItems.forEach(updateFn());\n    this.activations.forEach(updateFn('activation'));\n  },\n  insert: function (startx, starty, stopx, stopy) {\n    const _startx = Math.min(startx, stopx);\n    const _stopx = Math.max(startx, stopx);\n    const _starty = Math.min(starty, stopy);\n    const _stopy = Math.max(starty, stopy);\n\n    this.updateVal(bounds.data, 'startx', _startx, Math.min);\n    this.updateVal(bounds.data, 'starty', _starty, Math.min);\n    this.updateVal(bounds.data, 'stopx', _stopx, Math.max);\n    this.updateVal(bounds.data, 'stopy', _stopy, Math.max);\n\n    this.updateBounds(_startx, _starty, _stopx, _stopy);\n  },\n  newActivation: function (message, diagram, actors) {\n    const actorRect = actors[message.from.actor];\n    const stackedSize = actorActivations(message.from.actor).length || 0;\n    const x = actorRect.x + actorRect.width / 2 + ((stackedSize - 1) * conf.activationWidth) / 2;\n    this.activations.push({\n      startx: x,\n      starty: this.verticalPos + 2,\n      stopx: x + conf.activationWidth,\n      stopy: undefined,\n      actor: message.from.actor,\n      anchored: svgDraw.anchorElement(diagram),\n    });\n  },\n  endActivation: function (message) {\n    // find most recent activation for given actor\n    const lastActorActivationIdx = this.activations\n      .map(function (activation) {\n        return activation.actor;\n      })\n      .lastIndexOf(message.from.actor);\n    return this.activations.splice(lastActorActivationIdx, 1)[0];\n  },\n  createLoop: function (title = { message: undefined, wrap: false, width: undefined }, fill) {\n    return {\n      startx: undefined,\n      starty: this.verticalPos,\n      stopx: undefined,\n      stopy: undefined,\n      title: title.message,\n      wrap: title.wrap,\n      width: title.width,\n      height: 0,\n      fill: fill,\n    };\n  },\n  newLoop: function (title = { message: undefined, wrap: false, width: undefined }, fill) {\n    this.sequenceItems.push(this.createLoop(title, fill));\n  },\n  endLoop: function () {\n    return this.sequenceItems.pop();\n  },\n  addSectionToLoop: function (message) {\n    const loop = this.sequenceItems.pop();\n    loop.sections = loop.sections || [];\n    loop.sectionTitles = loop.sectionTitles || [];\n    loop.sections.push({ y: bounds.getVerticalPos(), height: 0 });\n    loop.sectionTitles.push(message);\n    this.sequenceItems.push(loop);\n  },\n  bumpVerticalPos: function (bump) {\n    this.verticalPos = this.verticalPos + bump;\n    this.data.stopy = this.verticalPos;\n  },\n  getVerticalPos: function () {\n    return this.verticalPos;\n  },\n  getBounds: function () {\n    return { bounds: this.data, models: this.models };\n  },\n};\n\n/** Options for drawing a note in {@link drawNote} */\ninterface NoteModel {\n  /** x axis start position */\n  startx: number;\n  /** y axis position */\n  starty: number;\n  /** the message to be shown */\n  message: string;\n  /** Set this with a custom width to override the default configured width. */\n  width: number;\n}\n\n/**\n * Draws an note in the diagram with the attached line\n *\n * @param elem - The diagram to draw to.\n * @param noteModel - Note model options.\n */\nconst drawNote = function (elem: any, noteModel: NoteModel) {\n  bounds.bumpVerticalPos(conf.boxMargin);\n  noteModel.height = conf.boxMargin;\n  noteModel.starty = bounds.getVerticalPos();\n  const rect = svgDraw.getNoteRect();\n  rect.x = noteModel.startx;\n  rect.y = noteModel.starty;\n  rect.width = noteModel.width || conf.width;\n  rect.class = 'note';\n\n  const g = elem.append('g');\n  const rectElem = svgDraw.drawRect(g, rect);\n  const textObj = svgDraw.getTextObj();\n  textObj.x = noteModel.startx;\n  textObj.y = noteModel.starty;\n  textObj.width = rect.width;\n  textObj.dy = '1em';\n  textObj.text = noteModel.message;\n  textObj.class = 'noteText';\n  textObj.fontFamily = conf.noteFontFamily;\n  textObj.fontSize = conf.noteFontSize;\n  textObj.fontWeight = conf.noteFontWeight;\n  textObj.anchor = conf.noteAlign;\n  textObj.textMargin = conf.noteMargin;\n  textObj.valign = 'center';\n\n  const textElem = drawText(g, textObj);\n\n  const textHeight = Math.round(\n    textElem\n      .map((te) => (te._groups || te)[0][0].getBBox().height)\n      .reduce((acc, curr) => acc + curr)\n  );\n\n  rectElem.attr('height', textHeight + 2 * conf.noteMargin);\n  noteModel.height += textHeight + 2 * conf.noteMargin;\n  bounds.bumpVerticalPos(textHeight + 2 * conf.noteMargin);\n  noteModel.stopy = noteModel.starty + textHeight + 2 * conf.noteMargin;\n  noteModel.stopx = noteModel.startx + rect.width;\n  bounds.insert(noteModel.startx, noteModel.starty, noteModel.stopx, noteModel.stopy);\n  bounds.models.addNote(noteModel);\n};\n\nconst messageFont = (cnf) => {\n  return {\n    fontFamily: cnf.messageFontFamily,\n    fontSize: cnf.messageFontSize,\n    fontWeight: cnf.messageFontWeight,\n  };\n};\nconst noteFont = (cnf) => {\n  return {\n    fontFamily: cnf.noteFontFamily,\n    fontSize: cnf.noteFontSize,\n    fontWeight: cnf.noteFontWeight,\n  };\n};\nconst actorFont = (cnf) => {\n  return {\n    fontFamily: cnf.actorFontFamily,\n    fontSize: cnf.actorFontSize,\n    fontWeight: cnf.actorFontWeight,\n  };\n};\n\n/**\n * Process a message by adding its dimensions to the bound. It returns the Y coordinate of the\n * message so it can be drawn later. We do not draw the message at this point so the arrowhead can\n * be on top of the activation box.\n *\n * @param _diagram - The parent of the message element.\n * @param msgModel - The model containing fields describing a message\n * @returns `lineStartY` - The Y coordinate at which the message line starts\n */\nfunction boundMessage(_diagram, msgModel): number {\n  bounds.bumpVerticalPos(10);\n  const { startx, stopx, message } = msgModel;\n  const lines = common.splitBreaks(message).length;\n  const textDims = utils.calculateTextDimensions(message, messageFont(conf));\n  const lineHeight = textDims.height / lines;\n  msgModel.height += lineHeight;\n\n  bounds.bumpVerticalPos(lineHeight);\n\n  let lineStartY;\n  let totalOffset = textDims.height - 10;\n  const textWidth = textDims.width;\n\n  if (startx === stopx) {\n    lineStartY = bounds.getVerticalPos() + totalOffset;\n    if (!conf.rightAngles) {\n      totalOffset += conf.boxMargin;\n      lineStartY = bounds.getVerticalPos() + totalOffset;\n    }\n    totalOffset += 30;\n    const dx = Math.max(textWidth / 2, conf.width / 2);\n    bounds.insert(\n      startx - dx,\n      bounds.getVerticalPos() - 10 + totalOffset,\n      stopx + dx,\n      bounds.getVerticalPos() + 30 + totalOffset\n    );\n  } else {\n    totalOffset += conf.boxMargin;\n    lineStartY = bounds.getVerticalPos() + totalOffset;\n    bounds.insert(startx, lineStartY - 10, stopx, lineStartY);\n  }\n  bounds.bumpVerticalPos(totalOffset);\n  msgModel.height += totalOffset;\n  msgModel.stopy = msgModel.starty + msgModel.height;\n  bounds.insert(msgModel.fromBounds, msgModel.starty, msgModel.toBounds, msgModel.stopy);\n\n  return lineStartY;\n}\n\n/**\n * Draws a message. Note that the bounds have previously been updated by boundMessage.\n *\n * @param diagram - The parent of the message element\n * @param msgModel - The model containing fields describing a message\n * @param lineStartY - The Y coordinate at which the message line starts\n * @param diagObj - The diagram object.\n */\nconst drawMessage = function (diagram, msgModel, lineStartY: number, diagObj: Diagram) {\n  const { startx, stopx, starty, message, type, sequenceIndex, sequenceVisible } = msgModel;\n  const textDims = utils.calculateTextDimensions(message, messageFont(conf));\n  const textObj = svgDraw.getTextObj();\n  textObj.x = startx;\n  textObj.y = starty + 10;\n  textObj.width = stopx - startx;\n  textObj.class = 'messageText';\n  textObj.dy = '1em';\n  textObj.text = message;\n  textObj.fontFamily = conf.messageFontFamily;\n  textObj.fontSize = conf.messageFontSize;\n  textObj.fontWeight = conf.messageFontWeight;\n  textObj.anchor = conf.messageAlign;\n  textObj.valign = 'center';\n  textObj.textMargin = conf.wrapPadding;\n  textObj.tspan = false;\n\n  drawText(diagram, textObj);\n\n  const textWidth = textDims.width;\n\n  let line;\n  if (startx === stopx) {\n    if (conf.rightAngles) {\n      line = diagram\n        .append('path')\n        .attr(\n          'd',\n          `M  ${startx},${lineStartY} H ${startx + Math.max(conf.width / 2, textWidth / 2)} V ${\n            lineStartY + 25\n          } H ${startx}`\n        );\n    } else {\n      line = diagram\n        .append('path')\n        .attr(\n          'd',\n          'M ' +\n            startx +\n            ',' +\n            lineStartY +\n            ' C ' +\n            (startx + 60) +\n            ',' +\n            (lineStartY - 10) +\n            ' ' +\n            (startx + 60) +\n            ',' +\n            (lineStartY + 30) +\n            ' ' +\n            startx +\n            ',' +\n            (lineStartY + 20)\n        );\n    }\n  } else {\n    line = diagram.append('line');\n    line.attr('x1', startx);\n    line.attr('y1', lineStartY);\n    line.attr('x2', stopx);\n    line.attr('y2', lineStartY);\n  }\n  // Make an SVG Container\n  // Draw the line\n  if (\n    type === diagObj.db.LINETYPE.DOTTED ||\n    type === diagObj.db.LINETYPE.DOTTED_CROSS ||\n    type === diagObj.db.LINETYPE.DOTTED_POINT ||\n    type === diagObj.db.LINETYPE.DOTTED_OPEN\n  ) {\n    line.style('stroke-dasharray', '3, 3');\n    line.attr('class', 'messageLine1');\n  } else {\n    line.attr('class', 'messageLine0');\n  }\n\n  let url = '';\n  if (conf.arrowMarkerAbsolute) {\n    url =\n      window.location.protocol +\n      '//' +\n      window.location.host +\n      window.location.pathname +\n      window.location.search;\n    url = url.replace(/\\(/g, '\\\\(');\n    url = url.replace(/\\)/g, '\\\\)');\n  }\n\n  line.attr('stroke-width', 2);\n  line.attr('stroke', 'none'); // handled by theme/css anyway\n  line.style('fill', 'none'); // remove any fill colour\n  if (type === diagObj.db.LINETYPE.SOLID || type === diagObj.db.LINETYPE.DOTTED) {\n    line.attr('marker-end', 'url(' + url + '#arrowhead)');\n  }\n  if (type === diagObj.db.LINETYPE.SOLID_POINT || type === diagObj.db.LINETYPE.DOTTED_POINT) {\n    line.attr('marker-end', 'url(' + url + '#filled-head)');\n  }\n\n  if (type === diagObj.db.LINETYPE.SOLID_CROSS || type === diagObj.db.LINETYPE.DOTTED_CROSS) {\n    line.attr('marker-end', 'url(' + url + '#crosshead)');\n  }\n\n  // add node number\n  if (sequenceVisible || conf.showSequenceNumbers) {\n    line.attr('marker-start', 'url(' + url + '#sequencenumber)');\n    diagram\n      .append('text')\n      .attr('x', startx)\n      .attr('y', lineStartY + 4)\n      .attr('font-family', 'sans-serif')\n      .attr('font-size', '12px')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'sequenceNumber')\n      .text(sequenceIndex);\n  }\n};\n\nexport const drawActors = function (\n  diagram,\n  actors,\n  actorKeys,\n  verticalPos,\n  configuration,\n  messages,\n  isFooter\n) {\n  if (configuration.hideUnusedParticipants === true) {\n    const newActors = new Set();\n    messages.forEach((message) => {\n      newActors.add(message.from);\n      newActors.add(message.to);\n    });\n    actorKeys = actorKeys.filter((actorKey) => newActors.has(actorKey));\n  }\n\n  // Draw the actors\n  let prevWidth = 0;\n  let prevMargin = 0;\n  let maxHeight = 0;\n  let prevBox = undefined;\n\n  for (const actorKey of actorKeys) {\n    const actor = actors[actorKey];\n    const box = actor.box;\n\n    // end of box\n    if (prevBox && prevBox != box) {\n      if (!isFooter) {\n        bounds.models.addBox(prevBox);\n      }\n      prevMargin += conf.boxMargin + prevBox.margin;\n    }\n\n    // new box\n    if (box && box != prevBox) {\n      if (!isFooter) {\n        box.x = prevWidth + prevMargin;\n        box.y = verticalPos;\n      }\n      prevMargin += box.margin;\n    }\n\n    // Add some rendering data to the object\n    actor.width = actor.width || conf.width;\n    actor.height = Math.max(actor.height || conf.height, conf.height);\n    actor.margin = actor.margin || conf.actorMargin;\n\n    actor.x = prevWidth + prevMargin;\n    actor.y = bounds.getVerticalPos();\n\n    // Draw the box with the attached line\n    const height = svgDraw.drawActor(diagram, actor, conf, isFooter);\n    maxHeight = Math.max(maxHeight, height);\n    bounds.insert(actor.x, verticalPos, actor.x + actor.width, actor.height);\n\n    prevWidth += actor.width + prevMargin;\n    if (actor.box) {\n      actor.box.width = prevWidth + box.margin - actor.box.x;\n    }\n    prevMargin = actor.margin;\n    prevBox = actor.box;\n    bounds.models.addActor(actor);\n  }\n\n  // end of box\n  if (prevBox && !isFooter) {\n    bounds.models.addBox(prevBox);\n  }\n\n  // Add a margin between the actor boxes and the first arrow\n  bounds.bumpVerticalPos(maxHeight);\n};\n\nexport const drawActorsPopup = function (diagram, actors, actorKeys, doc) {\n  let maxHeight = 0;\n  let maxWidth = 0;\n  for (const actorKey of actorKeys) {\n    const actor = actors[actorKey];\n    const minMenuWidth = getRequiredPopupWidth(actor);\n    const menuDimensions = svgDraw.drawPopup(\n      diagram,\n      actor,\n      minMenuWidth,\n      conf,\n      conf.forceMenus,\n      doc\n    );\n    if (menuDimensions.height > maxHeight) {\n      maxHeight = menuDimensions.height;\n    }\n    if (menuDimensions.width + actor.x > maxWidth) {\n      maxWidth = menuDimensions.width + actor.x;\n    }\n  }\n\n  return { maxHeight: maxHeight, maxWidth: maxWidth };\n};\n\nexport const setConf = function (cnf) {\n  assignWithDepth(conf, cnf);\n\n  if (cnf.fontFamily) {\n    conf.actorFontFamily = conf.noteFontFamily = conf.messageFontFamily = cnf.fontFamily;\n  }\n  if (cnf.fontSize) {\n    conf.actorFontSize = conf.noteFontSize = conf.messageFontSize = cnf.fontSize;\n  }\n  if (cnf.fontWeight) {\n    conf.actorFontWeight = conf.noteFontWeight = conf.messageFontWeight = cnf.fontWeight;\n  }\n};\n\nconst actorActivations = function (actor) {\n  return bounds.activations.filter(function (activation) {\n    return activation.actor === actor;\n  });\n};\n\nconst activationBounds = function (actor, actors) {\n  // handle multiple stacked activations for same actor\n  const actorObj = actors[actor];\n  const activations = actorActivations(actor);\n\n  const left = activations.reduce(function (acc, activation) {\n    return Math.min(acc, activation.startx);\n  }, actorObj.x + actorObj.width / 2);\n  const right = activations.reduce(function (acc, activation) {\n    return Math.max(acc, activation.stopx);\n  }, actorObj.x + actorObj.width / 2);\n  return [left, right];\n};\n\nfunction adjustLoopHeightForWrap(loopWidths, msg, preMargin, postMargin, addLoopFn) {\n  bounds.bumpVerticalPos(preMargin);\n  let heightAdjust = postMargin;\n  if (msg.id && msg.message && loopWidths[msg.id]) {\n    const loopWidth = loopWidths[msg.id].width;\n    const textConf = messageFont(conf);\n    msg.message = utils.wrapLabel(`[${msg.message}]`, loopWidth - 2 * conf.wrapPadding, textConf);\n    msg.width = loopWidth;\n    msg.wrap = true;\n\n    // const lines = common.splitBreaks(msg.message).length;\n    const textDims = utils.calculateTextDimensions(msg.message, textConf);\n    const totalOffset = Math.max(textDims.height, conf.labelBoxHeight);\n    heightAdjust = postMargin + totalOffset;\n    log.debug(`${totalOffset} - ${msg.message}`);\n  }\n  addLoopFn(msg);\n  bounds.bumpVerticalPos(heightAdjust);\n}\n\n/**\n * Draws a sequenceDiagram in the tag with id: id based on the graph definition in text.\n *\n * @param _text - The text of the diagram\n * @param id - The id of the diagram which will be used as a DOM element id¨\n * @param _version - Mermaid version from package.json\n * @param diagObj - A standard diagram containing the db and the text and type etc of the diagram\n */\nexport const draw = function (_text: string, id: string, _version: string, diagObj: Diagram) {\n  const { securityLevel, sequence } = configApi.getConfig();\n  conf = sequence;\n  diagObj.db.clear();\n  // Parse the graph definition\n  diagObj.parser.parse(_text);\n  // Handle root and Document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n  bounds.init();\n  log.debug(diagObj.db);\n\n  const diagram =\n    securityLevel === 'sandbox' ? root.select(`[id=\"${id}\"]`) : select(`[id=\"${id}\"]`);\n\n  // Fetch data from the parsing\n  const actors = diagObj.db.getActors();\n  const boxes = diagObj.db.getBoxes();\n  const actorKeys = diagObj.db.getActorKeys();\n  const messages = diagObj.db.getMessages();\n  const title = diagObj.db.getDiagramTitle();\n  const hasBoxes = diagObj.db.hasAtLeastOneBox();\n  const hasBoxTitles = diagObj.db.hasAtLeastOneBoxWithTitle();\n  const maxMessageWidthPerActor = getMaxMessageWidthPerActor(actors, messages, diagObj);\n  conf.height = calculateActorMargins(actors, maxMessageWidthPerActor, boxes);\n\n  svgDraw.insertComputerIcon(diagram);\n  svgDraw.insertDatabaseIcon(diagram);\n  svgDraw.insertClockIcon(diagram);\n\n  if (hasBoxes) {\n    bounds.bumpVerticalPos(conf.boxMargin);\n    if (hasBoxTitles) {\n      bounds.bumpVerticalPos(boxes[0].textMaxHeight);\n    }\n  }\n\n  drawActors(diagram, actors, actorKeys, 0, conf, messages, false);\n  const loopWidths = calculateLoopBounds(messages, actors, maxMessageWidthPerActor, diagObj);\n\n  // The arrow head definition is attached to the svg once\n  svgDraw.insertArrowHead(diagram);\n  svgDraw.insertArrowCrossHead(diagram);\n  svgDraw.insertArrowFilledHead(diagram);\n  svgDraw.insertSequenceNumber(diagram);\n\n  /**\n   * @param msg - The message to draw.\n   * @param verticalPos - The vertical position of the message.\n   */\n  function activeEnd(msg: any, verticalPos: number) {\n    const activationData = bounds.endActivation(msg);\n    if (activationData.starty + 18 > verticalPos) {\n      activationData.starty = verticalPos - 6;\n      verticalPos += 12;\n    }\n    svgDraw.drawActivation(\n      diagram,\n      activationData,\n      verticalPos,\n      conf,\n      actorActivations(msg.from.actor).length\n    );\n\n    bounds.insert(activationData.startx, verticalPos - 10, activationData.stopx, verticalPos);\n  }\n\n  // Draw the messages/signals\n  let sequenceIndex = 1;\n  let sequenceIndexStep = 1;\n  const messagesToDraw = [];\n  messages.forEach(function (msg) {\n    let loopModel, noteModel, msgModel;\n\n    switch (msg.type) {\n      case diagObj.db.LINETYPE.NOTE:\n        noteModel = msg.noteModel;\n        drawNote(diagram, noteModel);\n        break;\n      case diagObj.db.LINETYPE.ACTIVE_START:\n        bounds.newActivation(msg, diagram, actors);\n        break;\n      case diagObj.db.LINETYPE.ACTIVE_END:\n        activeEnd(msg, bounds.getVerticalPos());\n        break;\n      case diagObj.db.LINETYPE.LOOP_START:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin,\n          conf.boxMargin + conf.boxTextMargin,\n          (message) => bounds.newLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.LOOP_END:\n        loopModel = bounds.endLoop();\n        svgDraw.drawLoop(diagram, loopModel, 'loop', conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.RECT_START:\n        adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin, conf.boxMargin, (message) =>\n          bounds.newLoop(undefined, message.message)\n        );\n        break;\n      case diagObj.db.LINETYPE.RECT_END:\n        loopModel = bounds.endLoop();\n        svgDraw.drawBackgroundRect(diagram, loopModel);\n        bounds.models.addLoop(loopModel);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        break;\n      case diagObj.db.LINETYPE.OPT_START:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin,\n          conf.boxMargin + conf.boxTextMargin,\n          (message) => bounds.newLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.OPT_END:\n        loopModel = bounds.endLoop();\n        svgDraw.drawLoop(diagram, loopModel, 'opt', conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.ALT_START:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin,\n          conf.boxMargin + conf.boxTextMargin,\n          (message) => bounds.newLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.ALT_ELSE:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin + conf.boxTextMargin,\n          conf.boxMargin,\n          (message) => bounds.addSectionToLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.ALT_END:\n        loopModel = bounds.endLoop();\n        svgDraw.drawLoop(diagram, loopModel, 'alt', conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.PAR_START:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin,\n          conf.boxMargin + conf.boxTextMargin,\n          (message) => bounds.newLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.PAR_AND:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin + conf.boxTextMargin,\n          conf.boxMargin,\n          (message) => bounds.addSectionToLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.PAR_END:\n        loopModel = bounds.endLoop();\n        svgDraw.drawLoop(diagram, loopModel, 'par', conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.AUTONUMBER:\n        sequenceIndex = msg.message.start || sequenceIndex;\n        sequenceIndexStep = msg.message.step || sequenceIndexStep;\n        if (msg.message.visible) {\n          diagObj.db.enableSequenceNumbers();\n        } else {\n          diagObj.db.disableSequenceNumbers();\n        }\n        break;\n      case diagObj.db.LINETYPE.CRITICAL_START:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin,\n          conf.boxMargin + conf.boxTextMargin,\n          (message) => bounds.newLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.CRITICAL_OPTION:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin + conf.boxTextMargin,\n          conf.boxMargin,\n          (message) => bounds.addSectionToLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.CRITICAL_END:\n        loopModel = bounds.endLoop();\n        svgDraw.drawLoop(diagram, loopModel, 'critical', conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      case diagObj.db.LINETYPE.BREAK_START:\n        adjustLoopHeightForWrap(\n          loopWidths,\n          msg,\n          conf.boxMargin,\n          conf.boxMargin + conf.boxTextMargin,\n          (message) => bounds.newLoop(message)\n        );\n        break;\n      case diagObj.db.LINETYPE.BREAK_END:\n        loopModel = bounds.endLoop();\n        svgDraw.drawLoop(diagram, loopModel, 'break', conf);\n        bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());\n        bounds.models.addLoop(loopModel);\n        break;\n      default:\n        try {\n          // lastMsg = msg\n          msgModel = msg.msgModel;\n          msgModel.starty = bounds.getVerticalPos();\n          msgModel.sequenceIndex = sequenceIndex;\n          msgModel.sequenceVisible = diagObj.db.showSequenceNumbers();\n          const lineStartY = boundMessage(diagram, msgModel);\n          messagesToDraw.push({ messageModel: msgModel, lineStartY: lineStartY });\n          bounds.models.addMessage(msgModel);\n        } catch (e) {\n          log.error('error while drawing message', e);\n        }\n    }\n\n    // Increment sequence counter if msg.type is a line (and not another event like activation or note, etc)\n    if (\n      [\n        diagObj.db.LINETYPE.SOLID_OPEN,\n        diagObj.db.LINETYPE.DOTTED_OPEN,\n        diagObj.db.LINETYPE.SOLID,\n        diagObj.db.LINETYPE.DOTTED,\n        diagObj.db.LINETYPE.SOLID_CROSS,\n        diagObj.db.LINETYPE.DOTTED_CROSS,\n        diagObj.db.LINETYPE.SOLID_POINT,\n        diagObj.db.LINETYPE.DOTTED_POINT,\n      ].includes(msg.type)\n    ) {\n      sequenceIndex = sequenceIndex + sequenceIndexStep;\n    }\n  });\n\n  messagesToDraw.forEach((e) => drawMessage(diagram, e.messageModel, e.lineStartY, diagObj));\n\n  if (conf.mirrorActors) {\n    // Draw actors below diagram\n    bounds.bumpVerticalPos(conf.boxMargin * 2);\n    drawActors(diagram, actors, actorKeys, bounds.getVerticalPos(), conf, messages, true);\n    bounds.bumpVerticalPos(conf.boxMargin);\n    fixLifeLineHeights(diagram, bounds.getVerticalPos());\n  }\n\n  bounds.models.boxes.forEach(function (box) {\n    box.height = bounds.getVerticalPos() - box.y;\n    bounds.insert(box.x, box.y, box.x + box.width, box.height);\n    box.startx = box.x;\n    box.starty = box.y;\n    box.stopx = box.startx + box.width;\n    box.stopy = box.starty + box.height;\n    box.stroke = 'rgb(0,0,0, 0.5)';\n    svgDraw.drawBox(diagram, box, conf);\n  });\n\n  if (hasBoxes) {\n    bounds.bumpVerticalPos(conf.boxMargin);\n  }\n\n  // only draw popups for the top row of actors.\n  const requiredBoxSize = drawActorsPopup(diagram, actors, actorKeys, doc);\n\n  const { bounds: box } = bounds.getBounds();\n\n  // Adjust line height of actor lines now that the height of the diagram is known\n  log.debug('For line height fix Querying: #' + id + ' .actor-line');\n  const actorLines = selectAll('#' + id + ' .actor-line');\n  actorLines.attr('y2', box.stopy);\n\n  // Make sure the height of the diagram supports long menus.\n  let boxHeight = box.stopy - box.starty;\n  if (boxHeight < requiredBoxSize.maxHeight) {\n    boxHeight = requiredBoxSize.maxHeight;\n  }\n\n  let height = boxHeight + 2 * conf.diagramMarginY;\n  if (conf.mirrorActors) {\n    height = height - conf.boxMargin + conf.bottomMarginAdj;\n  }\n\n  // Make sure the width of the diagram supports wide menus.\n  let boxWidth = box.stopx - box.startx;\n  if (boxWidth < requiredBoxSize.maxWidth) {\n    boxWidth = requiredBoxSize.maxWidth;\n  }\n  const width = boxWidth + 2 * conf.diagramMarginX;\n\n  if (title) {\n    diagram\n      .append('text')\n      .text(title)\n      .attr('x', (box.stopx - box.startx) / 2 - 2 * conf.diagramMarginX)\n      .attr('y', -25);\n  }\n\n  configureSvgSize(diagram, height, width, conf.useMaxWidth);\n\n  const extraVertForTitle = title ? 40 : 0;\n  diagram.attr(\n    'viewBox',\n    box.startx -\n      conf.diagramMarginX +\n      ' -' +\n      (conf.diagramMarginY + extraVertForTitle) +\n      ' ' +\n      width +\n      ' ' +\n      (height + extraVertForTitle)\n  );\n\n  log.debug(`models:`, bounds.models);\n};\n\n/**\n * Retrieves the max message width of each actor, supports signals (messages, loops) and notes.\n *\n * It will enumerate each given message, and will determine its text width, in relation to the actor\n * it originates from, and destined to.\n *\n * @param actors - The actors map\n * @param messages - A list of message objects to iterate\n * @param diagObj - The diagram object.\n * @returns The max message width of each actor.\n */\nfunction getMaxMessageWidthPerActor(\n  actors: { [id: string]: any },\n  messages: any[],\n  diagObj: Diagram\n): { [id: string]: number } {\n  const maxMessageWidthPerActor = {};\n\n  messages.forEach(function (msg) {\n    if (actors[msg.to] && actors[msg.from]) {\n      const actor = actors[msg.to];\n\n      // If this is the first actor, and the message is left of it, no need to calculate the margin\n      if (msg.placement === diagObj.db.PLACEMENT.LEFTOF && !actor.prevActor) {\n        return;\n      }\n\n      // If this is the last actor, and the message is right of it, no need to calculate the margin\n      if (msg.placement === diagObj.db.PLACEMENT.RIGHTOF && !actor.nextActor) {\n        return;\n      }\n\n      const isNote = msg.placement !== undefined;\n      const isMessage = !isNote;\n\n      const textFont = isNote ? noteFont(conf) : messageFont(conf);\n      const wrappedMessage = msg.wrap\n        ? utils.wrapLabel(msg.message, conf.width - 2 * conf.wrapPadding, textFont)\n        : msg.message;\n      const messageDimensions = utils.calculateTextDimensions(wrappedMessage, textFont);\n      const messageWidth = messageDimensions.width + 2 * conf.wrapPadding;\n\n      /*\n       * The following scenarios should be supported:\n       *\n       * - There's a message (non-note) between fromActor and toActor\n       *   - If fromActor is on the right and toActor is on the left, we should\n       *     define the toActor's margin\n       *   - If fromActor is on the left and toActor is on the right, we should\n       *     define the fromActor's margin\n       * - There's a note, in which case fromActor == toActor\n       *   - If the note is to the left of the actor, we should define the previous actor\n       *     margin\n       *   - If the note is on the actor, we should define both the previous and next actor\n       *     margins, each being the half of the note size\n       *   - If the note is on the right of the actor, we should define the current actor\n       *     margin\n       */\n      if (isMessage && msg.from === actor.nextActor) {\n        maxMessageWidthPerActor[msg.to] = Math.max(\n          maxMessageWidthPerActor[msg.to] || 0,\n          messageWidth\n        );\n      } else if (isMessage && msg.from === actor.prevActor) {\n        maxMessageWidthPerActor[msg.from] = Math.max(\n          maxMessageWidthPerActor[msg.from] || 0,\n          messageWidth\n        );\n      } else if (isMessage && msg.from === msg.to) {\n        maxMessageWidthPerActor[msg.from] = Math.max(\n          maxMessageWidthPerActor[msg.from] || 0,\n          messageWidth / 2\n        );\n\n        maxMessageWidthPerActor[msg.to] = Math.max(\n          maxMessageWidthPerActor[msg.to] || 0,\n          messageWidth / 2\n        );\n      } else if (msg.placement === diagObj.db.PLACEMENT.RIGHTOF) {\n        maxMessageWidthPerActor[msg.from] = Math.max(\n          maxMessageWidthPerActor[msg.from] || 0,\n          messageWidth\n        );\n      } else if (msg.placement === diagObj.db.PLACEMENT.LEFTOF) {\n        maxMessageWidthPerActor[actor.prevActor] = Math.max(\n          maxMessageWidthPerActor[actor.prevActor] || 0,\n          messageWidth\n        );\n      } else if (msg.placement === diagObj.db.PLACEMENT.OVER) {\n        if (actor.prevActor) {\n          maxMessageWidthPerActor[actor.prevActor] = Math.max(\n            maxMessageWidthPerActor[actor.prevActor] || 0,\n            messageWidth / 2\n          );\n        }\n\n        if (actor.nextActor) {\n          maxMessageWidthPerActor[msg.from] = Math.max(\n            maxMessageWidthPerActor[msg.from] || 0,\n            messageWidth / 2\n          );\n        }\n      }\n    }\n  });\n\n  log.debug('maxMessageWidthPerActor:', maxMessageWidthPerActor);\n  return maxMessageWidthPerActor;\n}\n\nconst getRequiredPopupWidth = function (actor) {\n  let requiredPopupWidth = 0;\n  const textFont = actorFont(conf);\n  for (const key in actor.links) {\n    const labelDimensions = utils.calculateTextDimensions(key, textFont);\n    const labelWidth = labelDimensions.width + 2 * conf.wrapPadding + 2 * conf.boxMargin;\n    if (requiredPopupWidth < labelWidth) {\n      requiredPopupWidth = labelWidth;\n    }\n  }\n\n  return requiredPopupWidth;\n};\n\n/**\n * This will calculate the optimal margin for each given actor,\n * for a given actor → messageWidth map.\n *\n * An actor's margin is determined by the width of the actor, the width of the largest message that\n * originates from it, and the configured conf.actorMargin.\n *\n * @param actors - The actors map to calculate margins for\n * @param actorToMessageWidth - A map of actor key → max message width it holds\n * @param boxes - The boxes around the actors if any\n */\nfunction calculateActorMargins(\n  actors: { [id: string]: any },\n  actorToMessageWidth: ReturnType<typeof getMaxMessageWidthPerActor>,\n  boxes\n) {\n  let maxHeight = 0;\n  Object.keys(actors).forEach((prop) => {\n    const actor = actors[prop];\n    if (actor.wrap) {\n      actor.description = utils.wrapLabel(\n        actor.description,\n        conf.width - 2 * conf.wrapPadding,\n        actorFont(conf)\n      );\n    }\n    const actDims = utils.calculateTextDimensions(actor.description, actorFont(conf));\n    actor.width = actor.wrap\n      ? conf.width\n      : Math.max(conf.width, actDims.width + 2 * conf.wrapPadding);\n\n    actor.height = actor.wrap ? Math.max(actDims.height, conf.height) : conf.height;\n    maxHeight = Math.max(maxHeight, actor.height);\n  });\n\n  for (const actorKey in actorToMessageWidth) {\n    const actor = actors[actorKey];\n\n    if (!actor) {\n      continue;\n    }\n\n    const nextActor = actors[actor.nextActor];\n\n    // No need to space out an actor that doesn't have a next link\n    if (!nextActor) {\n      const messageWidth = actorToMessageWidth[actorKey];\n      const actorWidth = messageWidth + conf.actorMargin - actor.width / 2;\n      actor.margin = Math.max(actorWidth, conf.actorMargin);\n      continue;\n    }\n\n    const messageWidth = actorToMessageWidth[actorKey];\n    const actorWidth = messageWidth + conf.actorMargin - actor.width / 2 - nextActor.width / 2;\n\n    actor.margin = Math.max(actorWidth, conf.actorMargin);\n  }\n\n  let maxBoxHeight = 0;\n  boxes.forEach((box) => {\n    const textFont = messageFont(conf);\n    let totalWidth = box.actorKeys.reduce((total, aKey) => {\n      return (total += actors[aKey].width + (actors[aKey].margin || 0));\n    }, 0);\n\n    totalWidth -= 2 * conf.boxTextMargin;\n    if (box.wrap) {\n      box.name = utils.wrapLabel(box.name, totalWidth - 2 * conf.wrapPadding, textFont);\n    }\n\n    const boxMsgDimensions = utils.calculateTextDimensions(box.name, textFont);\n    maxBoxHeight = Math.max(boxMsgDimensions.height, maxBoxHeight);\n    const minWidth = Math.max(totalWidth, boxMsgDimensions.width + 2 * conf.wrapPadding);\n    box.margin = conf.boxTextMargin;\n    if (totalWidth < minWidth) {\n      const missing = (minWidth - totalWidth) / 2;\n      box.margin += missing;\n    }\n  });\n  boxes.forEach((box) => (box.textMaxHeight = maxBoxHeight));\n\n  return Math.max(maxHeight, conf.height);\n}\n\nconst buildNoteModel = function (msg, actors, diagObj) {\n  const startx = actors[msg.from].x;\n  const stopx = actors[msg.to].x;\n  const shouldWrap = msg.wrap && msg.message;\n\n  let textDimensions = utils.calculateTextDimensions(\n    shouldWrap ? utils.wrapLabel(msg.message, conf.width, noteFont(conf)) : msg.message,\n    noteFont(conf)\n  );\n  const noteModel = {\n    width: shouldWrap\n      ? conf.width\n      : Math.max(conf.width, textDimensions.width + 2 * conf.noteMargin),\n    height: 0,\n    startx: actors[msg.from].x,\n    stopx: 0,\n    starty: 0,\n    stopy: 0,\n    message: msg.message,\n  };\n  if (msg.placement === diagObj.db.PLACEMENT.RIGHTOF) {\n    noteModel.width = shouldWrap\n      ? Math.max(conf.width, textDimensions.width)\n      : Math.max(\n          actors[msg.from].width / 2 + actors[msg.to].width / 2,\n          textDimensions.width + 2 * conf.noteMargin\n        );\n    noteModel.startx = startx + (actors[msg.from].width + conf.actorMargin) / 2;\n  } else if (msg.placement === diagObj.db.PLACEMENT.LEFTOF) {\n    noteModel.width = shouldWrap\n      ? Math.max(conf.width, textDimensions.width + 2 * conf.noteMargin)\n      : Math.max(\n          actors[msg.from].width / 2 + actors[msg.to].width / 2,\n          textDimensions.width + 2 * conf.noteMargin\n        );\n    noteModel.startx = startx - noteModel.width + (actors[msg.from].width - conf.actorMargin) / 2;\n  } else if (msg.to === msg.from) {\n    textDimensions = utils.calculateTextDimensions(\n      shouldWrap\n        ? utils.wrapLabel(msg.message, Math.max(conf.width, actors[msg.from].width), noteFont(conf))\n        : msg.message,\n      noteFont(conf)\n    );\n    noteModel.width = shouldWrap\n      ? Math.max(conf.width, actors[msg.from].width)\n      : Math.max(actors[msg.from].width, conf.width, textDimensions.width + 2 * conf.noteMargin);\n    noteModel.startx = startx + (actors[msg.from].width - noteModel.width) / 2;\n  } else {\n    noteModel.width =\n      Math.abs(startx + actors[msg.from].width / 2 - (stopx + actors[msg.to].width / 2)) +\n      conf.actorMargin;\n    noteModel.startx =\n      startx < stopx\n        ? startx + actors[msg.from].width / 2 - conf.actorMargin / 2\n        : stopx + actors[msg.to].width / 2 - conf.actorMargin / 2;\n  }\n  if (shouldWrap) {\n    noteModel.message = utils.wrapLabel(\n      msg.message,\n      noteModel.width - 2 * conf.wrapPadding,\n      noteFont(conf)\n    );\n  }\n  log.debug(\n    `NM:[${noteModel.startx},${noteModel.stopx},${noteModel.starty},${noteModel.stopy}:${noteModel.width},${noteModel.height}=${msg.message}]`\n  );\n  return noteModel;\n};\n\nconst buildMessageModel = function (msg, actors, diagObj) {\n  let process = false;\n  if (\n    [\n      diagObj.db.LINETYPE.SOLID_OPEN,\n      diagObj.db.LINETYPE.DOTTED_OPEN,\n      diagObj.db.LINETYPE.SOLID,\n      diagObj.db.LINETYPE.DOTTED,\n      diagObj.db.LINETYPE.SOLID_CROSS,\n      diagObj.db.LINETYPE.DOTTED_CROSS,\n      diagObj.db.LINETYPE.SOLID_POINT,\n      diagObj.db.LINETYPE.DOTTED_POINT,\n    ].includes(msg.type)\n  ) {\n    process = true;\n  }\n  if (!process) {\n    return {};\n  }\n  const fromBounds = activationBounds(msg.from, actors);\n  const toBounds = activationBounds(msg.to, actors);\n  const fromIdx = fromBounds[0] <= toBounds[0] ? 1 : 0;\n  const toIdx = fromBounds[0] < toBounds[0] ? 0 : 1;\n  const allBounds = [...fromBounds, ...toBounds];\n  const boundedWidth = Math.abs(toBounds[toIdx] - fromBounds[fromIdx]);\n  if (msg.wrap && msg.message) {\n    msg.message = utils.wrapLabel(\n      msg.message,\n      Math.max(boundedWidth + 2 * conf.wrapPadding, conf.width),\n      messageFont(conf)\n    );\n  }\n  const msgDims = utils.calculateTextDimensions(msg.message, messageFont(conf));\n\n  return {\n    width: Math.max(\n      msg.wrap ? 0 : msgDims.width + 2 * conf.wrapPadding,\n      boundedWidth + 2 * conf.wrapPadding,\n      conf.width\n    ),\n    height: 0,\n    startx: fromBounds[fromIdx],\n    stopx: toBounds[toIdx],\n    starty: 0,\n    stopy: 0,\n    message: msg.message,\n    type: msg.type,\n    wrap: msg.wrap,\n    fromBounds: Math.min.apply(null, allBounds),\n    toBounds: Math.max.apply(null, allBounds),\n  };\n};\n\nconst calculateLoopBounds = function (messages, actors, _maxWidthPerActor, diagObj) {\n  const loops = {};\n  const stack = [];\n  let current, noteModel, msgModel;\n\n  messages.forEach(function (msg) {\n    msg.id = utils.random({ length: 10 });\n    switch (msg.type) {\n      case diagObj.db.LINETYPE.LOOP_START:\n      case diagObj.db.LINETYPE.ALT_START:\n      case diagObj.db.LINETYPE.OPT_START:\n      case diagObj.db.LINETYPE.PAR_START:\n      case diagObj.db.LINETYPE.CRITICAL_START:\n      case diagObj.db.LINETYPE.BREAK_START:\n        stack.push({\n          id: msg.id,\n          msg: msg.message,\n          from: Number.MAX_SAFE_INTEGER,\n          to: Number.MIN_SAFE_INTEGER,\n          width: 0,\n        });\n        break;\n      case diagObj.db.LINETYPE.ALT_ELSE:\n      case diagObj.db.LINETYPE.PAR_AND:\n      case diagObj.db.LINETYPE.CRITICAL_OPTION:\n        if (msg.message) {\n          current = stack.pop();\n          loops[current.id] = current;\n          loops[msg.id] = current;\n          stack.push(current);\n        }\n        break;\n      case diagObj.db.LINETYPE.LOOP_END:\n      case diagObj.db.LINETYPE.ALT_END:\n      case diagObj.db.LINETYPE.OPT_END:\n      case diagObj.db.LINETYPE.PAR_END:\n      case diagObj.db.LINETYPE.CRITICAL_END:\n      case diagObj.db.LINETYPE.BREAK_END:\n        current = stack.pop();\n        loops[current.id] = current;\n        break;\n      case diagObj.db.LINETYPE.ACTIVE_START:\n        {\n          const actorRect = actors[msg.from ? msg.from.actor : msg.to.actor];\n          const stackedSize = actorActivations(msg.from ? msg.from.actor : msg.to.actor).length;\n          const x =\n            actorRect.x + actorRect.width / 2 + ((stackedSize - 1) * conf.activationWidth) / 2;\n          const toAdd = {\n            startx: x,\n            stopx: x + conf.activationWidth,\n            actor: msg.from.actor,\n            enabled: true,\n          };\n          bounds.activations.push(toAdd);\n        }\n        break;\n      case diagObj.db.LINETYPE.ACTIVE_END:\n        {\n          const lastActorActivationIdx = bounds.activations\n            .map((a) => a.actor)\n            .lastIndexOf(msg.from.actor);\n          delete bounds.activations.splice(lastActorActivationIdx, 1)[0];\n        }\n        break;\n    }\n    const isNote = msg.placement !== undefined;\n    if (isNote) {\n      noteModel = buildNoteModel(msg, actors, diagObj);\n      msg.noteModel = noteModel;\n      stack.forEach((stk) => {\n        current = stk;\n        current.from = Math.min(current.from, noteModel.startx);\n        current.to = Math.max(current.to, noteModel.startx + noteModel.width);\n        current.width =\n          Math.max(current.width, Math.abs(current.from - current.to)) - conf.labelBoxWidth;\n      });\n    } else {\n      msgModel = buildMessageModel(msg, actors, diagObj);\n      msg.msgModel = msgModel;\n      if (msgModel.startx && msgModel.stopx && stack.length > 0) {\n        stack.forEach((stk) => {\n          current = stk;\n          if (msgModel.startx === msgModel.stopx) {\n            const from = actors[msg.from];\n            const to = actors[msg.to];\n            current.from = Math.min(\n              from.x - msgModel.width / 2,\n              from.x - from.width / 2,\n              current.from\n            );\n            current.to = Math.max(to.x + msgModel.width / 2, to.x + from.width / 2, current.to);\n            current.width =\n              Math.max(current.width, Math.abs(current.to - current.from)) - conf.labelBoxWidth;\n          } else {\n            current.from = Math.min(msgModel.startx, current.from);\n            current.to = Math.max(msgModel.stopx, current.to);\n            current.width = Math.max(current.width, msgModel.width) - conf.labelBoxWidth;\n          }\n        });\n      }\n    }\n  });\n  bounds.activations = [];\n  log.debug('Loop type widths:', loops);\n  return loops;\n};\n\nexport default {\n  bounds,\n  drawActors,\n  drawActorsPopup,\n  setConf,\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/sequenceDiagram';\nimport db from './sequenceDb';\nimport styles from './styles';\nimport renderer from './sequenceRenderer';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n};\n"]}