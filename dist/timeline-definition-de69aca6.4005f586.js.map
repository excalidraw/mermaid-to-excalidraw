{"version":3,"sources":["../src/diagrams/timeline/parser/timeline.jison","../src/diagrams/timeline/timelineDb.js","../src/diagrams/timeline/svgDraw.js","../src/diagrams/timeline/timelineRenderer.ts","../src/diagrams/timeline/styles.js","../src/diagrams/timeline/timeline-definition.ts"],"names":["o","parser","lexer","_parseDirective","this","commonDb.clear","face","arc","d3arc","text","tasks","sections","diagram"],"mappings":"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","file":"timeline-definition-de69aca6.4005f586.js","sourceRoot":"..","sourcesContent":["/** mermaid\n *  https://mermaidjs.github.io/\n *  (c) 2023 Knut Sveidqvist\n *  MIT license.\n */\n%lex\n%options case-insensitive\n%x acc_title\n%x acc_descr\n%x acc_descr_multiline\n\n// Directive states\n%x open_directive type_directive arg_directive\n\n\n%%\n\n\\%\\%\\{                                                          { this.begin('open_directive'); return 'open_directive'; }\n<open_directive>((?:(?!\\}\\%\\%)[^:.])*)                          { this.begin('type_directive'); return 'type_directive'; }\n<type_directive>\":\"                                             { this.popState(); this.begin('arg_directive'); return ':'; }\n<type_directive,arg_directive>\\}\\%\\%                            { this.popState(); this.popState(); return 'close_directive'; }\n<arg_directive>((?:(?!\\}\\%\\%).|\\n)*)                            return 'arg_directive';\n\\%%(?!\\{)[^\\n]*                                                 /* skip comments */\n[^\\}]\\%\\%[^\\n]*                                                 /* skip comments */\n[\\n]+                   return 'NEWLINE';\n\\s+                     /* skip whitespace */\n\\#[^\\n]*                /* skip comments */\n\n\"timeline\"               return 'timeline';\n\"title\"\\s[^#\\n;]+       return 'title';\naccTitle\\s*\":\"\\s*                                               { this.begin(\"acc_title\");return 'acc_title'; }\n<acc_title>(?!\\n|;|#)*[^\\n]*                                    { this.popState(); return \"acc_title_value\"; }\naccDescr\\s*\":\"\\s*                                               { this.begin(\"acc_descr\");return 'acc_descr'; }\n<acc_descr>(?!\\n|;|#)*[^\\n]*                                    { this.popState(); return \"acc_descr_value\"; }\naccDescr\\s*\"{\"\\s*                                { this.begin(\"acc_descr_multiline\");}\n<acc_descr_multiline>[\\}]                       { this.popState(); }\n<acc_descr_multiline>[^\\}]*                     return \"acc_descr_multiline_value\";\n\"section\"\\s[^#:\\n;]+    return 'section';\n\n// event starting with \"==>\" keyword\n\":\"\\s[^#:\\n;]+        return 'event';\n[^#:\\n;]+               return 'period';\n\n\n<<EOF>>                 return 'EOF';\n.                       return 'INVALID';\n\n/lex\n\n%left '^'\n\n%start start\n\n%% /* language grammar */\n\nstart\n\t: timeline document 'EOF' { return $2; }\n\t| directive start\n\t;\n\ndocument\n\t: /* empty */ { $$ = [] }\n\t| document line {$1.push($2);$$ = $1}\n\t;\n\nline\n\t: SPACE statement { $$ = $2 }\n\t| statement { $$ = $1 }\n\t| NEWLINE { $$=[];}\n\t| EOF { $$=[];}\n\t;\n\ndirective\n  : openDirective typeDirective closeDirective 'NEWLINE'\n  | openDirective typeDirective ':' argDirective closeDirective 'NEWLINE'\n  ;\n\nstatement\n  : title {yy.getCommonDb().setDiagramTitle($1.substr(6));$$=$1.substr(6);}\n  | acc_title acc_title_value  { $$=$2.trim();yy.getCommonDb().setAccTitle($$); }\n  | acc_descr acc_descr_value  { $$=$2.trim();yy.getCommonDb().setAccDescription($$); }\n  | acc_descr_multiline_value { $$=$1.trim();yy.getCommonDb().setAccDescription($$); }\n  | section {yy.addSection($1.substr(8));$$=$1.substr(8);}\n  | period_statement\n  | event_statement\n  | directive\n  ;\nperiod_statement\n  : period {yy.addTask($1,0,'');$$=$1;}\n;\nevent_statement\n  : event {yy.addEvent($1.substr(2));$$=$1;}\n;\n\n\nopenDirective\n  : open_directive { yy.parseDirective('%%{', 'open_directive'); }\n  ;\n\ntypeDirective\n  : type_directive { yy.parseDirective($1, 'type_directive'); }\n  ;\n\nargDirective\n  : arg_directive { $1 = $1.trim().replace(/'/g, '\"'); yy.parseDirective($1, 'arg_directive'); }\n  ;\n\ncloseDirective\n  : close_directive { yy.parseDirective('}%%', 'close_directive', 'timeline'); }\n  ;\n\n%%\n","import { parseDirective as _parseDirective } from '../../directiveUtils';\nimport * as commonDb from '../../commonDb';\nlet currentSection = '';\nlet currentTaskId = 0;\n\nconst sections = [];\nconst tasks = [];\nconst rawTasks = [];\n\nexport const getCommonDb = () => commonDb;\n\nexport const parseDirective = (statement, context, type) => {\n  _parseDirective(this, statement, context, type);\n};\n\nexport const clear = function () {\n  sections.length = 0;\n  tasks.length = 0;\n  currentSection = '';\n  rawTasks.length = 0;\n  commonDb.clear();\n};\n\nexport const addSection = function (txt) {\n  currentSection = txt;\n  sections.push(txt);\n};\n\nexport const getSections = function () {\n  return sections;\n};\n\nexport const getTasks = function () {\n  let allItemsProcessed = compileTasks();\n  const maxDepth = 100;\n  let iterationCount = 0;\n  while (!allItemsProcessed && iterationCount < maxDepth) {\n    allItemsProcessed = compileTasks();\n    iterationCount++;\n  }\n\n  tasks.push(...rawTasks);\n\n  return tasks;\n};\n\nexport const addTask = function (period, length, event) {\n  const rawTask = {\n    id: currentTaskId++,\n    section: currentSection,\n    type: currentSection,\n    task: period,\n    score: length ? length : 0,\n    //if event is defined, then add it the events array\n    events: event ? [event] : [],\n  };\n  rawTasks.push(rawTask);\n};\n\nexport const addEvent = function (event) {\n  // fetch current task with currnetTaskId\n  const currentTask = rawTasks.find((task) => task.id === currentTaskId - 1);\n  //add event to the events array\n  currentTask.events.push(event);\n};\n\nexport const addTaskOrg = function (descr) {\n  const newTask = {\n    section: currentSection,\n    type: currentSection,\n    description: descr,\n    task: descr,\n    classes: [],\n  };\n  tasks.push(newTask);\n};\n\n/**\n * Compiles the raw tasks into a list of tasks with events\n * @returns {boolean} true if all items are processed\n * @private\n * @memberof timelineDb\n */\nconst compileTasks = function () {\n  const compileTask = function (pos) {\n    return rawTasks[pos].processed;\n  };\n\n  let allProcessed = true;\n  for (const [i, rawTask] of rawTasks.entries()) {\n    compileTask(i);\n\n    allProcessed = allProcessed && rawTask.processed;\n  }\n  return allProcessed;\n};\n\nexport default {\n  clear,\n  getCommonDb,\n  addSection,\n  getSections,\n  getTasks,\n  addTask,\n  addTaskOrg,\n  addEvent,\n  parseDirective,\n};\n","import { arc as d3arc, select } from 'd3';\nconst MAX_SECTIONS = 12;\n\nexport const drawRect = function (elem, rectData) {\n  const rectElem = elem.append('rect');\n  rectElem.attr('x', rectData.x);\n  rectElem.attr('y', rectData.y);\n  rectElem.attr('fill', rectData.fill);\n  rectElem.attr('stroke', rectData.stroke);\n  rectElem.attr('width', rectData.width);\n  rectElem.attr('height', rectData.height);\n  rectElem.attr('rx', rectData.rx);\n  rectElem.attr('ry', rectData.ry);\n\n  if (rectData.class !== undefined) {\n    rectElem.attr('class', rectData.class);\n  }\n\n  return rectElem;\n};\n\nexport const drawFace = function (element, faceData) {\n  const radius = 15;\n  const circleElement = element\n    .append('circle')\n    .attr('cx', faceData.cx)\n    .attr('cy', faceData.cy)\n    .attr('class', 'face')\n    .attr('r', radius)\n    .attr('stroke-width', 2)\n    .attr('overflow', 'visible');\n\n  const face = element.append('g');\n\n  //left eye\n  face\n    .append('circle')\n    .attr('cx', faceData.cx - radius / 3)\n    .attr('cy', faceData.cy - radius / 3)\n    .attr('r', 1.5)\n    .attr('stroke-width', 2)\n    .attr('fill', '#666')\n    .attr('stroke', '#666');\n\n  //right eye\n  face\n    .append('circle')\n    .attr('cx', faceData.cx + radius / 3)\n    .attr('cy', faceData.cy - radius / 3)\n    .attr('r', 1.5)\n    .attr('stroke-width', 2)\n    .attr('fill', '#666')\n    .attr('stroke', '#666');\n\n  /** @param {any} face */\n  function smile(face) {\n    const arc = d3arc()\n      .startAngle(Math.PI / 2)\n      .endAngle(3 * (Math.PI / 2))\n      .innerRadius(radius / 2)\n      .outerRadius(radius / 2.2);\n    //mouth\n    face\n      .append('path')\n      .attr('class', 'mouth')\n      .attr('d', arc)\n      .attr('transform', 'translate(' + faceData.cx + ',' + (faceData.cy + 2) + ')');\n  }\n\n  /** @param {any} face */\n  function sad(face) {\n    const arc = d3arc()\n      .startAngle((3 * Math.PI) / 2)\n      .endAngle(5 * (Math.PI / 2))\n      .innerRadius(radius / 2)\n      .outerRadius(radius / 2.2);\n    //mouth\n    face\n      .append('path')\n      .attr('class', 'mouth')\n      .attr('d', arc)\n      .attr('transform', 'translate(' + faceData.cx + ',' + (faceData.cy + 7) + ')');\n  }\n\n  /** @param {any} face */\n  function ambivalent(face) {\n    face\n      .append('line')\n      .attr('class', 'mouth')\n      .attr('stroke', 2)\n      .attr('x1', faceData.cx - 5)\n      .attr('y1', faceData.cy + 7)\n      .attr('x2', faceData.cx + 5)\n      .attr('y2', faceData.cy + 7)\n      .attr('class', 'mouth')\n      .attr('stroke-width', '1px')\n      .attr('stroke', '#666');\n  }\n\n  if (faceData.score > 3) {\n    smile(face);\n  } else if (faceData.score < 3) {\n    sad(face);\n  } else {\n    ambivalent(face);\n  }\n\n  return circleElement;\n};\n\nexport const drawCircle = function (element, circleData) {\n  const circleElement = element.append('circle');\n  circleElement.attr('cx', circleData.cx);\n  circleElement.attr('cy', circleData.cy);\n  circleElement.attr('class', 'actor-' + circleData.pos);\n  circleElement.attr('fill', circleData.fill);\n  circleElement.attr('stroke', circleData.stroke);\n  circleElement.attr('r', circleData.r);\n\n  if (circleElement.class !== undefined) {\n    circleElement.attr('class', circleElement.class);\n  }\n\n  if (circleData.title !== undefined) {\n    circleElement.append('title').text(circleData.title);\n  }\n\n  return circleElement;\n};\n\nexport const drawText = function (elem, textData) {\n  // Remove and ignore br:s\n  const nText = textData.text.replace(/<br\\s*\\/?>/gi, ' ');\n\n  const textElem = elem.append('text');\n  textElem.attr('x', textData.x);\n  textElem.attr('y', textData.y);\n  textElem.attr('class', 'legend');\n\n  textElem.style('text-anchor', textData.anchor);\n\n  if (textData.class !== undefined) {\n    textElem.attr('class', textData.class);\n  }\n\n  const span = textElem.append('tspan');\n  span.attr('x', textData.x + textData.textMargin * 2);\n  span.text(nText);\n\n  return textElem;\n};\n\nexport const drawLabel = function (elem, txtObject) {\n  /**\n   * @param {any} x\n   * @param {any} y\n   * @param {any} width\n   * @param {any} height\n   * @param {any} cut\n   */\n  function genPoints(x, y, width, height, cut) {\n    return (\n      x +\n      ',' +\n      y +\n      ' ' +\n      (x + width) +\n      ',' +\n      y +\n      ' ' +\n      (x + width) +\n      ',' +\n      (y + height - cut) +\n      ' ' +\n      (x + width - cut * 1.2) +\n      ',' +\n      (y + height) +\n      ' ' +\n      x +\n      ',' +\n      (y + height)\n    );\n  }\n  const polygon = elem.append('polygon');\n  polygon.attr('points', genPoints(txtObject.x, txtObject.y, 50, 20, 7));\n  polygon.attr('class', 'labelBox');\n\n  txtObject.y = txtObject.y + txtObject.labelMargin;\n  txtObject.x = txtObject.x + 0.5 * txtObject.labelMargin;\n  drawText(elem, txtObject);\n};\n\nexport const drawSection = function (elem, section, conf) {\n  const g = elem.append('g');\n\n  const rect = getNoteRect();\n  rect.x = section.x;\n  rect.y = section.y;\n  rect.fill = section.fill;\n  rect.width = conf.width;\n  rect.height = conf.height;\n  rect.class = 'journey-section section-type-' + section.num;\n  rect.rx = 3;\n  rect.ry = 3;\n  drawRect(g, rect);\n\n  _drawTextCandidateFunc(conf)(\n    section.text,\n    g,\n    rect.x,\n    rect.y,\n    rect.width,\n    rect.height,\n    { class: 'journey-section section-type-' + section.num },\n    conf,\n    section.colour\n  );\n};\n\nlet taskCount = -1;\n/**\n * Draws an actor in the diagram with the attached line\n *\n * @param {any} elem The HTML element\n * @param {any} task The task to render\n * @param {any} conf The global configuration\n */\nexport const drawTask = function (elem, task, conf) {\n  const center = task.x + conf.width / 2;\n  const g = elem.append('g');\n  taskCount++;\n  const maxHeight = 300 + 5 * 30;\n  g.append('line')\n    .attr('id', 'task' + taskCount)\n    .attr('x1', center)\n    .attr('y1', task.y)\n    .attr('x2', center)\n    .attr('y2', maxHeight)\n    .attr('class', 'task-line')\n    .attr('stroke-width', '1px')\n    .attr('stroke-dasharray', '4 2')\n    .attr('stroke', '#666');\n\n  drawFace(g, {\n    cx: center,\n    cy: 300 + (5 - task.score) * 30,\n    score: task.score,\n  });\n\n  const rect = getNoteRect();\n  rect.x = task.x;\n  rect.y = task.y;\n  rect.fill = task.fill;\n  rect.width = conf.width;\n  rect.height = conf.height;\n  rect.class = 'task task-type-' + task.num;\n  rect.rx = 3;\n  rect.ry = 3;\n  drawRect(g, rect);\n\n  let xPos = task.x + 14;\n  // task.people.forEach((person) => {\n  //   const colour = task.actors[person].color;\n\n  //   const circle = {\n  //     cx: xPos,\n  //     cy: task.y,\n  //     r: 7,\n  //     fill: colour,\n  //     stroke: '#000',\n  //     title: person,\n  //     pos: task.actors[person].position,\n  //   };\n\n  //   drawCircle(g, circle);\n  //   xPos += 10;\n  // });\n\n  _drawTextCandidateFunc(conf)(\n    task.task,\n    g,\n    rect.x,\n    rect.y,\n    rect.width,\n    rect.height,\n    { class: 'task' },\n    conf,\n    task.colour\n  );\n};\n\n/**\n * Draws a background rectangle\n *\n * @param {any} elem The html element\n * @param {any} bounds The bounds of the drawing\n */\nexport const drawBackgroundRect = function (elem, bounds) {\n  const rectElem = drawRect(elem, {\n    x: bounds.startx,\n    y: bounds.starty,\n    width: bounds.stopx - bounds.startx,\n    height: bounds.stopy - bounds.starty,\n    fill: bounds.fill,\n    class: 'rect',\n  });\n  rectElem.lower();\n};\n\nexport const getTextObj = function () {\n  return {\n    x: 0,\n    y: 0,\n    fill: undefined,\n    'text-anchor': 'start',\n    width: 100,\n    height: 100,\n    textMargin: 0,\n    rx: 0,\n    ry: 0,\n  };\n};\n\nexport const getNoteRect = function () {\n  return {\n    x: 0,\n    y: 0,\n    width: 100,\n    anchor: 'start',\n    height: 100,\n    rx: 0,\n    ry: 0,\n  };\n};\n\nconst _drawTextCandidateFunc = (function () {\n  /**\n   * @param {any} content\n   * @param {any} g\n   * @param {any} x\n   * @param {any} y\n   * @param {any} width\n   * @param {any} height\n   * @param {any} textAttrs\n   * @param {any} colour\n   */\n  function byText(content, g, x, y, width, height, textAttrs, colour) {\n    const text = g\n      .append('text')\n      .attr('x', x + width / 2)\n      .attr('y', y + height / 2 + 5)\n      .style('font-color', colour)\n      .style('text-anchor', 'middle')\n      .text(content);\n    _setTextAttrs(text, textAttrs);\n  }\n\n  /**\n   * @param {any} content\n   * @param {any} g\n   * @param {any} x\n   * @param {any} y\n   * @param {any} width\n   * @param {any} height\n   * @param {any} textAttrs\n   * @param {any} conf\n   * @param {any} colour\n   */\n  function byTspan(content, g, x, y, width, height, textAttrs, conf, colour) {\n    const { taskFontSize, taskFontFamily } = conf;\n\n    const lines = content.split(/<br\\s*\\/?>/gi);\n    for (let i = 0; i < lines.length; i++) {\n      const dy = i * taskFontSize - (taskFontSize * (lines.length - 1)) / 2;\n      const text = g\n        .append('text')\n        .attr('x', x + width / 2)\n        .attr('y', y)\n        .attr('fill', colour)\n        .style('text-anchor', 'middle')\n        .style('font-size', taskFontSize)\n        .style('font-family', taskFontFamily);\n      text\n        .append('tspan')\n        .attr('x', x + width / 2)\n        .attr('dy', dy)\n        .text(lines[i]);\n\n      text\n        .attr('y', y + height / 2.0)\n        .attr('dominant-baseline', 'central')\n        .attr('alignment-baseline', 'central');\n\n      _setTextAttrs(text, textAttrs);\n    }\n  }\n\n  /**\n   * @param {any} content\n   * @param {any} g\n   * @param {any} x\n   * @param {any} y\n   * @param {any} width\n   * @param {any} height\n   * @param {any} textAttrs\n   * @param {any} conf\n   */\n  function byFo(content, g, x, y, width, height, textAttrs, conf) {\n    const body = g.append('switch');\n    const f = body\n      .append('foreignObject')\n      .attr('x', x)\n      .attr('y', y)\n      .attr('width', width)\n      .attr('height', height)\n      .attr('position', 'fixed');\n\n    const text = f\n      .append('xhtml:div')\n      .style('display', 'table')\n      .style('height', '100%')\n      .style('width', '100%');\n\n    text\n      .append('div')\n      .attr('class', 'label')\n      .style('display', 'table-cell')\n      .style('text-align', 'center')\n      .style('vertical-align', 'middle')\n      .text(content);\n\n    byTspan(content, body, x, y, width, height, textAttrs, conf);\n    _setTextAttrs(text, textAttrs);\n  }\n\n  /**\n   * @param {any} toText\n   * @param {any} fromTextAttrsDict\n   */\n  function _setTextAttrs(toText, fromTextAttrsDict) {\n    for (const key in fromTextAttrsDict) {\n      if (key in fromTextAttrsDict) {\n        // noinspection JSUnfilteredForInLoop\n        toText.attr(key, fromTextAttrsDict[key]);\n      }\n    }\n  }\n\n  return function (conf) {\n    return conf.textPlacement === 'fo' ? byFo : conf.textPlacement === 'old' ? byText : byTspan;\n  };\n})();\n\nconst initGraphics = function (graphics) {\n  graphics\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('refX', 5)\n    .attr('refY', 2)\n    .attr('markerWidth', 6)\n    .attr('markerHeight', 4)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 0,0 V 4 L6,2 Z'); // this is actual shape for arrowhead\n};\n\n/**\n * @param {string} text The text to be wrapped\n * @param {number} width The max width of the text\n */\nfunction wrap(text, width) {\n  text.each(function () {\n    var text = select(this),\n      words = text\n        .text()\n        .split(/(\\s+|<br>)/)\n        .reverse(),\n      word,\n      line = [],\n      lineHeight = 1.1, // ems\n      y = text.attr('y'),\n      dy = parseFloat(text.attr('dy')),\n      tspan = text\n        .text(null)\n        .append('tspan')\n        .attr('x', 0)\n        .attr('y', y)\n        .attr('dy', dy + 'em');\n    for (let j = 0; j < words.length; j++) {\n      word = words[words.length - 1 - j];\n      line.push(word);\n      tspan.text(line.join(' ').trim());\n      if (tspan.node().getComputedTextLength() > width || word === '<br>') {\n        line.pop();\n        tspan.text(line.join(' ').trim());\n        if (word === '<br>') {\n          line = [''];\n        } else {\n          line = [word];\n        }\n\n        tspan = text\n          .append('tspan')\n          .attr('x', 0)\n          .attr('y', y)\n          .attr('dy', lineHeight + 'em')\n          .text(word);\n      }\n    }\n  });\n}\n\nexport const drawNode = function (elem, node, fullSection, conf) {\n  const section = (fullSection % MAX_SECTIONS) - 1;\n  const nodeElem = elem.append('g');\n  node.section = section;\n  nodeElem.attr(\n    'class',\n    (node.class ? node.class + ' ' : '') + 'timeline-node ' + ('section-' + section)\n  );\n  const bkgElem = nodeElem.append('g');\n\n  // Create the wrapped text element\n  const textElem = nodeElem.append('g');\n\n  const txt = textElem\n    .append('text')\n    .text(node.descr)\n    .attr('dy', '1em')\n    .attr('alignment-baseline', 'middle')\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .call(wrap, node.width);\n  const bbox = txt.node().getBBox();\n  const fontSize =\n    conf.fontSize && conf.fontSize.replace ? conf.fontSize.replace('px', '') : conf.fontSize;\n  node.height = bbox.height + fontSize * 1.1 * 0.5 + node.padding;\n  node.height = Math.max(node.height, node.maxHeight);\n  node.width = node.width + 2 * node.padding;\n\n  textElem.attr('transform', 'translate(' + node.width / 2 + ', ' + node.padding / 2 + ')');\n\n  // Create the background element\n  defaultBkg(bkgElem, node, section, conf);\n\n  return node;\n};\n\nexport const getVirtualNodeHeight = function (elem, node, conf) {\n  const textElem = elem.append('g');\n  const txt = textElem\n    .append('text')\n    .text(node.descr)\n    .attr('dy', '1em')\n    .attr('alignment-baseline', 'middle')\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .call(wrap, node.width);\n  const bbox = txt.node().getBBox();\n  const fontSize =\n    conf.fontSize && conf.fontSize.replace ? conf.fontSize.replace('px', '') : conf.fontSize;\n  textElem.remove();\n  return bbox.height + fontSize * 1.1 * 0.5 + node.padding;\n};\n\nconst defaultBkg = function (elem, node, section) {\n  const rd = 5;\n  elem\n    .append('path')\n    .attr('id', 'node-' + node.id)\n    .attr('class', 'node-bkg node-' + node.type)\n    .attr(\n      'd',\n      `M0 ${node.height - rd} v${-node.height + 2 * rd} q0,-5 5,-5 h${\n        node.width - 2 * rd\n      } q5,0 5,5 v${node.height - rd} H0 Z`\n    );\n\n  elem\n    .append('line')\n    .attr('class', 'node-line-' + section)\n    .attr('x1', 0)\n    .attr('y1', node.height)\n    .attr('x2', node.width)\n    .attr('y2', node.height);\n};\n\nexport default {\n  drawRect,\n  drawCircle,\n  drawSection,\n  drawText,\n  drawLabel,\n  drawTask,\n  drawBackgroundRect,\n  getTextObj,\n  getNoteRect,\n  initGraphics,\n  drawNode,\n  getVirtualNodeHeight,\n};\n","// @ts-ignore - db not typed yet\nimport { select, Selection } from 'd3';\nimport svgDraw from './svgDraw';\nimport { log } from '../../logger';\nimport { getConfig } from '../../config';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\nimport { Diagram } from '../../Diagram';\nimport { MermaidConfig } from '../../config.type';\n\ninterface Block<TDesc, TSection> {\n  number: number;\n  descr: TDesc;\n  section: TSection;\n  width: number;\n  padding: number;\n  maxHeight: number;\n}\n\ninterface TimelineTask {\n  id: number;\n  section: string;\n  type: string;\n  task: string;\n  score: number;\n  events: string[];\n}\nexport const draw = function (text: string, id: string, version: string, diagObj: Diagram) {\n  //1. Fetch the configuration\n  const conf = getConfig();\n  // @ts-expect-error - wrong config?\n  const LEFT_MARGIN = conf.leftMargin ?? 50;\n\n  //2. Clear the diagram db before parsing\n  diagObj.db.clear?.();\n\n  //3. Parse the diagram text\n  diagObj.parser.parse(text + '\\n');\n\n  log.debug('timeline', diagObj.db);\n\n  const securityLevel = conf.securityLevel;\n  // Handle root and Document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? // @ts-ignore d3 types are wrong\n        select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n\n  // @ts-ignore d3 types are wrong\n  const svg = root.select('#' + id);\n\n  svg.append('g');\n\n  //4. Fetch the diagram data\n  // @ts-expect-error - db not typed yet\n  const tasks: TimelineTask[] = diagObj.db.getTasks();\n  // @ts-expect-error - db not typed yet\n  const title = diagObj.db.getCommonDb().getDiagramTitle();\n  log.debug('task', tasks);\n\n  //5. Initialize the diagram\n  svgDraw.initGraphics(svg);\n\n  // fetch Sections\n  // @ts-expect-error - db not typed yet\n  const sections: string[] = diagObj.db.getSections();\n  log.debug('sections', sections);\n\n  let maxSectionHeight = 0;\n  let maxTaskHeight = 0;\n  //let sectionBeginX = 0;\n  let depthY = 0;\n  let sectionBeginY = 0;\n  let masterX = 50 + LEFT_MARGIN;\n  //sectionBeginX = masterX;\n  let masterY = 50;\n  sectionBeginY = 50;\n  //draw sections\n  let sectionNumber = 0;\n  let hasSections = true;\n\n  //Calculate the max height of the sections\n  sections.forEach(function (section: string) {\n    const sectionNode: Block<string, number> = {\n      number: sectionNumber,\n      descr: section,\n      section: sectionNumber,\n      width: 150,\n      padding: 20,\n      maxHeight: maxSectionHeight,\n    };\n    const sectionHeight = svgDraw.getVirtualNodeHeight(svg, sectionNode, conf);\n    log.debug('sectionHeight before draw', sectionHeight);\n    maxSectionHeight = Math.max(maxSectionHeight, sectionHeight + 20);\n  });\n\n  //tasks length and maxEventCount\n  let maxEventCount = 0;\n  let maxEventLineLength = 0;\n  log.debug('tasks.length', tasks.length);\n  //calculate max task height\n  // for loop till tasks.length\n\n  for (const [i, task] of tasks.entries()) {\n    const taskNode: Block<TimelineTask, string> = {\n      number: i,\n      descr: task,\n      section: task.section,\n      width: 150,\n      padding: 20,\n      maxHeight: maxTaskHeight,\n    };\n    const taskHeight = svgDraw.getVirtualNodeHeight(svg, taskNode, conf);\n    log.debug('taskHeight before draw', taskHeight);\n    maxTaskHeight = Math.max(maxTaskHeight, taskHeight + 20);\n\n    //calculate maxEventCount\n    maxEventCount = Math.max(maxEventCount, task.events.length);\n    //calculate maxEventLineLength\n    let maxEventLineLengthTemp = 0;\n    for (let j = 0; j < task.events.length; j++) {\n      const event = task.events[j];\n      const eventNode = {\n        descr: event,\n        section: task.section,\n        number: task.section,\n        width: 150,\n        padding: 20,\n        maxHeight: 50,\n      };\n      maxEventLineLengthTemp += svgDraw.getVirtualNodeHeight(svg, eventNode, conf);\n    }\n    maxEventLineLength = Math.max(maxEventLineLength, maxEventLineLengthTemp);\n  }\n\n  log.debug('maxSectionHeight before draw', maxSectionHeight);\n  log.debug('maxTaskHeight before draw', maxTaskHeight);\n\n  if (sections && sections.length > 0) {\n    sections.forEach((section) => {\n      //filter task where tasks.section == section\n      const tasksForSection = tasks.filter((task) => task.section === section);\n\n      const sectionNode: Block<string, number> = {\n        number: sectionNumber,\n        descr: section,\n        section: sectionNumber,\n        width: 200 * Math.max(tasksForSection.length, 1) - 50,\n        padding: 20,\n        maxHeight: maxSectionHeight,\n      };\n      log.debug('sectionNode', sectionNode);\n      const sectionNodeWrapper = svg.append('g');\n      const node = svgDraw.drawNode(sectionNodeWrapper, sectionNode, sectionNumber, conf);\n      log.debug('sectionNode output', node);\n\n      sectionNodeWrapper.attr('transform', `translate(${masterX}, ${sectionBeginY})`);\n\n      masterY += maxSectionHeight + 50;\n\n      //draw tasks for this section\n      if (tasksForSection.length > 0) {\n        drawTasks(\n          svg,\n          tasksForSection,\n          sectionNumber,\n          masterX,\n          masterY,\n          maxTaskHeight,\n          conf,\n          maxEventCount,\n          maxEventLineLength,\n          maxSectionHeight,\n          false\n        );\n      }\n      // todo replace with total width of section and its tasks\n      masterX += 200 * Math.max(tasksForSection.length, 1);\n\n      masterY = sectionBeginY;\n      sectionNumber++;\n    });\n  } else {\n    //draw tasks\n    hasSections = false;\n    drawTasks(\n      svg,\n      tasks,\n      sectionNumber,\n      masterX,\n      masterY,\n      maxTaskHeight,\n      conf,\n      maxEventCount,\n      maxEventLineLength,\n      maxSectionHeight,\n      true\n    );\n  }\n\n  // Get BBox of the diagram\n  const box = svg.node().getBBox();\n  log.debug('bounds', box);\n\n  if (title) {\n    svg\n      .append('text')\n      .text(title)\n      .attr('x', box.width / 2 - LEFT_MARGIN)\n      .attr('font-size', '4ex')\n      .attr('font-weight', 'bold')\n      .attr('y', 20);\n  }\n  //5. Draw the diagram\n  depthY = hasSections ? maxSectionHeight + maxTaskHeight + 150 : maxTaskHeight + 100;\n\n  const lineWrapper = svg.append('g').attr('class', 'lineWrapper');\n  // Draw activity line\n  lineWrapper\n    .append('line')\n    .attr('x1', LEFT_MARGIN)\n    .attr('y1', depthY) // One section head + one task + margins\n    .attr('x2', box.width + 3 * LEFT_MARGIN) // Subtract stroke width so arrow point is retained\n    .attr('y2', depthY)\n    .attr('stroke-width', 4)\n    .attr('stroke', 'black')\n    .attr('marker-end', 'url(#arrowhead)');\n\n  // Setup the view box and size of the svg element\n  setupGraphViewbox(\n    undefined,\n    svg,\n    conf.timeline?.padding ?? 50,\n    conf.timeline?.useMaxWidth ?? false\n  );\n\n  // addSVGAccessibilityFields(diagObj.db, diagram, id);\n};\n\nexport const drawTasks = function (\n  diagram: Selection<SVGElement, unknown, null, undefined>,\n  tasks: TimelineTask[],\n  sectionColor: number,\n  masterX: number,\n  masterY: number,\n  maxTaskHeight: number,\n  conf: MermaidConfig,\n  maxEventCount: number,\n  maxEventLineLength: number,\n  maxSectionHeight: number,\n  isWithoutSections: boolean\n) {\n  // Draw the tasks\n  for (const task of tasks) {\n    // create node from task\n    const taskNode = {\n      descr: task.task,\n      section: sectionColor,\n      number: sectionColor,\n      width: 150,\n      padding: 20,\n      maxHeight: maxTaskHeight,\n    };\n\n    log.debug('taskNode', taskNode);\n    // create task wrapper\n\n    const taskWrapper = diagram.append('g').attr('class', 'taskWrapper');\n    const node = svgDraw.drawNode(taskWrapper, taskNode, sectionColor, conf);\n    const taskHeight = node.height;\n    //log task height\n    log.debug('taskHeight after draw', taskHeight);\n    taskWrapper.attr('transform', `translate(${masterX}, ${masterY})`);\n\n    // update max task height\n    maxTaskHeight = Math.max(maxTaskHeight, taskHeight);\n\n    // if task has events, draw them\n    if (task.events) {\n      // draw a line between the task and the events\n      const lineWrapper = diagram.append('g').attr('class', 'lineWrapper');\n      let lineLength = maxTaskHeight;\n      //add margin to task\n      masterY += 100;\n      lineLength =\n        lineLength + drawEvents(diagram, task.events, sectionColor, masterX, masterY, conf);\n      masterY -= 100;\n\n      lineWrapper\n        .append('line')\n        .attr('x1', masterX + 190 / 2)\n        .attr('y1', masterY + maxTaskHeight) // One section head + one task + margins\n        .attr('x2', masterX + 190 / 2) // Subtract stroke width so arrow point is retained\n        .attr(\n          'y2',\n          masterY +\n            maxTaskHeight +\n            (isWithoutSections ? maxTaskHeight : maxSectionHeight) +\n            maxEventLineLength +\n            120\n        )\n        .attr('stroke-width', 2)\n        .attr('stroke', 'black')\n        .attr('marker-end', 'url(#arrowhead)')\n        .attr('stroke-dasharray', '5,5');\n    }\n\n    masterX = masterX + 200;\n    if (isWithoutSections && !conf.timeline?.disableMulticolor) {\n      sectionColor++;\n    }\n  }\n\n  // reset Y coordinate for next section\n  masterY = masterY - 10;\n};\n\nexport const drawEvents = function (\n  diagram: Selection<SVGElement, unknown, null, undefined>,\n  events: string[],\n  sectionColor: number,\n  masterX: number,\n  masterY: number,\n  conf: MermaidConfig\n) {\n  let maxEventHeight = 0;\n  const eventBeginY = masterY;\n  masterY = masterY + 100;\n  // Draw the events\n  for (const event of events) {\n    // create node from event\n    const eventNode: Block<string, number> = {\n      descr: event,\n      section: sectionColor,\n      number: sectionColor,\n      width: 150,\n      padding: 20,\n      maxHeight: 50,\n    };\n\n    //log task node\n    log.debug('eventNode', eventNode);\n    // create event wrapper\n    const eventWrapper = diagram.append('g').attr('class', 'eventWrapper');\n    const node = svgDraw.drawNode(eventWrapper, eventNode, sectionColor, conf);\n    const eventHeight = node.height;\n    maxEventHeight = maxEventHeight + eventHeight;\n    eventWrapper.attr('transform', `translate(${masterX}, ${masterY})`);\n    masterY = masterY + 10 + eventHeight;\n  }\n  // set masterY back to eventBeginY\n  masterY = eventBeginY;\n  return maxEventHeight;\n};\n\nexport default {\n  setConf: () => {\n    // no-op\n  },\n  draw,\n};\n","import { darken, lighten, isDark } from 'khroma';\n\nconst genSections = (options) => {\n  let sections = '';\n\n  for (let i = 0; i < options.THEME_COLOR_LIMIT; i++) {\n    options['lineColor' + i] = options['lineColor' + i] || options['cScaleInv' + i];\n    if (isDark(options['lineColor' + i])) {\n      options['lineColor' + i] = lighten(options['lineColor' + i], 20);\n    } else {\n      options['lineColor' + i] = darken(options['lineColor' + i], 20);\n    }\n  }\n\n  for (let i = 0; i < options.THEME_COLOR_LIMIT; i++) {\n    const sw = '' + (17 - 3 * i);\n    sections += `\n    .section-${i - 1} rect, .section-${i - 1} path, .section-${i - 1} circle, .section-${\n      i - 1\n    } path  {\n      fill: ${options['cScale' + i]};\n    }\n    .section-${i - 1} text {\n     fill: ${options['cScaleLabel' + i]};\n    }\n    .node-icon-${i - 1} {\n      font-size: 40px;\n      color: ${options['cScaleLabel' + i]};\n    }\n    .section-edge-${i - 1}{\n      stroke: ${options['cScale' + i]};\n    }\n    .edge-depth-${i - 1}{\n      stroke-width: ${sw};\n    }\n    .section-${i - 1} line {\n      stroke: ${options['cScaleInv' + i]} ;\n      stroke-width: 3;\n    }\n\n    .lineWrapper line{\n      stroke: ${options['cScaleLabel' + i]} ;\n    }\n\n    .disabled, .disabled circle, .disabled text {\n      fill: lightgray;\n    }\n    .disabled text {\n      fill: #efefef;\n    }\n    `;\n  }\n  return sections;\n};\n\nconst getStyles = (options) =>\n  `\n  .edge {\n    stroke-width: 3;\n  }\n  ${genSections(options)}\n  .section-root rect, .section-root path, .section-root circle  {\n    fill: ${options.git0};\n  }\n  .section-root text {\n    fill: ${options.gitBranchLabel0};\n  }\n  .icon-container {\n    height:100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .edge {\n    fill: none;\n  }\n  .eventWrapper  {\n   filter: brightness(120%);\n  }\n`;\nexport default getStyles;\n","// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/timeline.jison';\nimport * as db from './timelineDb';\nimport renderer from './timelineRenderer';\nimport styles from './styles';\n\nexport const diagram = {\n  db,\n  renderer,\n  parser,\n  styles,\n};\n"]}