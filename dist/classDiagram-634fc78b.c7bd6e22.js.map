{"version":3,"sources":["../src/diagrams/class/classRenderer.js","../src/diagrams/class/classDiagram.ts"],"names":["diagram","dagreLayout"],"mappings":"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","file":"classDiagram-634fc78b.c7bd6e22.js","sourceRoot":"..","sourcesContent":["import { select } from 'd3';\nimport { layout as dagreLayout } from 'dagre-d3-es/src/dagre/index.js';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport svgDraw from './svgDraw';\nimport { configureSvgSize } from '../../setupGraphViewbox';\nimport { getConfig } from '../../config';\n\nlet idCache = {};\nconst padding = 20;\n\n/**\n * Gets the ID with the same label as in the cache\n *\n * @param {string} label The label to look for\n * @returns {string} The resulting ID\n */\nconst getGraphId = function (label) {\n  const foundEntry = Object.entries(idCache).find((entry) => entry[1].label === label);\n\n  if (foundEntry) {\n    return foundEntry[0];\n  }\n};\n\n/**\n * Setup arrow head and define the marker. The result is appended to the svg.\n *\n * @param {SVGSVGElement} elem The SVG element to append to\n */\nconst insertMarkers = function (elem) {\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'extensionStart')\n    .attr('class', 'extension')\n    .attr('refX', 0)\n    .attr('refY', 7)\n    .attr('markerWidth', 190)\n    .attr('markerHeight', 240)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 1,7 L18,13 V 1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'extensionEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 1,1 V 13 L18,7 Z'); // this is actual shape for arrowhead\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'compositionStart')\n    .attr('class', 'extension')\n    .attr('refX', 0)\n    .attr('refY', 7)\n    .attr('markerWidth', 190)\n    .attr('markerHeight', 240)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'compositionEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'aggregationStart')\n    .attr('class', 'extension')\n    .attr('refX', 0)\n    .attr('refY', 7)\n    .attr('markerWidth', 190)\n    .attr('markerHeight', 240)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'aggregationEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'dependencyStart')\n    .attr('class', 'extension')\n    .attr('refX', 0)\n    .attr('refY', 7)\n    .attr('markerWidth', 190)\n    .attr('markerHeight', 240)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 5,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'dependencyEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L14,7 L9,1 Z');\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param {string} text\n * @param {string} id\n * @param {any} _version\n * @param diagObj\n */\nexport const draw = function (text, id, _version, diagObj) {\n  const conf = getConfig().class;\n  idCache = {};\n  // diagObj.db.clear();\n  // diagObj.parser.parse(text);\n\n  log.info('Rendering diagram ' + text);\n\n  const securityLevel = getConfig().securityLevel;\n  // Handle root and Document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n\n  // Fetch the default direction, use TD if none was found\n  const diagram = root.select(`[id='${id}']`);\n  insertMarkers(diagram);\n\n  // Layout graph, Create a new directed graph\n  const g = new graphlib.Graph({\n    multigraph: true,\n  });\n\n  // Set an object for the graph label\n  g.setGraph({\n    isMultiGraph: true,\n  });\n\n  // Default to assigning a new object as a label for each new edge.\n  g.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  const classes = diagObj.db.getClasses();\n  const keys = Object.keys(classes);\n\n  for (const key of keys) {\n    const classDef = classes[key];\n    const node = svgDraw.drawClass(diagram, classDef, conf, diagObj);\n    idCache[node.id] = node;\n\n    // Add nodes to the graph. The first argument is the node id. The second is\n    // metadata about the node. In this case we're going to add labels to each of\n    // our nodes.\n    g.setNode(node.id, node);\n\n    log.info('Org height: ' + node.height);\n  }\n\n  const relations = diagObj.db.getRelations();\n  relations.forEach(function (relation) {\n    log.info(\n      'tjoho' + getGraphId(relation.id1) + getGraphId(relation.id2) + JSON.stringify(relation)\n    );\n    g.setEdge(\n      getGraphId(relation.id1),\n      getGraphId(relation.id2),\n      {\n        relation: relation,\n      },\n      relation.title || 'DEFAULT'\n    );\n  });\n\n  const notes = diagObj.db.getNotes();\n  notes.forEach(function (note) {\n    log.debug(`Adding note: ${JSON.stringify(note)}`);\n    const node = svgDraw.drawNote(diagram, note, conf, diagObj);\n    idCache[node.id] = node;\n\n    // Add nodes to the graph. The first argument is the node id. The second is\n    // metadata about the node. In this case we're going to add labels to each of\n    // our nodes.\n    g.setNode(node.id, node);\n    if (note.class && note.class in classes) {\n      g.setEdge(\n        note.id,\n        getGraphId(note.class),\n        {\n          relation: {\n            id1: note.id,\n            id2: note.class,\n            relation: {\n              type1: 'none',\n              type2: 'none',\n              lineType: 10,\n            },\n          },\n        },\n        'DEFAULT'\n      );\n    }\n  });\n\n  dagreLayout(g);\n  g.nodes().forEach(function (v) {\n    if (v !== undefined && g.node(v) !== undefined) {\n      log.debug('Node ' + v + ': ' + JSON.stringify(g.node(v)));\n      root\n        .select('#' + (diagObj.db.lookUpDomId(v) || v))\n        .attr(\n          'transform',\n          'translate(' +\n            (g.node(v).x - g.node(v).width / 2) +\n            ',' +\n            (g.node(v).y - g.node(v).height / 2) +\n            ' )'\n        );\n    }\n  });\n\n  g.edges().forEach(function (e) {\n    if (e !== undefined && g.edge(e) !== undefined) {\n      log.debug('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(g.edge(e)));\n      svgDraw.drawEdge(diagram, g.edge(e), g.edge(e).relation, conf, diagObj);\n    }\n  });\n\n  const svgBounds = diagram.node().getBBox();\n  const width = svgBounds.width + padding * 2;\n  const height = svgBounds.height + padding * 2;\n\n  configureSvgSize(diagram, height, width, conf.useMaxWidth);\n\n  // Ensure the viewBox includes the whole svgBounds area with extra space for padding\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  diagram.attr('viewBox', vBox);\n};\n\nexport default {\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/classDiagram';\nimport db from './classDb';\nimport styles from './styles';\nimport renderer from './classRenderer';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"]}