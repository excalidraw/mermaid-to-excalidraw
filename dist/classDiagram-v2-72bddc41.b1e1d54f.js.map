{"version":3,"sources":["../src/diagrams/class/classRenderer-v2.ts","../src/diagrams/class/classDiagram-v2.ts"],"names":["styles","conf"],"mappings":"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","file":"classDiagram-v2-72bddc41.b1e1d54f.js","sourceRoot":"..","sourcesContent":["// @ts-ignore d3 types are not available\nimport { select, curveLinear } from 'd3';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport { getConfig } from '../../config';\nimport { render } from '../../dagre-wrapper/index.js';\nimport utils from '../../utils';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\nimport common from '../common/common';\nimport { ClassRelation, ClassNote, ClassMap, EdgeData } from './classTypes';\n\nconst sanitizeText = (txt: string) => common.sanitizeText(txt, getConfig());\n\nlet conf = {\n  dividerMargin: 10,\n  padding: 5,\n  textHeight: 10,\n  curve: undefined,\n};\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param classes - Object containing the vertices.\n * @param g - The graph that is to be drawn.\n * @param _id - id of the graph\n * @param diagObj - The diagram object\n */\nexport const addClasses = function (\n  classes: ClassMap,\n  g: graphlib.Graph,\n  _id: string,\n  diagObj: any\n) {\n  const keys = Object.keys(classes);\n  log.info('keys:', keys);\n  log.info(classes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  keys.forEach(function (id) {\n    const vertex = classes[id];\n\n    /**\n     * Variable for storing the classes for the vertex\n     */\n    let cssClassStr = '';\n    if (vertex.cssClasses.length > 0) {\n      cssClassStr = cssClassStr + ' ' + vertex.cssClasses.join(' ');\n    }\n\n    const styles = { labelStyle: '', style: '' }; //getStylesFromArray(vertex.styles);\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    const vertexText = vertex.label ?? vertex.id;\n    const radius = 0;\n    const shape = 'class_box';\n    // Add the node\n    const node = {\n      labelStyle: styles.labelStyle,\n      shape: shape,\n      labelText: sanitizeText(vertexText),\n      classData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssClassStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.domId,\n      tooltip: diagObj.db.getTooltip(vertex.id) || '',\n      haveCallback: vertex.haveCallback,\n      link: vertex.link,\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n    g.setNode(vertex.id, node);\n    log.info('setNode', node);\n  });\n};\n\n/**\n * Function that adds the additional vertices (notes) found during parsing to the graph to be rendered.\n *\n * @param notes - Object containing the additional vertices (notes).\n * @param g - The graph that is to be drawn.\n * @param startEdgeId - starting index for note edge\n * @param classes - Classes\n */\nexport const addNotes = function (\n  notes: ClassNote[],\n  g: graphlib.Graph,\n  startEdgeId: number,\n  classes: ClassMap\n) {\n  log.info(notes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  notes.forEach(function (note, i) {\n    const vertex = note;\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     */\n    const cssNoteStr = '';\n\n    const styles = { labelStyle: '', style: '' };\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    const vertexText = vertex.text;\n\n    const radius = 0;\n    const shape = 'note';\n    // Add the node\n    const node = {\n      labelStyle: styles.labelStyle,\n      shape: shape,\n      labelText: sanitizeText(vertexText),\n      noteData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssNoteStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.id,\n      tooltip: '',\n      type: 'note',\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n    g.setNode(vertex.id, node);\n    log.info('setNode', node);\n\n    if (!vertex.class || !(vertex.class in classes)) {\n      return;\n    }\n    const edgeId = startEdgeId + i;\n\n    const edgeData: EdgeData = {\n      id: `edgeNote${edgeId}`,\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: 'dotted',\n      // Set link type for rendering\n      arrowhead: 'none',\n      //Set edge extra labels\n      startLabelRight: '',\n      endLabelLeft: '',\n      //Set relation arrow types\n      arrowTypeStart: 'none',\n      arrowTypeEnd: 'none',\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf.curve, curveLinear),\n    };\n\n    // Add the edge to the graph\n    g.setEdge(vertex.id, vertex.class, edgeData, edgeId);\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param relations -\n * @param g - The graph object\n */\nexport const addRelations = function (relations: ClassRelation[], g: graphlib.Graph) {\n  const conf = getConfig().flowchart;\n  let cnt = 0;\n\n  relations.forEach(function (edge) {\n    cnt++;\n    const edgeData: EdgeData = {\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: edge.relation.lineType == 1 ? 'dashed' : 'solid',\n      id: 'id' + cnt,\n      // Set link type for rendering\n      arrowhead: edge.type === 'arrow_open' ? 'none' : 'normal',\n      //Set edge extra labels\n      startLabelRight: edge.relationTitle1 === 'none' ? '' : edge.relationTitle1,\n      endLabelLeft: edge.relationTitle2 === 'none' ? '' : edge.relationTitle2,\n      //Set relation arrow types\n      arrowTypeStart: getArrowMarker(edge.relation.type1),\n      arrowTypeEnd: getArrowMarker(edge.relation.type2),\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf?.curve, curveLinear),\n    };\n\n    log.info(edgeData, edge);\n\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      edgeData.style = styles.style;\n      edgeData.labelStyle = styles.labelStyle;\n    }\n\n    edge.text = edge.title;\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      if (getConfig().flowchart?.htmlLabels ?? getConfig().htmlLabels) {\n        edgeData.labelType = 'html';\n        edgeData.label = '<span class=\"edgeLabel\">' + edge.text + '</span>';\n      } else {\n        edgeData.labelType = 'text';\n        edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n        if (edge.style === undefined) {\n          edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none';\n        }\n\n        edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n      }\n    }\n    // Add the edge to the graph\n    g.setEdge(edge.id1, edge.id2, edgeData, cnt);\n  });\n};\n\n/**\n * Merges the value of `conf` with the passed `cnf`\n *\n * @param cnf - Config to merge\n */\nexport const setConf = function (cnf: any) {\n  conf = {\n    ...conf,\n    ...cnf,\n  };\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param text -\n * @param id -\n * @param _version -\n * @param diagObj -\n */\nexport const draw = function (text: string, id: string, _version: string, diagObj: any) {\n  log.info('Drawing class - ', id);\n\n  // TODO V10: Why flowchart? Might be a mistake when copying.\n  const conf = getConfig().flowchart ?? getConfig().class;\n  const securityLevel = getConfig().securityLevel;\n  log.info('config:', conf);\n  const nodeSpacing = conf?.nodeSpacing ?? 50;\n  const rankSpacing = conf?.rankSpacing ?? 50;\n\n  // Create the input mermaid.graph\n  const g: graphlib.Graph = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: diagObj.db.getDirection(),\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 8,\n      marginy: 8,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const classes: ClassMap = diagObj.db.getClasses();\n  const relations: ClassRelation[] = diagObj.db.getRelations();\n  const notes: ClassNote[] = diagObj.db.getNotes();\n  log.info(relations);\n  addClasses(classes, g, id, diagObj);\n  addRelations(relations, g);\n  addNotes(notes, g, relations.length + 1, classes);\n\n  // Set up an SVG group so that we can translate the final graph.\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? // @ts-ignore Ignore type error for now\n\n        select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  // @ts-ignore Ignore type error for now\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  // @ts-ignore Ignore type error for now\n  const element = root.select('#' + id + ' g');\n  render(\n    element,\n    g,\n    ['aggregation', 'extension', 'composition', 'dependency', 'lollipop'],\n    'classDiagram',\n    id\n  );\n\n  utils.insertTitle(svg, 'classTitleText', conf?.titleTopMargin ?? 5, diagObj.db.getDiagramTitle());\n\n  setupGraphViewbox(g, svg, conf?.diagramPadding, conf?.useMaxWidth);\n\n  // Add label rects for non html labels\n  if (!conf?.htmlLabels) {\n    // @ts-ignore Ignore type error for now\n    const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n};\n\n/**\n * Gets the arrow marker for a type index\n *\n * @param type - The type to look for\n * @returns The arrow marker\n */\nfunction getArrowMarker(type: number) {\n  let marker;\n  switch (type) {\n    case 0:\n      marker = 'aggregation';\n      break;\n    case 1:\n      marker = 'extension';\n      break;\n    case 2:\n      marker = 'composition';\n      break;\n    case 3:\n      marker = 'dependency';\n      break;\n    case 4:\n      marker = 'lollipop';\n      break;\n    default:\n      marker = 'none';\n  }\n  return marker;\n}\n\nexport default {\n  setConf,\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/classDiagram';\nimport db from './classDb';\nimport styles from './styles';\nimport renderer from './classRenderer-v2';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"]}